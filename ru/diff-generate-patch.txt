[[generate_patch_text_with_p]]
Создание патчей с помощью -p
----------------------------

Запуск команд linkgit:git-diff[1], linkgit:git-log[1], linkgit:git-show[1], linkgit:git-diff-index[1], linkgit:git-diff-tree[1], или linkgit:git-diff-files[1] с параметром `-p` выдаёт текст патча. Вы можете изменить некоторые аспекты этого создаваемого текста с помощью переменных окружения `GIT_EXTERNAL_DIFF` и `GIT_DIFF_OPTS` (см. linkgit:git[1]), а также атрибута `diff` (см. linkgit:gitattributes[5]).

Тот текст, которые получается на выходе при запуске с параметром `-p`, немного отличается от традиционного формата списка изменений:

1.   В начале идёт заголовок «git diff», который выглядит следующим образом:

       diff --git a/файл1 b/файл2
+
Имена файлов `a/` и `b/` одинаковы, если изменения не связаны с переименованием или копированием. В частности, даже для создания или удаления вместо имён файлов `a/` или `b/` _не_ используется `/dev/null` .
+
Когда же изменения являются переименование или копирование, `file1` и `file2` отображают имена исходного файла и того, который получается в результате переименования/копирования, соответственно.

2.   Далее следуют одна или несколько строк расширенного заголовка:
+
[synopsis]
old mode <режим>
new mode <режим>
deleted file mode <режим>
new file mode <режим>
copy from <путь>
copy to <путь>
rename from <путь>
rename to <путь>
similarity index <число>
dissimilarity index <число>
index <хэш>..<хэш> <режим>
+
Режимы файлов _`<режим>`_ печатаются как 6-значные восьмеричные числа, включающие тип файла и биты разрешений.
+
Пути в расширенных заголовках не включают префиксы `a/` и `b/`.
+
Индекс сходства — это процент не изменённых строк, а индекс различия — процент изменённых. Он представляет собой округлённое вниз целое число, за которым следует знак процента. Индекс сходства в 100% зарезервирован для двух абсолютно одинаковых файлов, а 100% различий означает, что ни одна строка из старого файла не вошла в новый.
+
Строка индекса включает имена бинарных объектов до и после изменения. Строка _<режима>_ добавляется, если режим файла не был изменён; в противном случае старый и новый режимы приводятся в отдельных строках.

3.  Путей с «необычными» символами берутся в кавычки, как это описано для переменной конфигурации `core.quotePath` (см. linkgit:git-config[1]).

4.  Все файлы `файл1` в выводе относятся к файлам до коммита, а все файлы `файл2` — к файлам после коммита. Неправильно было бы применять каждое изменение к каждому файлу последовательно. Например, следующий патч поменяет местами `a` и `b`:

      diff --git a/a b/b
      rename from a
      rename to b
      diff --git a/b b/a
      rename from b
      rename to a

5.  Заголовки отдельных блоков изменений упоминают имя функции, к которой применяется этот блок. См. подробности, о том, как это можно адаптировать для конкретного языка программирования в разделе «Определение пользовательского заголовка блока» в linkgit:gitattributes[5].


Комбинированный формат списка изменений
---------------------------------------

Любая команда, выводящая список изменений, принимает параметры `-c` или `--cc`, которые приводят к созданию списка изменений для слияний в «комбинированном» формате («combined diff»). Это формат по умолчанию при выводе слияний с помощью linkgit:git-diff[1] или linkgit:git-show[1]. Также обратите внимание, что для того, чтобы заставить эти команды выводить списки изменений в каком-либо другом формате, можно использовать параметр `--diff-merges` с соответствующими аргументами.

Комбинированный формат списков изменений выглядит следующим образом:

------------
diff --combined describe.c
index fabadb8,cc95eb0..4866510
--- a/describe.c
+++ b/describe.c
@@@ -98,20 -98,12 +98,20 @@@
	return (a_date > b_date) ? -1 : (a_date == b_date) ? 0 : 1;
  }

- static void describe(char *arg)
 -static void describe(struct commit *cmit, int last_one)
++static void describe(char *arg, int last_one)
  {
 +	unsigned char sha1[20];
 +	struct commit *cmit;
	struct commit_list *list;
	static int initialized = 0;
	struct commit_name *n;

 +	if (get_sha1(arg, sha1) < 0)
 +		usage(describe_usage);
 +	cmit = lookup_commit_reference(sha1);
 +	if (!cmit)
 +		usage(describe_usage);
 +
	if (!initialized) {
		initialized = 1;
		for_each_ref(get_name);
------------

1.   В начале идёт заголовок «git diff», который выглядит следующим образом (при использовании параметра `-c`):

       diff --combined файл
+
или следующим (при использовании параметра `--cc`):

       diff --cc файл

2.   Далее следуют одна или несколько строк расширенного заголовка (в данном примере показано слияние с двумя родителями):
+
[synopsis]
index <хэш>,<хэш>..<хэш>
mode <режим>,<режим>`..`<режим>
new file mode <режим>
deleted file mode <режим>,<режим>
+
Строка `mode <режим>,<режим>..<режим>` присутствует только если хотя бы один из <режимов> отличается от остальных. Расширенные заголовки с информацией о найденных перемещениях содержимого (обнаруженных переименованиях и копированиях) предназначены для работы только со списком изменений строго двух _<указателей-дерева>_ и не используются в комбинированном формате.

3.   Далее следуют две строки заголовка, с указанием исходного и целевого файлов (из-файла/в-файл):

       --- a/файл
       +++ b/файл
+
Аналогично тому как это делается и в традиционном формате объединённого («unified») списка изменений, `/dev/null` используется для обозначения созданных или удалённых файлов.
+
Однако, если задан параметр `--combined-all-paths`, то вместо этих двух строк заголовка с из-файла/в-файл, вы получите расширенный заголовок из N+1 строки, где N — это количество родителей в коммите слияния:

       --- a/файл
       --- a/файл
       --- a/файл
       +++ b/файл
+
Этот расширенный формат может быть полезен, если у вас включено обнаружение переименований и копирований, так как это позволяет увидеть, как назывался файл в разных родителях до слияния.

4.   Формат заголовка блока списка изменений был специально модифицирован, чтобы предотвратить случайное применение его с помощью `patch -p1`. Комбинированный формат списков изменений был создан для рецензирования изменений в коммитах слияния и не предназначен для прямого применения в виде патчей. Эти модификации аналогичны тем, что были сделаны в расширенном заголовке `index`:

       @@@ <исходный-диапазон> <исходный-диапазон> <результирующий-диапазон> @@@
+
В заголовке блока для комбинированного формата (количество родителей + 1) символов `@`.

Unlike the traditional 'unified' diff format, which shows two files A and B with a single column that has `-` (minus -- appears in A but removed in B), `+` (plus -- missing in A but added to B), or `" "` (space -- unchanged) prefix, this format compares two or more files file1, file2,... with one file X, and shows how X differs from each of fileN. One column for each of fileN is prepended to the output line to note how X's line is different from it.

A `-` character in the column N means that the line appears in fileN but it does not appear in the result. A `+` character in the column N means that the line appears in the result, and fileN does not have that line (in other words, the line was added, from the point of view of that parent).

In the above example output, the function signature was changed from both files (hence two `-` removals from both file1 and file2, plus `++` to mean one line that was added does not appear in either file1 or file2). Also, eight other lines are the same from file1 but do not appear in file2 (hence prefixed with `+`).

When shown by `git diff-tree -c`, it compares the parents of a merge commit with the merge result (i.e. file1..fileN are the parents). When shown by `git diff-files -c`, it compares the two unresolved merge parents with the working tree file (i.e. file1 is stage 2 aka "our version", file2 is stage 3 aka "their version").
