URLs de GIT[[URLS]]
-------------------

En general, URLs contienen información del protocolo de transporte, la dirección del servidor remoto, y la ruta al repositorio. Dependiendo del protocolo de transporte, alguna de esta información puede estar ausente.

Git soporta los protocolos ssh, git, http y https (además, se puede usar ftp y ftps para fetch, pero es ineficiente y obsoleto; no los use).

El transporte nativo (ej. git:// URL) no hace autenticación y debería ser usado con precaución en redes inseguras.

Se pueden usar las siguientes sintaxis con ellas:

- ssh://{startsb}usuario@{endsb}servidor.xz{startsb}:puerto{endsb}/ruta/al/repo.git/
- git://servidor.xz{startsb}:puerto{endsb}/ruta/al/repo.git/
- http{startsb}s{endsb}://servidor.xz{startsb}:puerto{endsb}/ruta/al/repo.git/
- ftp{startsb}s{endsb}://servidor.xz{startsb}:puerto{endsb}/ruta/al/repo.git/

Se puede usar una sintáxis alternativa similar a scp con el protocolo ssh:

- {startsb}usuario@{endsb}host.xz:ruta/a/repositorio.git/

Esta sintaxis sólo se reconoce si no hay diagonales antes del primer dos puntos. Esto ayuda a diferenciar una ruta local que contiene dos puntos. Por ejemplo la ruta local `foo:bar` puede ser especificada como una ruta absoluta o `./foo:bar` para evitar ser malinterpretada como una url ssh.

Los protocolos ssh y git soportan adicionalmente expansión de ~nombre-de-usuario:

- ssh://{startsb}usuario@{endsb}host.xz{startsb}:puerto{endsb}/~{startsb}usuario{endsb}/ruta/al/repo.git/
- git://host.xz{startsb}:puerto{endsb}/~{startsb}usuario{endsb}/ruta/a/repositorio.git/
- {startsb}usuario@{endsb}host.xz:/~{startsb}usuario{endsb}/ruta/al/repo.git/

Para repositorios locales, Git también soporta nativamente las sintaxis siguientes:

- /ruta/a/repositorio.git/
- \file:///ruta/a/repositorio.git/

ifndef::git-clone[]
Estas dos sintaxis son casi equivalentes, excepto en clonaciones, cuando la anterior implica la opción --local. Ver linkgit:git-clone[1] para detalles.
endif::git-clone[]

ifdef::git-clone[]
Estas dos sintaxis son casi equivalentes, excepto que la anterior implica la opción --local.
endif::git-clone[]

'git clone', 'git fetch' y 'git pull', pero no 'git push', también aceptarán un fichero bundle adecuado. Ver linkgit:git-bundle[1].

Cuando Git no sepa como manejar cierto protocolo de transporte, intentará usar el auxiliar remoto 'remote-<transporte>', si existe alguno. Para solicitar explícitamente un auxiliar remoto, se puede usar la sintaxis siguiente:

- <transporte>::<dirección>

donde <dirección> puede ser una ruta de acceso, un servidor y una ruta combinados, o bien una cadena semejante a un URL reconocible por el auxiliar remoto concreto que se invoque. Consulte linkgit:gitremote-helpers[7] para obtener detalles.

Si hay un número grande de repositorios con nombres similares y quieres usar un formato diferente para ellos (de manera que las URLs que uses se reescriban a las URLs que funcionan), puedes crear una sección de configuración de la forma:

------------
	[url "<url-base-actual>"]
		insteadOf = <otra-url-base>
------------

Por ejemplo, con esto:

------------
	[url "git://git.host.xz/"]
		insteadOf = host.xz:/ruta/a/
		insteadOf = trabajo:
------------

una URL como "trabajo:repo.git" o como "host.xz:/ruta/a/repo.git" serán re-escritas en cualquier contexto que tome una URL que sea "git://git.host.xz/repo.git".

Si quieres reescribir URLs sólo para push, puedes crear una sección de configuración de la forma:

------------
	[url "<url-base-actual>"]
		pushInsteadOf = <otra-url-base>
------------

Por ejemplo, con esto:

------------
	[url "ssh://ejemplo.org/"]
		pushInsteadOf = git://ejemplo.org/
------------

un URL como «git://ejemplo.org/ruta/al/repositorio.git» se convertirá en «ssh://ejemplo.org/ruta/al/repositorio.git» para los envíos, pero las incorporaciones segurán utilizando el URL original.
