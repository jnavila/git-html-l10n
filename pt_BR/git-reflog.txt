git-reflog(1)
=============

NOME
----
git-reflog - Gerencie informações do reflog


RESUMO
------
[verse]
'git reflog' [show] [<opções-do-log>] [<ref>]
'git reflog expire' [--expire=<tempo>] [--expire-unreachable=<tempo>]
	[--rewrite] [--updateref] [--stale-fix]
	[--dry-run | -n] [--verbose] [--all [--single-worktree] | <refs>...]
'git reflog delete' [--rewrite] [--updateref]
	[--dry-run | -n] [--verbose] <ref>@{<especificador>}...
'git reflog exists' <ref>

DESCRIÇÃO
---------
Este comando gerencia as informações registradas nos "reflogs".

Os registros log de referência ou "reflogs", registram quando o cume dos ramos, assim como, quais as outras referências que foram atualizadas no repositório local. Os "reflogs" são úteis para especificar o valor antigo de uma referência em vários comandos Git. Por exemplo, `HEAD@{2}` quer dizer "para onde HEAD costumava estar há dois movimentos atrás", `master@{one.week.ago}` quer dizer "para onde o "master" costumava apontar uma semana atrás neste repositório local" e assim por diante. Para mais detalhes consulte linkgit:gitrevisions[7].

O comando assume vários subcomandos das diferentes opções dependendo do subcomando:

The "show" subcommand (which is also the default, in the absence of any subcommands) shows the log of the reference provided in the command-line (or `HEAD`, by default). The reflog covers all recent actions, and in addition the `HEAD` reflog records branch switching. `git reflog show` is an alias for `git log -g --abbrev-commit --pretty=oneline`; see linkgit:git-log[1] for more information.

The "expire" subcommand prunes older reflog entries. Entries older than `expire` time, or entries older than `expire-unreachable` time and not reachable from the current tip, are removed from the reflog. This is typically not used directly by end users -- instead, see linkgit:git-gc[1].

O subcomando "delete" exclui as entradas únicas do reflog. O seu argumento deve ser uma entrada _exata_ (por exemplo, "`git reflog delete master@{2}`"). Este subcomando também não é utilizado diretamente pelos usuários finais.

The "exists" subcommand checks whether a ref has a reflog. It exits with zero status if the reflog exists, and non-zero status if it does not.

OPÇÕES
------

Opções para `show`
~~~~~~~~~~~~~~~~~~

O `git reflog show` aceita qualquer uma das opções aceitas pelo comando `git log`.


Opções para `expire`
~~~~~~~~~~~~~~~~~~~~

--all::
	Processe os reflogs de todas as referências.

--single-worktree::
	É predefinido que quando `--all` seja utilizado, os reflogs de todas as árvores de trabalho sejam processadas. Esta opção limita o processamento da reflogs apenas na árvore de trabalho atual.

--expire=<tempo>::
	Remova os lançamentos mais antigos que o tempo informado. Caso esta opção não seja definida, o tempo da expiração será obtido com a opção de configuração `gc.reflogExpire`, que por sua vez a sua predefinição retorna para 90 dias. A opção `--expire=all` remove as entradas independentemente da idade; `--expire=never` desativa a remoção dos lançamentos acessíveis (porém consulte `--expire-unreachable`).

--expire-unreachable=<tempo>::
	Remova os lançamentos mais antigos que o `<tempo>` que não sejam acessíveis através do cume atual do ramo. Caso esta opção não seja definida, o tempo da expiração será obtido com a opção de configuração `gc.reflogExpireUnreachable`, que por sua vez a sua predefinição retorna para 90 dias. A opção `--expire-unreachable=all` remove as entradas não acessíveis independentemente da sua idade; `--expire-unreachable=never` desativa a remoção prévia dos lançamentos não acessíveis (porém consulte `--expire`).

--updateref::
	Update the reference to the value of the top reflog entry (i.e. <ref>@\{0\}) if the previous top entry was pruned. (This option is ignored for symbolic references.)

--rewrite::
	Caso o antecessor de uma entrada reflog seja removido, ajuste o seu SHA-1 "antigo" para ser igual ao "novo" campo SHA-1 da entrada que agora o precede.

--stale-fix::
	Elimine qualquer entradas no reflog que apontem para "commits com problemas". Um commit com problema (broken commit) é um commit que não pode ser acessado por nenhum topo de referência e que se tenha referência, direta ou indiretamente, a um objeto commit, árvore ou bolha ausente.
+
This computation involves traversing all the reachable objects, i.e. it has the same cost as 'git prune'. It is primarily intended to fix corruption caused by garbage collecting using older versions of Git, which didn't protect objects referred to by reflogs.

-n::
--dry-run::
	Na verdade, não faça a poda de nenhuma entrada; apenas exiba o que teria sido podado.

--verbose::
	Imprima informações extras na tela.


Opções para o `delete`
~~~~~~~~~~~~~~~~~~~~~~

O `git reflog delete` aceita as opções `--updateref`, `--rewrite`, `-n`, `--dry-run`, e `--verbose`, com os mesmos significados de quando são utilizadas com `expirar`.


GIT
---
Parte do conjunto linkgit:git[1]
