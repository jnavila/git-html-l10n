
ifndef::git-format-patch[]
ifndef::git-diff[]
ifndef::git-log[]
:git-diff-core: 1
endif::git-log[]
endif::git-diff[]
endif::git-format-patch[]

ifdef::git-format-patch[]
-p::
--no-stat::
	Gere correções simples sem qualquer diffstats.
endif::git-format-patch[]

ifndef::git-format-patch[]
-p::
-u::
--patch::
	Gerar patch (consulte a seção sobre a geração de patches).
ifdef::git-diff[]
	Este é o padrão.
endif::git-diff[]

-s::
--no-patch::
	Suprimir a saída do diff. Útil para comandos como `git show` mostram que o
	patch por padrão, ou para cancelar o efeito de `--patch`.
endif::git-format-patch[]

-U<n>::
--unified=<n>::
	Generate diffs with <n> lines of context instead of the usual three. Implies
	`--patch`.
ifndef::git-format-patch[]
	Implica `-p`.
endif::git-format-patch[]

--saída=<arquivo>::
	Output to a specific file instead of stdout.

--output-indicator-new=<char>::
--output-indicator-old=<char>::
--output-indicator-context=<char>::
	Specify the character used to indicate new, old or context lines in the
	generated patch. Normally they are '+', '-' and ' ' respectively.

ifndef::git-format-patch[]
--raw::
ifndef::git-log[]
	Gere o diff no formato raw.
ifdef::git-diff-core[]
	Este é o padrão.
endif::git-diff-core[]
endif::git-log[]
ifdef::git-log[]
	Parca cada commit, mostre um resumo das mudanças usando o formato diff 
	bruto. Veja seção "FORMATO DE SAÍDA BRUTO" do 
	linkgit:git-diff[1]. Isso é diferente de mostrar o log em formato
	bruto, que você pode conseguir com
	`--format=raw`.
endif::git-log[]
endif::git-format-patch[]

ifndef::git-format-patch[]
--patch-with-raw::
	Sinônimo para `-p --raw`.
endif::git-format-patch[]

--indent-heuristic::
	Habilite a heurística que desloca os limites do hunk do diff para facilitar
	a leitura dos patches. Este é o padrão.

--no-indent-heuristic::
	Desative a heurística de recuo.

--minimal::
	Gaste tempo extra para garantir que o menor diferencial possível seja
	produzido.

--patience::
	Gere um diff usando o algoritmo "diff de paciência".

--histogram::
	Gere um diff usando o algoritmo "histograma diff".

--anchored = <texto>::
	Gere um diff usando o algoritmo "diff ancorado".
+
Esta opção pode ser especificada mais de uma vez.
+
Se existir uma linha na origem e no destino, existir apenas uma vez e
começar com este texto, esse algoritmo tentará impedir que ele apareça como
uma exclusão ou adição na saída. Ele usa o algoritmo " diff de paciência"
internamente.

--diff-algoritmo={paciência|mínima|histograma|myers}::
	Escolha um algoritmo de diff. As variantes são as seguintes:
+
--
`default`, `myers`;;
	O algoritmo de diferenciação guloso básico. Atualmente, esse é o padrão.
`minimal`;;
	Gaste tempo extra para garantir que o menor diferencial possível seja
	produzido.
`patience`;;
	Use o algoritmo "diff de paciência" ao gerar patches.
`histogram`;;
	Este algoritmo estende o algoritmo de paciência para "suportar elementos
	comuns de baixa ocorrência".
--
+
Por exemplo, se você configurou a variável `diff.algorithm` para um valor
não-padrão e quer usar a variável default, então você tem que usar a opção`
--diff-algorithm=default`.

--stat[=<width>[,<name-width>[,<count>]]]::
	Gere um diffstat. Por padrão, o espaço necessário será usado para a parte do
	nome do arquivo e o restante para a parte do gráfico. A largura máxima é
	padronizada para a largura do terminal, ou 80 colunas, se não estiver
	conectada a um terminal, e pode ser substituída por `<width>`. A largura da
	parte do nome do arquivo pode ser limitada dando outra largura
	`<name-width>` após uma vírgula. A largura da parte do gráfico pode ser
	limitada usando `--stat-graph-width=<width>` (afeta todos os comandos que
	geram um stat graph) ou configurando `diff.statGraphWidth=<width>` (não
	afeta git format-patch`). Dando um terceiro parâmetro `<count>`, você pode
	limitar a saída para as primeiras linhas `<count>` seguidas por `...` se
	houver mais.
+
Estes parâmetros também podem ser ajustados individualmente com
`--stat-width=<width>`, `--stat-name-width=<name-width>` e
`--stat-count=<count>`.

--compact-summary::
	Saída de um resumo condensado de informações de cabeçalho estendido, como
	criações ou exclusões de arquivos ("novo" ou "desaparecido", opcionalmente
	"+|" se for um symlink) e alterações de modo ("+x" ou "-x" para adicionar ou
	remover bit executável, respectivamente) em diffstat. A informação é
	colocada entre a parte do nome do arquivo e a parte do gráfico. Implica
	`--stat`.

--numstat::
	Semelhante ao `--stat`, mas mostra o número de linhas adicionadas e
	excluídas em notação decimal e nome do caminho sem abreviação, para torná-lo
	mais amigável para a máquina. Para arquivos binários, gera dois `-` ao invés
	de dizer` 0 0`.

--shortstat::
	Saída apenas a última linha do formato `--stat` contendo o número total de
	arquivos modificados, assim como o número de linhas adicionadas e deletadas.

-X[<param1,param2,...>]::
--dirstat[=<param1,param2,...>]::
	Saída da distribuição da quantidade relativa de alterações para cada
	subdiretório. O comportamento de `--dirstat` pode ser customizado
	passando-se uma lista de parâmetros separados por vírgulas. Os padrões são
	controlados pela variável de configuração `diff.dirstat` (veja
	linkgit:git-config[1]). Os seguintes parâmetros estão disponíveis:
+
--
`changes`;;
	Calcule os números de dirstat contando as linhas que foram removidas da
	fonte ou adicionadas ao destino. Isso ignora a quantidade de movimentos de
	código puro em um arquivo. Em outras palavras, reorganizar linhas em um
	arquivo não é contado tanto quanto outras alterações. Esse é o comportamento
	padrão quando nenhum parâmetro é fornecido.
`lines`;;
	Calcule os números de dirstat fazendo a análise de diferenças baseadas em
	linha regular e somando as contagens de linhas removidas/ adicionadas. (Para
	arquivos binários, conte blocos de 64 bytes, pois os arquivos binários não
	possuem um conceito natural de linhas). Este é um comportamento `--dirstat`
	mais caro do que o comportamento `changes`, mas conta linhas rearranjadas
	dentro de um arquivo tanto quanto outras mudanças. A saída resultante é
	consistente com o que você obtém das outras opções `--*stat`.
`files`;;
	Calcule os números de dirstat contando o número de arquivos alterados. Cada
	arquivo alterado conta igualmente na análise dirstat. Este é o comportamento
	`--dirstat` mais barato do ponto de vista computacional, já que ele não
	precisa examinar o conteúdo do arquivo.
`cumulative`;;
	Contar alterações em um diretório filho para o diretório pai também. Note
	que ao usar `cumulative`, a soma das percentagens reportadas pode exceder
	100%. O comportamento padrão (não cumulativo) pode ser especificado com o
	parâmetro `noncumulative`.
<limite>;;
	Um parâmetro inteiro especifica um percentual de corte (3% por padrão). Os
	diretórios que contribuem com menos do que essa porcentagem das alterações
	não são mostrados na saída.
--
+
Exemplo: O seguinte contará os arquivos alterados, ignorando os diretórios
com menos de 10% da quantidade total de arquivos alterados e acumulando
contagens de diretório-filho nos diretórios-pai: `--dirstat = files, 10,
cumulative`.

--cumulative::
	Synonym for --dirstat=cumulative

--dirstat-by-file[=<param1,param2>...]::
	Synonym for --dirstat=files,param1,param2...

--summary::
	Produza um resumo condensado de informações de cabeçalho estendidas, como
	criações, renomeações e alterações de modo.

ifndef::git-format-patch[]
--patch-with-stat::
	Sinônimo para `-p --stat`.
endif::git-format-patch[]

ifndef::git-format-patch[]

-z::
ifdef::git-log[]
	Separe os commits com NULs em vez de com novas newlines.
+
Além disso, quando `--raw` ou` --numstat` for fornecido, não munge nomes de
caminho e use NULs como terminadores de campos de saída.
endif::git-log[]
ifndef::git-log[]
	Quando `--raw`, `--numstat`, `--name-only` ou `--name-status` foi
	dado, não munge nomes de pathnames e usar NULs como terminadores de campo de saída.
endif::git-log[]
+
Sem esta opção, nomes de caminho com caracteres "incomuns" são citados como
explicado para a variável de configuração `core.quotePath` (veja
linkgit:git-config [1]).

--name-only::
	Mostrar apenas nomes de arquivos alterados.

--name-status::
	Mostrar apenas nomes e status de arquivos alterados. Veja a descrição da
	opção `--diff-filter` sobre o significado das letras de status.

--submodule [= <formato>]::
	Especifique como as diferenças nos submódulos são mostradas. Ao especificar
	`--submodule = short`, o formato 'short' é usado. Este formato mostra apenas
	os nomes das confirmações no início e no final do intervalo. Quando
	`--submódulo` ou` --submódulo = log` é especificado, o formato 'log' é
	usado. Este formato lista os commits no intervalo como linkgit:git-submodule
	[1] `summary` faz. Quando `--submodule = diff` é especificado, o formato
	'diff' é usado. Este formato mostra um diff inline das alterações no
	conteúdo do submódulo entre o intervalo de confirmação. O padrão é
	`diff.submodule` ou o formato 'short' se a opção de configuração não estiver
	definida.

--color [= <quando>]::
	Mostrar colorido diff.  `--color` (isto é, sem '=<when>') é o mesmo que
	`--color=always`.  '<when>' pode ser um de `always`, `never`, ou `auto`.
ifdef::git-diff[]
	Pode ser alterado pelo `color.ui` e `color.diff`
	definições de configuração
endif::git-diff[]

--no-color::
	Desativar diff colorido.
ifdef::git-diff[]
	Isso pode ser usado para substituir as configurações.
endif::git-diff[]
	É o mesmo que  `--color=never`.

--color-movido[=<mode>]::
	Linhas de código movidas são coloridas de maneira diferente.
ifdef::git-diff[]
	Ele pode ser alterado pela configuração de configuração `diff.colorMoved`.
endif::git-diff[]
	O <mode> é padronizado para 'não' se a opção não for dada
	e para 'zebra' se a opção sem modo for dada.
	O modo dever ser um dos seguintes:
+
--
no::
	As linhas movidas não são destacadas.
default::
	É um sinônimo para `zebra`. Isso pode mudar para um modo mais sensato no
	futuro.
plain::
	Qualquer linha adicionada em um local e removida em outro local será
	colorida com 'color.diff.newMoved'. Da mesma forma, 'color.diff.oldMoved'
	será usado para linhas removidas que são adicionadas em algum outro lugar no
	diff. Este modo seleciona qualquer linha movida, mas não é muito útil em uma
	revisão determinar se um bloco de código foi movido sem permutação.
blocks::
	Blocos de texto movido de pelo menos 20 caracteres alfanuméricos são
	detectados com avidez. Os blocos detectados são pintados usando a cor
	'color.diff.{old, new}Moved'. Blocos adjacentes não podem ser separados.
zebra::
	Blocos de texto movido são detectados como no modo 'blocos'. Os blocos são
	pintados usando 'color.diff.{old,new}Moved' color ou
	'color.diff.{old,new}MovedAlternative'. A mudança entre as duas cores indica
	que um novo bloco foi detectado.
dimmed-zebra::
	Semelhante a 'zebra', mas o escurecimento adicional de partes
	desinteressantes do código movido é executado. As linhas limítrofes de dois
	blocos adjacentes são consideradas interessantes, o resto é
	desinteressante. `dimmed_zebra` é um sinônimo obsoleto.
--

--no-color-moved::
	Desativar a detecção de movimento Isso pode ser usado para substituir as
	configurações. É o mesmo que `--color-moved = no`.

--color-movido-ws=<modes>::
	Isso configura como o espaço em branco é ignorado ao executar a detecção de
	movimento para `--color-moved`.
ifdef::git-diff[]
	Pode ser definido pela configuração do `diff.colorMovedWS`.
endif::git-diff[]
	Esses modos podem ser dados como uma lista separada por vírgula:
+
--
no::
	Não ignore espaços em branco ao realizar a detecção de movimento.
ignore-space-at-eol::
	Ignore as alterações no espaço em branco na EOL.
ignore-space-change::
	Ignore as alterações na quantidade de espaço em branco. Isso ignora o espaço
	em branco no final da linha e considera todas as outras sequências de um ou
	mais caracteres em branco como equivalentes.
ignore-all-space::
	Ignore os espaços em branco ao comparar linhas. Isso ignora as diferenças,
	mesmo que uma linha tenha espaço em branco onde a outra linha não tenha
	nenhuma.
allow-indentation-change::
	Inicialmente, ignore qualquer espaço em branco na detecção de movimento e
	agrupe os blocos de código movidos apenas em um bloco se a alteração no
	espaço em branco for a mesma por linha. Isso é incompatível com os outros
	modos.
--

--no-color-moved-ws::
	Não ignore espaços em branco ao realizar a detecção de movimento. Isso pode
	ser usado para substituir as configurações. É o mesmo que `--color-moved-ws
	= no`.

--palavra-diff[=<mode>]::
	Mostre uma palavra diff, usando o <mode> para delimitar as palavras
	alteradas. Por padrão, as palavras são delimitadas por espaço em branco;
	veja `--word-diff-regex` abaixo. O <mode> é padronizado como 'simples' e
	deve ser um dos seguintes:
+
--
color::
	Realce palavras alteradas usando apenas cores. Implica `--color`.
plain::
	Mostrar palavras como `[-removed-]` e `{+ added +}`. Não faz nenhuma
	tentativa de escapar dos delimitadores se eles aparecerem na entrada,
	portanto a saída pode ser ambígua.
porcelain::
	Use um formato baseado em linha especial destinado ao consumo de scripts. As
	corridas adicionadas / removidas / inalteradas são impressas no formato
	usual de diff unificado, começando com um caractere `+` / `-` /` `no início
	da linha e se estendendo até o final da linha. Novas linhas na entrada são
	representadas por um til `~` em uma linha própria.
none::
	Desative a palavra diff novamente.
--
+
Observe que, apesar do nome do primeiro modo, a cor é usada para realçar as
partes alteradas em todos os modos, se ativada.

--palavra-diff-regex=<regex>::
	Use <regex> para decidir o que é uma palavra, em vez de considerar as
	execuções de espaços não brancos como uma palavra. Também implica
	`--word-diff` a menos que já esteja habilitado.
+
Cada correspondência não sobreposta do <regex> é considerada uma
palavra. Qualquer coisa entre essas correspondências é considerada espaço em
branco e ignorada (!) Para fins de encontrar diferenças. Você pode querer
acrescentar `| [^ [: space:]]` à sua expressão regular para certificar-se de
que ela corresponda a todos os caracteres que não sejam espaços em
branco. Uma correspondência que contém uma nova linha é silenciosamente
truncada (!) Na nova linha.
+
Por exemplo, `--word-diff-regex = .` tratará cada caractere como uma palavra
e, correspondentemente, mostrará as diferenças caractere a caractere.
+
O regex também pode ser configurado através de um driver diff ou opção de
configuração, veja linkgit:gitattributes [5] ou linkgit:git-config [1]. Dar
explicitamente substitui qualquer driver do diff ou configuração. Os drivers
de diferenças substituem as configurações.

--cor-palavras[=<regex>]::
	Equivalente a `--word-diff = color` plus (se um regex foi especificado)`
	--word-diff-regex = <regex> `.
endif::git-format-patch[]

--no-renames::
	Desative a detecção de renomeação, mesmo quando o arquivo de configuração
	fornecer o padrão para isso.

--[no-]rename-empty::
	Whether to use empty blobs as rename source.

ifndef::git-format-patch[]
--check::
	Avisar se as alterações introduzem marcadores de conflito ou erros de espaço
	em branco. O que é considerado erro de espaço em branco é controlado pela
	configuração `core.whitespace`. Por padrão, os espaços em branco à direita
	(incluindo linhas que consistem somente em espaços em branco) e um caractere
	de espaço que é imediatamente seguido por um caractere de tabulação dentro
	do recuo inicial da linha são considerados erros de espaço em branco. Sai
	com status diferente de zero se forem encontrados problemas. Não é
	compatível com o código de saída.

--ws-erro-highlight=<kind>::
	Destacar os erros de espaço em branco nas linhas `context`,` old` ou `new`
	do diff. Vários valores são separados por vírgula, `none` redefine os
	valores anteriores,` default` redefine a lista para `new` e` all` é uma
	abreviação para `old, new, context`. Quando esta opção não é dada, e a
	variável de configuração `diff.wsErrorHighlight` não está definida, apenas
	os erros de espaço em branco nas linhas` new` são destacados. Os erros de
	espaço em branco são coloridos com `color.diff.whitespace`.

endif::git-format-patch[]

--full-index::
	Em vez do primeiro punhado de caracteres, mostre os nomes completos dos
	objetos blob de pré e pós-imagem na linha "index" ao gerar a saída do
	formato patch.

--binary::
	In addition to `--full-index`, output a binary diff that can be applied with
	`git-apply`. Implies `--patch`.

--abrev[=<n>]::
	Em vez de mostrar o nome completo do objeto hexadecimal de 40 bytes em
	linhas de cabeçalho de saída de formato diff-raw e de árvore de diferenças,
	mostre apenas um prefixo parcial. Isto é independente da opção
	`--full-index` acima, que controla o formato de saída do patch diff. Número
	não padrão de dígitos pode ser especificado com `--abbrev=<n>`.

-B[<n>][/<m>]::
--pausa-rewrites[=[<n>][/<m>]]::
	Pausa completa reescreve as alterações em pares de excluir e criar. Isso
	serve a dois propósitos:
+
It affects the way a change that amounts to a total rewrite of a file not as
a series of deletion and insertion mixed together with a very few lines that
happen to match textually as the context, but as a single deletion of
everything old followed by a single insertion of everything new, and the
number `m` controls this aspect of the -B option (defaults to 60%). `-B/70%`
specifies that less than 30% of the original should remain in the result for
Git to consider it a total rewrite (i.e. otherwise the resulting patch will
be a series of deletion and insertion mixed together with context lines).
+
Quando usado com -M, um arquivo totalmente reescrito também é considerado
como a fonte de uma renomeação (geralmente -M considera apenas um arquivo
que desapareceu como a origem de uma renomeação), e o número `n` controla
esse aspecto do arquivo. Opção B (o padrão é 50%). `-B20%` especifica que
uma alteração com inclusão e exclusão em comparação com 20% ou mais do
tamanho do arquivo é elegível para ser escolhida como uma possível fonte de
renomeação para outro arquivo.

-M[<n>]::
--encontrar-renomeações[=<n>]::
ifndef::git-log[]
	Detectar renomeações.
endif::git-log[]
ifdef::git-log[]
	Se estiver gerando diffs, detectar e relatar renomeações para commit.
	Para os seguintes arquivos em renomeações ao percorrer o histórico, consulte
	`--follow`.
endif::git-log[]
	Se `n` é especificado, é um limiar na semelhança
	índice (isto é, quantidade de adição/exclusões comparada com o
	tamanho do arquivo). Por exemplo, `-M90%` significa que o Git deve
	considerar um par delete/add para ser renomeado se mais de 90%
	do arquivo não mudou. Sem um sinal `%`, o número deve ser lido
	como uma fração, com um ponto decimal antes dele. Ou seja, `-M5`
	torna-se 0.5, e é portanto, o mesmo que `-M50%`. Da mesma forma,
	-M05` é o mesmo que `-M5%`. Para limitar a detecção a 
	renomeações exatas, use `-M100%`. O índice de similaridade padrão
	é de 50%.

-C[<n>]::
--encontrar-cópias[=<n>]::
	Detectar cópias e renomear. Veja também `--find-copies-harder`. Se `n` é
	especificado, tem o mesmo significado que para` -M<n> `.

--find-copies-harder::
	Por motivos de desempenho, por padrão, a opção `-C` localiza cópias somente
	se o arquivo original da cópia foi modificado no mesmo changeset. Esse
	sinalizador faz o comando inspecionar arquivos não modificados como
	candidatos para a origem da cópia. Esta é uma operação muito cara para
	grandes projetos, portanto, use-a com cautela. Dar mais de uma opção `-C`
	tem o mesmo efeito.

-D::
--irreversible-delete::
	Omita a pré-imagem para exclusões, ou seja, imprima apenas o cabeçalho, mas
	não a diferença entre a pré-imagem e `/dev/null`. O patch resultante não
	deve ser aplicado com `patch` ou` git apply`; isso é apenas para pessoas que
	querem se concentrar apenas em revisar o texto após a mudança. Além disso, a
	saída obviamente não possui informações suficientes para aplicar tal patch
	em ordem inversa, mesmo manualmente, daí o nome da opção.
+
Quando usado junto com `-B`, omita também a pré-imagem na parte de exclusão
de um par delete/create.

-l<num>::
	As opções `-M` e` -C` requerem o tempo de processamento O (n^2), onde n é o
	número de potenciais alvos de renomeação/cópia. Essa opção impede que a
	detecção de renomeação/cópia seja executada se o número de destinos de
	renomeação/cópia exceder o número especificado.

ifndef::git-format-patch[]
--diff-filtro=[(A|C|D|M|R|T|U|X|B)...[*]]::
	Selecione apenas os arquivos que são adicionados (`A`), copiados (` C`),
	excluídos (`D`), modificados (` M`), renomeados (`R`), que têm seu tipo (ou
	seja, arquivo regular, symlink, submódulo, ...) alterado (`T`), são Unmerged
	(` U`), são desconhecidos (`X`), ou tiveram seu pareamento Broken (`
	B`). Qualquer combinação dos caracteres do filtro (incluindo nenhum) pode
	ser usada. Quando `*` (All-or-none) é adicionado à combinação, todos os
	caminhos são selecionados se houver algum arquivo que corresponda a outros
	critérios na comparação; se não houver nenhum arquivo que corresponda a
	outros critérios, nada será selecionado.
+
Além disso, essas letras maiúsculas podem ser reduzidas para exclusão. Por
exemplo. `--diff-filter=ad` exclui os caminhos adicionados e excluídos.
+
Note que nem todos os diffs podem apresentar todos os tipos. Por exemplo, os
diffs do índice para a árvore de trabalho nunca podem ter entradas
adicionadas (porque o conjunto de caminhos incluídos no diff é limitado pelo
que está no índice). Da mesma forma, as entradas copiadas e renomeadas não
podem aparecer se a detecção para esses tipos estiver desativada.

-S<string>::
	Procure por diferenças que alterem o número de ocorrências da cadeia
	especificada (ou seja, adição / exclusão) em um arquivo. Destinado ao uso do
	roteirista.
+
É útil quando você está procurando por um bloco de código exato (como uma
struct), e quer saber a história desse bloco desde que ele surgiu: use o
recurso de forma iterativa para alimentar o bloco interessante na pré-imagem
de volta `-S`, e continue até você obter a primeira versão do bloco.
+
Arquivos binários também são pesquisados.

-G<regex>::
	Procure por diferenças cujo texto de patch contenha linhas
	adicionadas/removidas que correspondam a <regex>.
+
Para ilustrar a diferença entre `-S <regex> --pickaxe-regex` e` -G <regex>
`, considere um commit com o seguinte diff no mesmo arquivo:
+
----
+… return !regexec(regexp, two->ptr, 1, &regmatch, 0);
...
-...hit = !regexec(regexp, mf2.ptr, 1, &regmatch, 0);
----
+
Enquanto o `git log -G" regexec\(regexp"` mostrará este commit, `git log -S"
regexec\(regexp"--pickaxe-regex` não será (porque o número de ocorrências
dessa string não foi alterado) .
+
A menos que `--text` seja fornecido, patches de arquivos binários sem um
filtro textconv serão ignorados.
+
Veja a entrada 'pickaxe' em linkgit:gitdiffcore[7] para mais informações.

--encontrar-objeto=<object-id>::
	Procure por diferenças que alterem o número de ocorrências do objeto
	especificado. Semelhante ao `-S`, apenas o argumento é diferente porque ele
	não procura por uma string específica, mas por um id de objeto específico.
+
O objeto pode ser um blob ou um submódulo commit. Isso implica que a opção
`-t` em` git-log` também encontre árvores.

--pickaxe-all::
	Quando `-S` ou` -G` encontra uma mudança, mostra todas as mudanças naquele
	changeset, não apenas os arquivos que contêm a mudança em <string>.

--pickaxe-regex::
	Trate o <string> dado ao `-S` como uma expressão regular POSIX estendida
	para combinar.

endif::git-format-patch[]

-O<orderfile>::
	Controlar a ordem em que os arquivos aparecem na saída. Isto sobrescreve a
	variável de configuração `diff.orderFile` (veja linkgit:git-config[1]). Para
	cancelar `diff.orderFile`, use` -O/dev/null`.
+
A ordem de saída é determinada pela ordem dos padrões glob no
<orderfile>. Todos os arquivos com nomes de caminho que correspondam ao
primeiro padrão são exibidos primeiro, todos os arquivos com nomes de
caminho que correspondam ao segundo padrão (mas não o primeiro) são exibidos
em seguida e assim por diante. Todos os arquivos com nomes de caminhos que
não correspondem a nenhum padrão são reproduzidos por último, como se
houvesse um padrão implícito de correspondência de todos no final do
arquivo. Se vários nomes de caminho tiverem a mesma classificação (eles
correspondem ao mesmo padrão, mas não a padrões anteriores), sua ordem de
saída relativa à outra é a ordem normal.
+
<orderfile> é analisado da seguinte forma:
+
--
 - Linhas em branco são ignoradas, para que possam ser usadas como separadores
   para facilitar a leitura.

 - Linhas iniciando com um hash ("`#`") são ignoradas, então elas podem ser
   usadas para comentários. Adicione uma barra invertida ("`\`") ao começo do
   padrão se ele começar com um hash.

 - Cada outra linha contém um único padrão.
--
+
Os padrões têm a mesma sintaxe e semântica que os padrões usados para
fnmatch(3) sem o sinalizador FNM_PATHNAME, exceto que um nome de caminho
também corresponde a um padrão se a remoção de qualquer número dos
componentes finais do nome do caminho corresponder ao padrão. Por exemplo, o
padrão "`foo*bar` "corresponde a" `fooasdfbar`" e "` foo/bar/baz/asdf` "mas
não" `foobarx`".

ifndef::git-format-patch[]
-R::
	Troque duas entradas; isto é, mostre as diferenças do índice ou do arquivo
	no disco para o conteúdo da árvore.

--relativo[=<path>]::
	Quando executado a partir de um subdiretório do projeto, ele pode ser
	instruído a excluir as mudanças fora do diretório e mostrar nomes de
	caminhos relativos a ele com essa opção. Quando você não está em um
	subdiretório (por exemplo, em um repositório vazio), é possível nomear o
	subdiretório para tornar a saída relativa, fornecendo um <path> como um
	argumento.
endif::git-format-patch[]

-a::
--text::
	Trate todos os arquivos como texto.

--ignore-cr-at-eol::
	Ignore o retorno do carro no final da linha ao fazer uma comparação.

--ignore-space-at-eol::
	Ignore as alterações no espaço em branco na EOL.

-b::
--ignore-space-change::
	Ignore as alterações na quantidade de espaço em branco. Isso ignora o espaço
	em branco no final da linha e considera todas as outras sequências de um ou
	mais caracteres em branco como equivalentes.

-w::
--ignore-all-space::
	Ignore os espaços em branco ao comparar linhas. Isso ignora as diferenças,
	mesmo que uma linha tenha espaço em branco onde a outra linha não tenha
	nenhuma.

--ignore-blank-lines::
	Ignore as alterações cujas linhas estão todas em branco.

--inter-pedaço-contexto=<lines>::
	Mostra o contexto entre os pedaços de diff, até o número especificado de
	linhas, assim fundindo partes próximas umas das outras. O padrão é
	`diff.interHunkContext` ou 0 se a opção de configuração não estiver
	definida.

-W::
--function-context::
	Mostrar funções vizinhas inteiras de mudanças.

ifndef::git-format-patch[]
ifndef::git-log[]
--exit-code::
	Faça o programa sair com códigos semelhantes ao diff(1). Ou seja, sai com 1
	se houver diferenças e 0 significa sem diferenças.

--quiet::
	Desativar todas as saídas do programa. Implica `--exit-code`.
endif::git-log[]
endif::git-format-patch[]

--ext-diff::
	Permitir que um auxiliar de diferenças externo seja executado. Se você
	definir um driver externo com diff linkgit:gitattributes[5], você precisa
	usar esta opção com linkgit:git-log[1] e amigos.

--no-ext-diff::
	Não permitir drivers externos de diferenças.

--textconv::
--no-textconv::
	Permitir (ou proibir) filtros de conversão de texto externos para serem
	executados ao comparar arquivos binários. Veja linkgit:gitattributes[5] para
	detalhes. Como os filtros textconv são tipicamente uma conversão
	unidirecional, o diff resultante é adequado para consumo humano, mas não
	pode ser aplicado. Por essa razão, os filtros textconv são habilitados por
	padrão apenas para linkgit:git-diff[1] e linkgit:git-log[1], mas não para os
	comandos linkgit:git-format-patch 1] ou diff plumbing.

--ignorar-submodulos[=<when>]::
	Ignore as alterações nos submódulos na geração do diff. <when> pode ser
	"none", "untracked", "dirty" ou "all", que é o padrão. O uso de "none"
	considerará o submódulo modificado quando ele contiver arquivos não
	rastreados ou modificados ou seu HEAD for diferente do commit gravado no
	superprojeto e pode ser usado para sobrescrever qualquer configuração da
	opção 'ignore' no linkgit:git-config[1] ou linkgit:gitmodules[5]. Quando
	"untracked" é usado, os submódulos não são considerados sujos quando contêm
	apenas conteúdo não rastreado (mas eles ainda são verificados quanto ao
	conteúdo modificado). Usando "dirty" ignora todas as mudanças na árvore de
	trabalho de submódulos, apenas as mudanças nos commits armazenados no
	superprojeto são mostradas (este foi o comportamento até 1.7.0). Usar "all"
	oculta todas as alterações nos submódulos.

--src-prefixo=<prefix>::
	Mostrar o prefixo de origem fornecido em vez de "a/".

--dst-prefixo=<prefix>::
	Mostrar o prefixo de destino especificado em vez de "b/".

--no-prefix::
	Não mostre nenhum prefixo de origem ou destino.

--line-prefix=<prefix>::
	Prefira um prefixo adicional a cada linha de saída.

--ita-invisible-in-index::
	Por padrão, as entradas adicionadas por "git add -N" aparecem como um
	arquivo vazio existente em "git diff" e um novo arquivo em "git diff
	--cached". Esta opção faz a entrada aparecer como um novo arquivo em "git
	diff" e não existe em "git diff --cached". Esta opção pode ser revertida com
	o `--ita-visible-in-index`. Ambas as opções são experimentais e podem ser
	removidas no futuro.

Para uma explicação mais detalhada sobre estas opções comuns, veja também
linkgit:gitdiffcore[7].
