
ifndef::git-format-patch[]
ifndef::git-diff[]
ifndef::git-log[]
:git-diff-core: 1
endif::git-log[]
endif::git-diff[]
endif::git-format-patch[]

ifdef::git-format-patch[]
-p::
--no-stat::
	Gere correções simples sem qualquer diffstats.
endif::git-format-patch[]

ifndef::git-format-patch[]
-p::
-u::
--patch::
	Gere um patch (consulte a seção sobre a geração de patches).
ifdef::git-diff[]
	Esta é a predefinição.
endif::git-diff[]

-s::
--no-patch::
	Suprime a saída diff. Útil para comandos como `git show` que por
	predefinição exibem a correção ou para cancelar o efeito de `--patch`.
endif::git-format-patch[]

-U<n>::
--unified=<n>::
	Gere diffs com uma quantidade de `<n>` linhas de contexto em vez das três
	usuais. Implica no uso da opção `--patch`.
ifndef::git-format-patch[]
	Implica no uso da opção `-p`.
endif::git-format-patch[]

--output=<arquivo>::
	Escreve o arquivo para um determinado arquivo em vez de stdout.

--output-indicator-new=<caractere>::
--output-indicator-old=<caractere>::
--output-indicator-context=<caractere>::
	Informe o caractere que será utilizado para indicar as linhas novas, antigas
	ou do contexto no patch que foi gerado. Normalmente eles são '+', '-' e ' '
	respectivamente.

ifndef::git-format-patch[]
--raw::
ifndef::git-log[]
	Gere o diff no formato bruto (raw).
ifdef::git-diff-core[]
	Esta é a predefinição.
endif::git-diff-core[]
endif::git-log[]
ifdef::git-log[]
	Para cada commit, exiba um resumo das alterações utilizando o formato
	diff bruto. Consulte a seção "GERANDO O FORMATO BRUTO"
	linkgit:git-diff[1]. É diferente de exibir o próprio registro log
	em formato bruto, que pode ser obtido com
	a opção `--format=raw`.
endif::git-log[]
endif::git-format-patch[]

ifndef::git-format-patch[]
--patch-with-raw::
	É um sinônimo para `-p --raw`.
endif::git-format-patch[]

--indent-heuristic::
	Ativa a heurística que altera os limites dos pedaços diferentes para
	facilitar a leitura dos patches. Esta é a predefinição.

--no-indent-heuristic::
	Desative a heurística de recuo.

--minimal::
	Expenda um tempo extra para garantir que o menor diferencial possível seja
	produzido.

--patience::
	Gere um diff utilizando o algoritmo "patience diff" (ou diff de paciência).

--histogram::
	Gere um diff utilizando o algoritmo "histogram diff" (ou diff de
	histograma).

--anchored=<texto>::
	Gere um diff utilizando o algoritmo "anchored diff" (ou diff ancorado).
+
Esta opção pode ser especificada mais de uma vez.
+
Caso uma linha exista na origem e no destino, exista apenas uma vez e comece
com este texto, este algoritmo tenta impedir que apareça como uma exclusão
ou adição na saída. O algoritmo "patience diff" é utilizado internamente.

--diff-algorithm={patience|minimal|histogram|myers}::
	Escolha um algoritmo diff. As variantes são as seguintes:
+
--
`default`, `myers`;;
	O algoritmo diff ganancioso básico. Atualmente, este é o valor predefinido.
`minimal`;;
	Expenda um tempo extra para garantir que o menor diferencial possível seja
	produzido.
`patience`;;
	Utilize o algoritmo "patience diff" (ou diff de paciência) ao gerar os
	patches.
`histogram`;;
	Este algoritmo estende o algoritmo "patience" (paciência) para "se
	compatível com os elementos comuns com baixa ocorrência".
--
+
Caso tenha configurado uma variável `diff.algorithm` para um valor sem
predefinição e quer utilizar a variável predefinida por exemplo, então
utilize a opção `--diff-algorithm=default`.

--stat[=<largura>[,<largura-do-nome>[,<count>]]]::
	Gera um diffstat. É predefinido que o espaço necessário será utilizado para
	a parte do nome do arquivo e o restante para a parte do grafo. A largura
	máxima a predefinição retorna para a largura do terminal ou 80 colunas, caso
	não esteja conectada em um terminal e pode ser substituída por
	`<largura>`. A largura da parte do nome do arquivo pode ser limitada,
	fornecendo outra largura `<largura-do-nome>` após uma vírgula. A largura da
	parte do grafo pode ser limitada utilizando `--stat-graph-width=<largura>`
	(afeta todos os comandos que geram um grafo estatístico) ou definindo
	`diff.statGraphWidth=<largura>` (não afeta o `git format-patch`).  Ao
	fornecer um terceiro parâmetro `<count>`, é possível limitar a saída às
	primeiras linhas `<count>`, seguidas por `...` caso haja mais.
+
Estes parâmetros também podem ser ajustados individualmente com
`--stat-width=<largura>`, `--stat-name-width=<largura-do-nome>` e
`--stat-count=<count>`.

--compact-summary::
	A saída de um resumo condensado das informações do cabeçalho estendido como
	criações ou exclusões dos arquivos ("novo" ou "desaparecido", opcionalmente
	"+l" se for um link simbólico) e alterações do modo ("+x" ou "-x" para
	adicionar ou remover um bit executável, respectivamente) no diffstat. As
	informações são colocadas entre a parte do nome do arquivo e a parte do
	grafo. Implica no uso da opção `--stat`.

--numstat::
	Semelhante ao `--stat`, exibe a quantidade de linhas adicionadas, excluídas,
	em notação decimal e o nome do caminho sem abreviação, para torná-lo mais
	amigável à máquina.  Para arquivos binários, gera dois `-` em vez de `0 0`.

--shortstat::
	Produz apenas a última linha do formato `--stat` contendo a quantidade total
	dos arquivos modificados, assim como a quantidade de linhas adicionadas e
	excluídas.

-X[<parâmetro1,parâmetro2,...>]::
--dirstat[=<parâmetro1,parâmetro2,...>]::
	Produz a distribuição da quantidade relativa de alterações para cada
	subdiretório. O comportamento do `--dirstat` pode ser customizado passando
	uma lista de parâmetros separados por vírgula.  As predefinições são
	controlados pela variável de configuração `diff.dirstat` (veja
	linkgit:git-config[1]).  Os seguintes parâmetros estão disponíveis:
+
--
`changes`;;
	Calcule os números "dirstat" contando as linhas que foram removidas da fonte
	ou adicionadas ao destino. Ignora a quantidade de movimentos de código puro
	em um arquivo.  Em outras palavras, reorganizar as linhas em um arquivo não
	conta tanto quanto as outras alterações.  Este é o comportamento predefinido
	quando nenhum parâmetro for utilizado.
`lines`;;
	Calcule os números "dirstat" fazendo a análise diferencial com base nas
	linhas regulares e somando as contagens das linhas removidas /
	adicionadas. (Para os arquivos binários, conte em blocos de 64 bytes, pois
	os arquivos binários não têm um conceito natural de linhas). Este é um
	comportamento mais dispendioso do `--dirstat` do que o comportamento
	`changes` (alterações), conta as linhas reorganizadas em um arquivo tanto
	quanto as outras alterações. A produção resultante é consistente com o que
	você obtém das outras opções `--*stat`.
`files`;;
	Calcule os números "dirstat" contando a quantidade de arquivos alterados.
	Cada arquivo alterado conta igualmente na análise do "dirstat". Este é o
	comportamento computacional mais barato do `--dirstat`, pois não precisa
	olhar o conteúdo do arquivo.
`cumulative`;;
	Conta as alterações em um diretório herdeiro e também para o diretório de
	origem.  Observe que, ao utilizar `cumulative` (cumulativo), a soma das
	porcentagens relatadas pode exceder os 100%. O comportamento predefinido
	(não cumulativo) pode ser especificado com o parâmetro `noncumulative` (não
	cumulativo).
<limite>;;
	Um parâmetro inteiro especifica uma porcentagem de corte (a predefinição
	retorna para 3%).  Os diretórios que contribuem com menos que esta
	porcentagem nas alterações não são exibidos na saída.
--
+
Exemplo: O seguinte contará os arquivos alterados, ignorando os diretórios
com menos de 10% da quantidade total dos arquivos alterados e acumulando as
contagens de um diretório-herdado nos diretórios-raiz:
`---dirstat=arquivos,10,cumulative`.

--cumulative::
	É um sinônimo para `--dirstat=cumulative`

--dirstat-by-file[=<parâmetro1,parâmetro2>...]::
	É um sinônimo para `--dirstat=arquivos,parâmetro1,parâmetro2...`

--summary::
	Produza um resumo condensado das informações estendidas do cabeçalho, como
	criações, renomeações e alterações do modo.

ifndef::git-format-patch[]
--patch-with-stat::
	É um sinônimo para `-p --stat`.
endif::git-format-patch[]

ifndef::git-format-patch[]

-z::
ifdef::git-log[]
	Separe os commits com caracteres `NUL` em vez de novos caracteres "newlines" (novas linhas).
+
Além disso, quando a opção `--raw` ou `--numstat` for utilizado, não una os
nomes dos caminhos e utilize caracteres `NUL` como terminadores na saída dos
campos.
endif::git-log[]
ifndef::git-log[]
	Quando `--raw`, `--numstat`, `--name-only` ou `--name-status` tenha sido
	utilizado, não una os nomes do caminho e utilize caracteres `NUL` como terminadores do campo de saída.
endif::git-log[]
+
Sem esta opção, os nomes do caminho com caracteres "incomuns" são citados
como explicado na variável de configuração `core.quotePath` (veja
linkgit:git-config [1]).

--name-only::
	Exiba apenas os nomes dos arquivos que foram alterados.

--name-status::
	Exiba apenas os nomes e a condição atual dos arquivos que foram
	alterados. Consulte a descrição da opção `--diff-filter` sobre o significado
	das letras de condição.

--submodule[=<formato>]::
	Especifique como as diferenças nos submódulos são exibidos.  Ao especificar
	`--submodule=short`, o formato 'short' (curto) é utilizado.  Este formato
	exibe apenas os nomes dos commits no início e no final do intervalo.  Ao
	utilizar a opção `--submodule` ou `--submodule=log`, o formato 'log' passa a
	ser utilizado.  Este formato lista os commits no intervalo como o
	linkgit:git-submodule[1] `summary` (resumo) faz.  Ao utilizar a opção
	`--submodule=diff`, o formato 'diff' passa a ser utilizado.  Este formato
	exibe uma comparação nas linhas das alterações no conteúdo do submódulo
	entre o intervalo do commit.  A predefinição retorna para a opção de
	configuração `diff.submodule` ou o formato 'short' (curto) caso a opção da
	configuração estiver desativada.

--color[=<quando>]::
	Exibe o diff colorido.  A opção `--color` (sem '=<quando>' por exemplo) é o
	mesmo que a opção `--color=always`.  '<quando>' pode ser `always` (sempre),
	`never` (nunca), ou `auto`.
ifdef::git-diff[]
	Pode ser alterado pelas definições da configuração
	`color.ui` e `color.diff`.
endif::git-diff[]

--no-color::
	Desativa o diff colorido.
ifdef::git-diff[]
	Pode ser utilizado para substituir a definição da configuração.
endif::git-diff[]
	É o mesmo que `--color=never`.

--color-moved[=<modo>]::
	As linhas de código que foram movidas são coloridas de maneira diferente.
ifdef::git-diff[]
	Pode ser alterado através da pela definição da configuração `diff.colorMoved`.
endif::git-diff[]
	O <modo> retorna para a predefinição como 'no' caso a opção não seja utilizada
	e para 'zebra' caso a opção seja utilizada sem nenhum modo.
	O modo deve ser um dos seguintes:
+
--
no::
	As linhas movidas não são destacadas.
default::
	É um sinônimo para `zebra`. Pode ser que isso mude para um modo mais
	sensível no futuro.
plain::
	Qualquer linha adicionada em um local e removida em outro será colorida com
	'color.diff.newMoved'.  Da mesma forma, 'color.diff.oldMoved' será utilizado
	para as linhas que forem removidas e que foram adicionadas em outro lugar no
	diff. Este modo seleciona qualquer linha movida, mas não é muito útil em uma
	revisão para determinar se um bloco do código foi movido sem permutação.
blocks::
	Os blocos de texto movidos com pelo menos 20 caracteres alfanuméricos são
	detectados de forma ávida. Os blocos detectados são pintados utilizando a
	cor `color.diff.{old,new}Moved`.  Os blocos adjacentes não podem ser
	separados.
zebra::
	Os blocos de texto que foram movidos são detectados como no modo 'blocks'
	(blocos). Os blocos são pintados utilizando a cor
	`color.diff.{old,new}Moved` ou `color.diff.{old,new}MovedAlternative`. A
	alteração entre as duas cores indica que um novo bloco foi detectado.
dimmed-zebra::
	Semelhante ao 'zebra', porém é realizado o escurecimento adicional das
	partes desinteressantes do código que foi movido. As linhas limítrofes dos
	dois blocos adjacentes são considerados como interessantes, o resto como não
	interessante.  `dimmed_zebra` é um sinônimo obsoleto.
--

--no-color-moved::
	Desativa a detecção de movimento. Pode ser utilizado para substituir a
	definição da configuração. É o mesmo que `--color-moved=no`.

--color-moved-ws=<modos>::
	Configura como o espaço é ignorado durante a execução da detecção do mover
	para `--color-moved`.
ifdef::git-diff[]
	Pode ser definido através da definição da variável de configuração `diff.colorMovedWS`.
endif::git-diff[]
	Estes modos podem ser utilizados como uma lista separada por vírgulas:
+
--
no::
	Não ignore os espaços quando realizar a detecção da ação de mover.
ignore-space-at-eol::
	Ignore as alterações no espaço na EOL (fim da linha).
ignore-space-change::
	Ignore as alterações na quantidade do espaço.  Ignora o espaço no final da
	linha e considera todas as outras sequências de um ou mais caracteres de
	espaço como equivalentes.
ignore-all-space::
	Ignore o espaço durante a comparação das linhas. Ignore as diferenças mesmo
	que uma linha tenha espaços quando a outra linha não tiver nenhuma.
allow-indentation-change::
	Ignore inicialmente, qualquer espaço na detecção da ação de mover, em
	seguida, agrupe os blocos do código que foram movidos apenas em um bloco
	caso a alteração no espaço seja a mesma em cada linha. Isto é incompatível
	com os outros modos.
--

--no-color-moved-ws::
	Não ignore os espaços quando realizar a detecção da ação de mover. Pode ser
	utilizado para substituir a definição da configuração. É o mesmo que
	`--color-moved-ws=no`.

--word-diff[=<modo>]::
	Exiba umadiff entre as palavras, usando o <modo> para delimitar as palavras
	alteradas.  É predefinido que as palavras sejam delimitadas por espaços;
	consulte `--word-diff-regex` abaixo.  O <modo> retorna para a predefinição
	'plain' e deve ser um dos seguintes:
+
--
color::
	Destaque as palavras alteradas usando apenas as cores.  Implica no uso da
	opção `--color`.
plain::
	Exiba as palavras como `[-removed-]` (removido) e `{+added+}` (adicionado).
	Não faz nenhuma tentativa de escapar os delimitadores caso eles apareçam na
	entrada, portanto, a saída pode ser ambígua.
porcelain::
	Use um formato especial orientado em linha destinado para a utilização com
	um script.  As execuções adicionadas/removidas/inalteradas são impressas no
	formato diff unificado tradicional, começando com um caractere `+`/`-`/` `
	no início da linha e estendendo-se até o final.  As novas linhas na entrada
	são representadas por um til `~` em uma linha própria.
none::
	Desative a palavra diff novamente.
--
+
Observe que, apesar do nome do primeiro modo, a cor é utilizada para realçar
as partes alteradas em todos os modos caso seja ativada.

--word-diff-regex=<expressão-regular>::
	Utilize uma `<expressão-regular>` para decidir o que uma palavra é em vez de
	considerar as execuções dos espaços que não estejam vazios como uma
	palavra.  Também implica no uso da opção `--word-diff`, a menos que já
	esteja ativo.
+
Toda a coincidência não sobreposta do `<expressão-regular>` é considerado
como sendo uma palavra.  Qualquer coisa entre estas coincidências é
considerada um espaço e é ignorado(!) com o objetivo de encontrar as
diferenças.  Você pode anexar `|[^[:space:]]` à sua expressão regular para
garantir que ela coincida com todos os caracteres que não sejam espaços.
Uma coincidência que contenha uma nova linha é silenciosamente truncada(!)
na nova linha.
+
A opção `--word-diff-regex=.` por exemplo, tratará cada caractere como uma
palavra e coincidentemente, exibirá as diferenças caractere a caractere.
+
A expressão regular também pode ser definida através de um controlador do
diff ou uma opção de configuração, consulte linkgit:gitattributes[5] or
linkgit:git-config[1].  A concessão explícita substitui qualquer controle
diff ou uma configuração.  Os controles diff substituem as definições da
configuração.

--color-words[=<expressão-regular>]::
	Equivalente a `--word-diff=color` mais (caso um regex seja utilizado)
	`--word-diff-regex=<expressão-regular>`.
endif::git-format-patch[]

--no-renames::
	Desative a detecção da ação de renomear, mesmo quando o arquivo de
	configuração seja predefinido para tanto.

--[no-]rename-empty::
	Se usa ou não bolhas vazias como origem do nome.

ifndef::git-format-patch[]
--check::
	Avise caso as alterações introduzirem os marcadores de conflito ou os erros
	de espaço.  A configuração `core.whitespace` define o que são considerados
	erros de espaço.  É predefinido que os espaços à direita (incluindo as
	linhas que consistem apenas de espaços) e um caractere de espaço que seja
	imediatamente seguido por um caractere de tabulação dentro do recuo inicial
	da linha, são considerados erros de espaço.  Encerra com uma condição
	diferente de zero caso problemas sejam encontrados. Não é compatível com
	`--exit-code`.

--ws-error-highlight=<tipo>::
	Destaque os erros de espaço nas linhas `context` (contexto), `old` (antigo)
	ou `new` (novo) do diff.  Vários valores são separados por vírgula, `none`
	redefine os valores anteriores, `default` redefine a lista para `new` e
	`all` é uma abreviação para `old,new,context`.  Quando esta opção não é
	utilizada e a variável de configuração `diff.wsErrorHighlight` não está
	definida, apenas os erros de espaço nas linhas `novas` são destacados. Os
	erros de espaço são coloridos com `color.diff.whitespace`.

endif::git-format-patch[]

--full-index::
	Em vez do primeiro punhado de caracteres, exiba os nomes completos dos
	objetos bolha antes e depois da imagem na linha "index" ao produzir a saída
	no formato patch.

--binary::
	Além de `--full-index`, gere um diff binário que possa ser aplicado com o
	comando `git-apply`. Implica no uso da opção `--patch`.

--abrev[=<n>]::
	Em vez de exibir o nome completo do objeto hexadecimal com 40 bytes na
	produção do formato diff-raw e nas linhas do cabeçalho da árvore diff, exiba
	apenas um prefixo parcial.  Isso é independente da opção `--full-index`
	acima, que controla o formato da produção da saída do diff-patch.  A
	quantidade de dígitos fora do preestabelecido pode ser especificado com a
	opção `--abbrev=<n>`.

-B[<n>][/<m>]::
--break-rewrites[=[<n>][/<m>]]::
	Divida as alterações reescritas que foram completas em pares de exclusão e
	criação. Isso serve a dois propósitos:
+
Afeta a maneira como uma mudança que equivale a uma reescrita total de um
arquivo, não como uma série de exclusão e inserção combinadas com poucas
linhas que coincidem textualmente com o contexto, e sim como uma única
exclusão de tudo o que é antigo seguido por um inserção única de tudo que
for novo, o número `m` controla este aspecto da opção `-B` (a predefinição
retorna para 60%). `-B / 70%` determina que menos de 30% do original deve
permanecer no resultado para que o Git considere-o como uma reescrita total
(ou seja, caso contrário, o patch resultante será uma série de exclusões e
inserções combinados com linhas de contexto).
+
Quando utilizado com a opção `-M`, um arquivo totalmente reescrito também é
considerado a fonte de uma renomeação (O `-M` geralmente considera apenas um
arquivo que desapareceu como a origem de uma renomeação), o número `n`
controla esse aspecto da opção `-B` (a predefinição retorna para 50%). O
`-B20%` determina que uma alteração com a adição e a exclusão em comparação
com 20% ou mais do tamanho do arquivo é elegível para ser selecionada como
uma possível fonte de renomeação para um outro arquivo.

-M[<n>]::
--find-renames[=<n>]::
ifndef::git-log[]
	Detecte as renomeações.
endif::git-log[]
ifdef::git-log[]
	Ao produzir os diffs, detecte e relate tudo que for renomeado em cada commit.
	Para acompanhar os arquivos através das renomeações enquanto percorre o histórico
	consulte o comando `--follow`.
endif::git-log[]
	Caso `n` seja utilizado, é a limítrofe do índice da similaridade
	(A quantidade de adições/exclusões comparado ao tamanho
	do arquivo). `-M90%` significa que o Git deve considerar uma ação do par de
	exclusão/adição para ser renomeado caso mais que 90% do arquivo
	não tenha sido alterado.  Sem um sinal de `%`, a quantidade deve ser lida como
	uma fração, com um ponto decimal antes dele.  `-M5` se torna por exemplo
	0.5, portanto, é o mesmo que `-M50%`.  Da mesma forma que `-M05` é
	o mesmo que `-M5%`.  Para limitar a detecção para renomeações exatas, utilize
	`-M100%`.  A predefinição para o índice de similaridade é 50%.

-C[<n>]::
--find-copies[=<n>]::
	Detecte as cópias e também o que for renomeado.  Consulte também
	`--find-copies-harder`.  Caso `n` seja utilizado, ele terá o mesmo
	significado que `-M<n>`.

--find-copies-harder::
	Por motivos de desempenho, a predefinição retorna para que a opção `-C`
	encontre as cópias apenas caso o arquivo original da cópia tenha sido
	modificado no mesmo conjunto de alterações.  Essa flag faz com que o comando
	inspecione os arquivos que não modificados como candidatos à origem da
	cópia.  Esta é uma operação muito dispendiosa em projetos grandes, portanto,
	utilize-a com cuidado.  Tem o mesmo efeito caso a opção `-C` seja repetida.

-D::
--irreversible-delete::
	Omita a imagem prévia que será excluída, ou seja, imprima apenas o
	cabeçalho, mas não a diferença entre a pré-imagem e `/dev/null`. O patch
	resultante não deve ser aplicado com com o comando `patch` ou `git apply`; é
	apenas para pessoas que desejam se concentrar em revisar o texto após a
	alteração. Além disso, a saída obviamente não possui informações suficientes
	para aplicar esse patch em sentido inverso, mesmo manualmente, daí o nome da
	opção.
+
Quando utilizado em conjunto com a opção `-B`, omita também a pré-imagem na
parte da exclusão de um par excluir/criar.

-l<num>::
	As opções `-M` e `-C` requerem um tempo de processamento O(n^2) em que n é a
	quantidade de possíveis alvos para renomeações/cópia.  Esta opção impede que
	a detecção da ação de renomear/cópia seja executada se a quantidade dos
	alvos a serem renomeados/copiados exceda o a quantidade especificada.

ifndef::git-format-patch[]
--diff-filter=[(A|C|D|M|R|T|U|X|B)...[*]]::
	Selecione apenas os arquivos Adicionados (`A`), Copiados (`C`), Excluídos
	(`D`), Modificados (`M`), Renomeados (`R`) e que tenham o seu tipo (por
	exemplo, arquivo normal, link simbólico, o submódulo, ...) alterado (`T`),
	não está mesclado (`U`), que seja desconhecido (`X`) ou que teve o seu
	emparelhamento quebrado (`B`).  Qualquer combinação dos caracteres do filtro
	(incluindo `none` nenhum) pode ser utilizado.  Quando `*` (Tudo ou nenhum) é
	adicionado à combinação, todos os caminhos são selecionados caso haja algum
	arquivo que coincida com outros critérios durante a comparação; caso não
	haja nenhum arquivo que coincida com outros critérios, nada será
	selecionado.
+
Além disso, estas letras maiúsculas podem ser transformadas em minusculas
para se excluir.  `--diff-filter=ad` exclui os caminhos adicionados e
excluídos por exemplo.
+
Observe que nem todas as diferenças diff podem apresentar todos os
tipos. Por exemplo, diffs do índice para a árvore de trabalho nunca podem
ter entradas adicionadas (porque o conjunto dos caminhos inclusos no diff é
limitado pelo que está no índice).  Da mesma forma, as entradas copiadas e
renomeadas não podem aparecer caso a detecção para estes tipos estiverem
desativados.

-S<texto>::
	Procure por diferenças que alterem a quantidade de ocorrências da cadeia de
	caracteres especificada (ou seja, adição/exclusão) em um arquivo.  Destinado
	ao uso do scripter.
+
Útil durante a produra por um bloco de código exato (como uma "struct"), e
quera saber o histórico deste bloco desde que ele surgiu: utilize o recurso
de forma iterativa para alimentar o bloco de interesse na pré-imagem de
volta `-S` e continue até você obter a primeira versão do bloco.
+
Os arquivos binários também são pesquisados.

-G<expressão-regular>::
	Procure por diferenças cujo texto do patch contenha as linhas
	adicionadas/removidas que correspondam a um `<expressão-regular>`.
+
Para ilustrar a diferença entre `-S<expressão-regular> --pickaxe-regex` e
`-G<expressão-regular>`, considere um commit com o seguinte diff no mesmo
arquivo:
+
----
+    return frotz(nitfol, two->ptr, 1, 0);
...
-    hit = frotz(nitfol, mf2.ptr, 1, 0);
----
+
Enquanto o `git log -G"frotz\(nitfol"` exibirá este commit, já o `git log
-S"frotz\(nitfol" --pickaxe-regex` não (porque a quantidade de ocorrências
dessa cadeia de caracteres não foi alterada) .
+
A menos que `--text` seja utilizado, os patches dos arquivos binários sem um
filtro "textconv" serão ignorados.
+
Para mais informações consulte a entrada 'pickaxe' em
linkgit:gitdiffcore[7].

--find-object=<id-do-objeto>::
	Procure pelas diferenças que alteram a quantidade de ocorrências do objeto
	especificado. Similar ao `-S`, porém apenas o argumento é diferente pois ele
	não procura por uma sequência específica, mas por um ID específico do
	objeto.
+
O objeto pode ser uma bolha ou um commit do submódulo. Para também encontrar
árvores, faça a utilização da opção `-t` também no `git-log`.

--pickaxe-all::
	Quando a opção `-S` ou `-G` encontra uma alteração, exiba todas as
	alterações naquele conjunto de alterações e não apenas nos arquivos que
	contenham as alterações em uma `<texto>`.

--pickaxe-regex::
	Trate o `<texto>` utilizado com o `-S` como uma expressão regular POSIX
	estendida para coincidir.

endif::git-format-patch[]

-O<ordem-do-arquivo>::
	Controlar a ordem em que os arquivos aparecem na saída.  Substitui a
	variável de configuração `diff.orderFile` (consulte linkgit:git-config[1]).
	Para cancelar a variável `diff.orderFile`, utilize `-O/dev/null`.
+
A ordem da saída é determinada pela ordem dos padrões bolha na
<ordem-do-arquivo>.  São enviados primeiro todos os arquivos cujos nomes do
caminho coincidam com o primeiro padrão, em seguida todos os arquivos cujos
nomes do caminho coincidam com o segundo padrão (mas não ao primeiro) e
assim por diante.  São exibidos por último todos os arquivos cujos nomes do
caminho não coincidam com nenhum padrão como se houvesse um padrão de
coincidência total implícito no final do arquivo.  Caso vários nomes do
caminho tenham a mesma classificação (eles coincidem com o mesmo padrão, mas
não com os padrões anteriores), a sua ordem na saída em relação à outra é a
ordem normal.
+
A <ordem-do-arquivo> é analisado da seguinte maneira:
+
--
 - As linhas em branco são ignoradas para que possam ser utilizadas como
   separadores, facilitando a leitura.

 - As linhas que começam com um hash ("`#`") são ignoradas para que possam ser
   utilizadas como comentários.  Adicione uma barra invertida ("`\`") ao início
   do padrão caso ele comece com um hash.

 - Cada outra linha quem contenha um único padrão.
--
+
Os padrões têm a mesma sintaxe e semântica que os padrões utilizados para
fnmatch(3) sem a flag `FNM_PATHNAME`, exceto que um nome do caminho também
coincida com um padrão caso a remoção de qualquer quantidade dos componentes
finais do nome do caminho coincida com o padrão.  O padrão "`foo*bar`"
coincide com "`fooasdfbar`" e "`foo/bar/baz/asdf`" mas não com "`foobarx`"
por exemplo.

ifndef::git-format-patch[]
-R::
	Troque as duas entradas; isto é, exiba as diferenças do índice ou do arquivo
	no disco para o conteúdo da árvore.
endif::git-format-patch[]

--relative[=<caminho>]::
--no-relative::
	Com esta opção, quando executado a partir de um subdiretório do projeto,
	pode-se dizer para excluir as alterações fora do diretório e exibir os nomes
	do caminho relativos a ele.  Quando não estiver em um subdiretório (em um
	repositório simples por exemplo), é possível nomear em qual subdiretório
	tornar a saída relativa, utilizando um `<caminho>` como argumento. A opção
	`--no-relative` pode ser utilizada para contrapor ambas as opções de
	configuração `diff.relative` e a anterior `--relative`.

-a::
--text::
	Trate todos os arquivos como texto.

--ignore-cr-at-eol::
	Ignore o retorno do carro no final da linha durante uma comparação.

--ignore-space-at-eol::
	Ignore as alterações no espaço na EOL (fim da linha).

-b::
--ignore-space-change::
	Ignore as alterações na quantidade do espaço.  Ignora o espaço no final da
	linha e considera todas as outras sequências de um ou mais caracteres de
	espaço como equivalentes.

-w::
--ignore-all-space::
	Ignore o espaço durante a comparação das linhas.  Ignore as diferenças mesmo
	que uma linha tenha espaços quando a outra linha não tiver nenhuma.

--ignore-blank-lines::
	Ignore as alterações cujas linhas estejam todas em branco.

--inter-hunk-context=<linhas>::
	Exiba o contexto entre as diferenças, até a quantidade de linhas
	especificada, fundindo assim as que estão próximas umas das outras.  A
	predefinição retorna para `diff.interHunkContext` ou 0 caso a opção de
	configuração não esteja definida.

-W::
--function-context::
	Exiba todas as funções ao redor das alterações.

ifndef::git-format-patch[]
ifndef::git-log[]
--exit-code::
	Faça com que o programa encerre com códigos semelhantes ao diff(1).  Ou
	seja, encerra com 1 caso haja diferenças ou 0 quando não houver.

--quiet::
	Faz com que o programa trabalhe em silêncio. Implica no uso da opção
	`--exit-code`.
endif::git-log[]
endif::git-format-patch[]

--ext-diff::
	Permitir que um auxiliar diff externo seja executado. Caso um controlador
	diff externo seja definido com linkgit:gitattributes[5], será necessário a
	utilização desta opção com linkgit:git-log[1] e seus companheiros.

--no-ext-diff::
	Não permitir o uso de um controladores diff externo.

--textconv::
--no-textconv::
	Permita (ou não permita) a execução dos filtros externos para a conversão do
	texto durante a comparação dos arquivos binários. Para mais detalhes
	consulte linkgit:gitattributes[5]. Como os filtros "textconv" são
	normalmente uma conversão unidirecional, o diff resultante é legível para as
	pessoas porém não pode ser aplicado. Por este motivo, é predefinido que os
	filtros "textconv" estejam ativos apenas para os comandos
	linkgit:git-diff[1] e linkgit:git-log[1], mas não para os comandos
	linkgit:git-format-patch[1] ou comandos "diff" que possam ser
	redirecionados.

--ignore-submodules[=<quando>]::
	Ignore as alterações nos submódulos durante a geração dos diffs. O
	`<quando>` pode ser "none" (nenhum), "untracked" (sem
	monitoramento/rastreamento), "dirty" (sujo) ou "all" (todos), que é a
	predefinição.  O "none" considera o submódulo modificado quando houver
	arquivos não estejam rastreados, modificados ou o seu `HEAD` seja diferente
	do commit registrado no superprojeto, pode ser utilizado para substituir
	qualquer configuração da opção 'ignore' (ignorar) em  linkgit:git-config[1]
	ou linkgit:gitmodules[5]. Quando o "untracked" é utilizado, os submódulos
	não são considerados sujos quando houver apenas  um conteúdo sem
	rastreamento (porém o monitoramento de alterações do seu conteúdo continua)
	O uso de "dirty" ignora todas as alterações na árvore de trabalho dos
	submódulos, apenas as alterações nos commits armazenados no superprojeto são
	exibidos (este era o comportamento anterior até a versão 1.7.0). O uso de
	"all" oculta todas as alterações nos submódulos.

--src-prefix=<prefixo>::
	Exiba o prefixo da origem utilizada em vez de "a/".

--dst-prefix=<prefixo>::
	Exiba o prefixo do destino utilizado em vez de "b/".

--no-prefix::
	Não exiba nenhum prefixo da origem ou destino.

--line-prefix=<prefixo>::
	Prefira um prefixo adicional em cada linha produzida.

--ita-invisible-in-index::
	É predefinido que as entradas adicionadas através do comando "git add -N"
	apareçam como uma cadeia de caracteres vazia existente com o comando "git
	diff" e um novo arquivo com "git diff --cached".  Esta opção faz com que a
	entrada apareça como um novo arquivo no "git diff" e inexistente no "git
	diff --cached". Esta opção pode ser revertida com
	`--ita-visible-in-index`. Ambas as opções são experimentais e podem ser
	removidas no futuro.

Para uma explicação mais detalhada sobre estas opções comuns, consulte
também linkgit:gitdiffcore[7].
