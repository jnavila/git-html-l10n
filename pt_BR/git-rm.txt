git-rm(1)
=========

NOME
----
git-rm - Remove os arquivos da árvore de trabalho e do índice

RESUMO
------
[verse]
'git rm' [-f | --force] [-n] [-r] [--cached] [--ignore-unmatch]
	  [--quiet] [--pathspec-from-file=<arquivo> [--pathspec-file-nul]]
	  [--] [<pathspec>...]

DESCRIÇÃO
---------
Remove do índice, da árvore de trabalho e do índice os arquivos que correspondam ao 'pathpec'. O comando `git rm` não removerá um arquivo apenas do seu diretório de trabalho. (Não há opção para remover um arquivo apenas da árvore de trabalho e ainda assim mantê-lo no índice; use `/bin/rm` se quiser fazer isso). Os arquivos que estão sendo removidos devem ser idênticos aos do cume do ramo e nenhuma atualização de seu conteúdo pode ser colocada no índice, embora esse comportamento padrão possa ser substituído pela opção `-f`. Quando `--cached` é fornecido, o conteúdo preparado deve corresponder ao cume da ramificação ou ao arquivo no disco, permitindo que o arquivo seja removido apenas do índice. Quando os "sparse-checkouts" estiverem em uso (consulte linkgit:git-sparse-checkout[1]), o comando `git rm` removerá apenas os caminhos dentro dos padrões de "sparse-checkout".


OPÇÕES
------
<pathspec>...::
	Arquivos para remover. Um nome de diretório à esquerda (`dir` para remover `dir/file1` e `dir/file2` por exemplo) pode ser utilizado para remover todos os arquivos do diretório e, recursivamente, todos os subdiretórios, porém, isso requer que a opção `-r` seja explicitamente usada.
+
O comando remove apenas os caminhos que sejam informados pelo Git.
+
O agrupamento de arquivos faz a correspondência entre os limites do diretório. Assim, considerando dois diretórios `d` e `d2`, há uma diferença entre usar `git rm 'd*'` e `git rm 'd/*'`, pois o primeiro também removerá todo o diretório `d2`.
+
Para mais detalhes sobre a sintaxe, consulte a entrada 'pathspec' em linkgit:gitglossary[7].

-f::
--force::
	Substitua a verificação atualizada.

-n::
--dry-run::
	Na verdade, não remova nenhum arquivo. Em vez disso, mostra apenas se eles existem no índice e se, de outra maneira, seriam removidos pelo comando.

-r::
        Permita a remoção recursiva quando um nome do diretório principal for informado.

\--::
	Esta opção pode ser utilizada para separar as opções da linha de comandos da lista dos arquivos (útil quando os nomes do arquivo puderem ser confundidos com as opções da linha de comando).

--cached::
	Use esta opção para desestabilizar e remover apenas os caminhos do índice. Os arquivos da árvore de trabalho, alterados ou não, serão deixados em paz.

--ignore-unmatch::
	Encerre com uma condição zero, ainda que não haja a coincidência com nenhum arquivo.

--sparse::
	Permite a atualização das entradas no índice fora do cone de averiguação esparsa. Normalmente, o comando `git rm` se recusa a atualizar as entradas do índice cujos caminhos não se encaixam no cone de averiguação esparsa. Para mais informações consulte linkgit:git-sparse-checkout[1].

-q::
--quiet::
	O `git rm` normalmente gera uma linha (na forma de um comando `rm`) para cada arquivo removido. Essa opção suprime esta saída.

--pathspec-from-file=<arquivo>::
	O "pathspec" é passado com `<arquivo>` em vez dos argumentos da linha de comando. Caso o `<arquivo>` seja exatamente `-`, a entrada padrão será utilizada. Os elementos do "pathspec" são separados por caracteres de término de linha `LF` ou `CR/LF`. Os elementos do "pathspec" podem ser citados conforme explicado na variável de configuração `core.quotePath` (consulte linkgit:git-config[1]). Consulte também opção `--pathspec-file-nul` e o global `--literal-pathspecs`.

--pathspec-file-nul::
	Só faz algum sentido caso seja utilizado junto com a opção `--pathspec-from-file`. Os elementos "pathspec" são separados com caracteres `NUL` e todos os outros caracteres são considerados de forma literal (incluindo as novas linhas e as citações).


REMOVENDO OS ARQUIVOS QUE DESAPARECERAM DO SISTEMA DE ARQUIVOS
--------------------------------------------------------------
Não há uma opção para o comando `git rm` para remover do índice apenas os caminhos que desapareceram do sistema de arquivos. No entanto, dependendo do caso, há várias maneiras de se fazer isso.

Utilizando o `git commit -a`
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Se você pretende que o seu próximo commit registre todas as alterações dos arquivos rastreados na árvore de trabalho e registre todas as remoções de arquivos que foram removidos da árvore de trabalho com `rm` (em oposição ao `git rm`), use o `git commit -a`, pois ele notará e registrará automaticamente todas as remoções. Você também pode obter um efeito semelhante sem fazer o commit usando `git add -u`.

Utilizando `git add -A`
~~~~~~~~~~~~~~~~~~~~~~~
Ao aceitar um novo código para o fornecedor de um ramo, você provavelmente deseja registrar a remoção dos caminhos e as adições dos novos caminhos, bem como as modificações dos caminhos já existentes.

Normalmente, você primeiro remove todos os arquivos rastreados da árvore de trabalho utilizando este comando:

----------------
git ls-files -z | xargs -0 rm -f
----------------

e descompacte o novo código na árvore de trabalho. Como alternativa, você pode usar o comando 'rsync' nas alterações na árvore de trabalho.

Depois disso, a maneira mais fácil de registrar todas as remoções, adições e modificações na árvore de trabalho é:

----------------
git add -A
----------------

Consulte linkgit:git-add[1].

Outras maneiras
~~~~~~~~~~~~~~~
Se tudo o que você realmente deseja é remover do índice os arquivos que não estão mais presentes na árvore de trabalho (talvez porque a sua árvore de trabalho esteja suja e você não possa usar o comando `git commit -a`), utilize o seguinte comando:

----------------
git diff --name-only --diff-filter=D -z | xargs -0 git rm --cached
----------------

SUBMÓDULOS
----------
Apenas os submódulos que usam um gitfile (o que significa que eles foram clonados com uma versão do Git 1.7.8 ou mais recente) serão removidos da árvore de trabalho, pois o repositório deles reside dentro do diretório .git do superprojeto. Se um submódulo (ou um dos aninhados dentro dele) ainda usar um diretório .git, o `git rm` moverá o diretório git dos submódulos para o diretório git dos superprojetos para proteger o histórico do submódulo. Se ele existir, a seção submodule.<nome> no arquivo linkgit:gitmodules[5] também será removida e esse arquivo será preparado (a menos que --cached ou -n sejam usados).

Um submódulo é considerado atualizado quando o "HEAD" é o mesmo que o registrado no índice, nenhum arquivo rastreado é modificado e nenhum arquivo não rastreado que não seja ignorado está presente na árvore de trabalho do submódulo. Os arquivos ignorados são considerados descartáveis e não impedem que a árvore de trabalho de um submódulo seja removida.

Caso queira remover apenas a averiguação local de um submódulo vindo da sua árvore de trabalho sem fazer o commit de remoção, em vez disso utilize o linkgit:git-submodule[1] `deinit`. Para obter mais detalhes sobre a remoção do submódulo, veja também linkgit:gitsubmodules[7].

EXEMPLOS
--------
`git rm Documentation/\*.txt`::
	Remove todos os arquivos `* .txt` do índice que estão no diretório `Documentation` e em qualquer um dos seus subdiretórios.
+
Note que o asterisco `*` é citado no shell neste exemplo; isso permite que o Git e não o shell, expanda os nomes dos caminhos dos arquivos e subdiretórios no diretório `Documentation/`.

`git rm -f git-*.sh`::
	Como este exemplo permite que o shell expanda o asterisco (ou seja, você está listando os arquivos explicitamente), ele não considera o `subdir/git-foo.sh`.

BUGS
----
Sempre que uma atualização do `superproject` remove um submódulo preenchido (por exemplo, ao alternar entre commits antes e após a remoção), um checkout obsoleto do submódulo permanece no local antigo. A remoção do diretório antigo só é segura quando ele usa um `gitfile`; caso contrário, o histórico do submódulo também será excluído. Esta etapa será obsoleta quando a atualização recursiva do submódulo for implementada.

VEJA TAMBÉM
-----------
linkgit:git-add[1]

GIT
---
Parte do conjunto linkgit:git[1]
