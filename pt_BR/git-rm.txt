git-rm(1)
=========

NOME
----
git-rm - Remove os arquivos da árvore de trabalho e do índice

RESUMO
------
[verse]
'git rm' [-f | --force] [-n] [-r] [--cached] [--ignore-unmatch]
	  [--quiet] [--pathspec-from-file=<arquivo> [--pathspec-file-nul]]
	  [--] [<pathspec>...]

DESCRIÇÃO
---------
Exclui os arquivos correspondentes ao pathspec do índice ou da árvore de trabalho e do índice. O comando `git rm` não irá remover um arquivo apenas do seu diretório de trabalho. (Não há opção para remover um arquivo apenas da árvore de trabalho e ainda mantê-lo no índice; use `/bin/rm` caso queira fazer isso.) Os arquivos que estão sendo removidos devem ser idênticos ao topo do ramo, assim como, nenhuma atualização de seu conteúdo pode ser testada no índice, embora este comportamento predefinido possa ser alterado ao usar a opção `-f`. Quando `--cached` é usado, o conteúdo testado deve corresponder ao topo do ramo ou ao arquivo no disco, permitindo que o arquivo seja removido apenas do índice. Quando "sparse-checkouts" estão em uso (consulte linkgit:git-sparse-checkout[1]), o comando `git rm` apenas removerá os caminhos que estiverem dentro dos padrões do "sparse-checkout".


OPÇÕES
------
<pathspec>...::
	Arquivos para serem removidos. Um nome do diretório principal (por exemplo, `dir` para remover `dir/arquivo1` e `dir/arquivo2`) pode ser utilizadopara remover todos os arquivos do diretório e recursivamente de todos os subdiretórios, porém isso requer o uso da opção `-r` de forma explicita.
+
O comando remove apenas os caminhos que sejam informados pelo Git.
+
As coincidência do mascaramento do nome do arquivo através dos limites do diretório. Assim, os dados dos dois diretórios `d` e `d2`, existe uma diferença entre o uso do comando `git rm 'd*'` e `git rm 'd/*'`, pois o primeiro também removerá todo o diretório `d2` .
+
Para mais detalhes sobre a sintaxe <pathspec>, veja a entrada 'pathspec' em linkgit:gitglossary[7].

-f::
--force::
	Substitua a verificação atualizada.

-n::
--dry-run::
	Na verdade, não remova nenhum arquivo. Em vez disso, exiba apenas se eles existem no índice e caso contrário, seriam removidos pelo comando.

-r::
        Permita a remoção recursiva quando um nome do diretório principal for informado.

\--::
	Esta opção pode ser utilizada para separar as opções da linha de comandos da lista dos arquivos (útil quando os nomes do arquivo puderem ser confundidos com as opções da linha de comando).

--cached::
	Utilize esta opção para desestabilizar e remover os caminhos do índice apenas. Os arquivos da árvore de trabalho, modificados ou não, serão deixados em paz.

--ignore-unmatch::
	Encerre com uma condição zero, ainda que não haja a coincidência com nenhum arquivo.

--sparse::
	Permitir a atualização das entradas do índice fora do cônica do sparse-checkout. Geralmente, o comando 'git rm' se recusa a atualizar as entradas do índice cujos caminhos não se encaixem dentro da cônica do sparse-checkout. Consulte linkgit:git-sparse-checkout[1] para obter mais informações.

-q::
--quiet::
	O comando `git rm` normalmente gera uma linha (na forma de um comando `rm`) para cada arquivo removido. Esta opção suprime essa saída.

--pathspec-from-file=<arquivo>::
	O "pathspec" é passado com `<arquivo>` em vez dos argumentos da linha de comando. Caso o `<arquivo>` seja exatamente `-`, a entrada padrão será utilizada. Os elementos do "pathspec" são separados por caracteres de término de linha `LF` ou `CR/LF`. Os elementos do "pathspec" podem ser citados conforme explicado na variável de configuração `core.quotePath` (consulte linkgit:git-config[1]). Consulte também opção `--pathspec-file-nul` e o global `--literal-pathspecs`.

--pathspec-file-nul::
	Só faz algum sentido caso seja utilizado junto com a opção `--pathspec-from-file`. Os elementos "pathspec" são separados com caracteres `NUL` e todos os outros caracteres são considerados de forma literal (incluindo as novas linhas e as citações).


REMOVENDO OS ARQUIVOS QUE DESAPARECERAM DO SISTEMA DE ARQUIVOS
--------------------------------------------------------------
Não há uma opção para o comando `git rm` para remover do índice apenas os caminhos que desapareceram do sistema de arquivos. No entanto, dependendo do caso, há várias maneiras de se fazer isso.

Utilizando o `git commit -a`
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Caso tenha pretensão de que o seu próximo commit registre todas as modificações dos arquivos rastreados na árvore de trabalho e registre todas as remoções dos arquivos que foram removidos da árvore de trabalho com `rm` (ao contrário de `git rm`), utilize `git commit -a`, pois alertará e registrará automaticamente todas as remoções. É possível ter também um efeito semelhante sem fazer um commit utilizando o comando `git add -u`.

Utilizando `git add -A`
~~~~~~~~~~~~~~~~~~~~~~~
Ao aceitar um novo código para o fornecedor de um ramo, você provavelmente deseja registrar a remoção dos caminhos e as adições dos novos caminhos, bem como as modificações dos caminhos já existentes.

Normalmente, você primeiro remove todos os arquivos rastreados da árvore de trabalho utilizando este comando:

----------------
git ls-files -z | xargs -0 rm -f
----------------

e descompacte o novo código na árvore de trabalho. Como alternativa, você pode usar o comando 'rsync' nas alterações na árvore de trabalho.

Depois disso, a maneira mais fácil de registrar todas as remoções, adições e modificações na árvore de trabalho é:

----------------
git add -A
----------------

Consulte linkgit:git-add[1].

Outras maneiras
~~~~~~~~~~~~~~~
Se tudo o que você realmente deseja é remover do índice os arquivos que não estão mais presentes na árvore de trabalho (talvez porque a sua árvore de trabalho esteja suja e você não possa usar o comando `git commit -a`), utilize o seguinte comando:

----------------
git diff --name-only --diff-filter=D -z | xargs -0 git rm --cached
----------------

SUBMÓDULOS
----------
Somente os submódulos que usam um arquivo git (o que significa que foram clonados com uma versão 1.7.8 ou mais recente do Git) serão removidos da árvore de trabalho, pois seu repositório vive dentro do diretório .git do `superproject`. Caso um submódulo (ou um dos aninhados dentro dele) ainda utilize um diretório .git, `git rm` moverá o diretório dos submódulos git para o diretório `superprojects` git para proteger o histórico do submódulo. Caso exista, a seção submodule.<nome> no arquivo linkgit:gitmodules[5] também será removido e esse arquivo será preparado (a menos que `--cached` ou `-n` sejam utilizados).

Um submódulo é considerado atualizado quando `HEAD` for o mesmo que o registrado no índice, nenhum arquivo rastreado é modificado e nenhum arquivo que não for rastreado não é ignorado, está presente na árvore de trabalho do submódulo. Os arquivos ignorados são considerados dispensáveis e não impedem que a árvore de trabalho de um submódulo seja removida.

Caso queira remover apenas a averiguação local de um submódulo vindo da sua árvore de trabalho sem fazer o commit de remoção, em vez disso utilize o linkgit:git-submodule[1] `deinit`. Para obter mais detalhes sobre a remoção do submódulo, veja também linkgit:gitsubmodules[7].

EXEMPLOS
--------
`git rm Documentation/\*.txt`::
	Remove todos os arquivos `* .txt` do índice que estão no diretório `Documentation` e em qualquer um dos seus subdiretórios.
+
Note que o asterisco `*` é citado no shell neste exemplo; isso permite que o Git e não o shell, expanda os nomes dos caminhos dos arquivos e subdiretórios no diretório `Documentation/`.

`git rm -f git-*.sh`::
	Como este exemplo permite que o shell expanda o asterisco (ou seja, você está listando os arquivos explicitamente), ele não considera o `subdir/git-foo.sh`.

BUGS
----
Sempre que uma atualização do `superproject` remove um submódulo preenchido (por exemplo, ao alternar entre commits antes e após a remoção), um checkout obsoleto do submódulo permanece no local antigo. A remoção do diretório antigo só é segura quando ele usa um `gitfile`; caso contrário, o histórico do submódulo também será excluído. Esta etapa será obsoleta quando a atualização recursiva do submódulo for implementada.

VEJA TAMBÉM
-----------
linkgit:git-add[1]

GIT
---
Parte do conjunto linkgit:git[1]
