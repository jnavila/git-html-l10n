git-show-branch(1)
==================

NOME
----
git-show-branch - Exibe as ramificações e o seus commits

RESUMO
------
[verse]
'git show-branch' [-a | --all] [-r | --remotes] [--topo-order | --date-order]
		[--current] [--color[=<when>] | --no-color] [--sparse]
		[--more=<n> | --list | --independent | --merge-base]
		[--no-name | --sha1-name] [--topics]
		[(<rev> | <glob>)...]
'git show-branch' (-g | --reflog)[=<n>[,<base>]] [--list] [<ref>]

DESCRIÇÃO
---------

Exibe o grafo da ancestralidade do commit, começando pelos commits informados com <rev>s ou <glob>s (ou todos as refs em 'refs/heads' e/ou 'refs/tags') de forma semi-visual.

Não pode exibir mais de 29 ramificações e commits por vez.

Ele utiliza itens de configuração `showbranch.default` com vários valores caso nenhuma <rev> ou <glob> seja utilizado na linha de comando.


OPÇÕES
------
<rev>::
	A expressão SHA-1 arbitrária estendida (consulte linkgit:gitrevisions[7]) que normalmente nomeia um cabeçalho de ramo ou uma etiqueta.

<glob>::
	Um padrão de bolha que corresponde aos nomes das ramificações ou as etiquetas em refs/. Por exemplo, se você tiver muitas ramificações dos tópicos em `refs/heads/topic`, fornecer `topic/*` mostrará todas elas.

-r::
--remotes::
	Exibe os ramos monitorados remotamente.

-a::
--all::
	Exibe ambos os ramos monitorados remotamente e o ramos locais.

--current::
	Com esta opção, o comando inclui o ramo atual na lista das "revs" que serão exibidas quando não for utilizada na linha de comando.

--topo-order::
        É predefinido que as ramificações e seus commits são mostrados em ordem cronológica inversa. Essa opção faz com que eles apareçam em ordem topológica (ou seja, os commits descendentes são mostrados antes de seus commits principais).

--date-order::
	Essa opção é semelhante à `--topo-order`, no sentido onde nenhum pai vem antes de todos os herdeiros, porém, caso contrário, os commits são ordenadas de acordo com a data do commits.

--sparse::
	É predefinido que a saída omita as mesclagens que são acessíveis a partir do cume que está sendo mostrado. Esta opção os torna visíveis.

--more=<n>::
	Normalmente, o comando interrompe a saída ao mostrar o commit que é o ancestral comum de todas as ramificações. Esta opção diz ao comando para fazer `<n>` mais commits comuns além deste. Quando `<n>` for negativo, exibirá apenas as `<ref>`s informadas, sem mostrar a árvore de ancestralidade do commit.

--list::
	É um sinônimo para a opção `--more=-1`

--merge-base::
	Em vez de exibir a lista do commit, determine as possíveis bases para mesclagem para determinados commits. Todas as mesclagens das bases estarão contidas em todos os commits informados. Isso é diferente de como o linkgit:git-merge-base[1] lida com o caso de três ou mais commits.

--independent::
	Entre as <ref>s fornecidas, exiba apenas as que não podem ser acessadas de nenhuma outra <ref>.

--no-name::
	Não exiba o texto informado dos nomes para cada commit.

--sha1-name::
	Em vez de nomear os commits utilizando o caminho para alcançá-los através dos cabeçalhos ("master~2" para significar o avô do "master" por exemplo), nomeie-os com o prefixo exclusivo dos nomes dos seus objetos.

--topics::
	Mostra apenas os commits que NÃO estão no primeiro ramo informado. Isto ajuda a rastrear ramificações de tópicos, ocultando qualquer commit que já esteja na linha principal de desenvolvimento. Quando usar o comando `git show-branch --topics master topic1 topic2`, isso mostrará as revisões dadas por `git rev-list {caret}master topic1 topic2`

-g::
--reflog[=<n>[,<base>]] [<ref>]::
	Mostra as `<n>` entradas mais recentes do ref-log para a ref especificada. Se `<base>` for usada, `<n>` entradas voltarão a partir desta entrada. <base> pode ser especificado como uma contagem ou uma data. Quando nenhum parâmetro `<ref>` for explicitamente fornecido, a predefinição é o ramo atual (ou o `HEAD` caso esteja desvinculado).

--color[=<quando>]::
	Pinte o sinal de status (um destes: `*` `!` `+` `-`) de cada commit correspondente ao ramo em que se encontra. O valor sempre deve ser `always` (a predefinição), `never` ou `auto`.

--no-color::
	Desativar a saída colorida, mesmo quando o arquivo de configuração dá como padrão a saída colorida. O mesmo que `--color=never`.

Observe que as opções `--more`, `--list`, `--independent` e `--merge-base` são mutuamente exclusivas.


SAÍDA
-----

Dadas N <ref>s, as primeiras N linhas são a descrição de uma linha da sua mensagem do commit. O cabeçalho do ramo apontado por $GIT_DIR/HEAD é prefixado com um caractere asterisco `*`, enquanto os outros cabeçalhos são prefixados com um caractere `!`.

Após estas "N" linhas, é exibido um registro de uma linha para cada commit, com recuo de "N" posições. Se um commit estiver na "N"-ésima ramificação, o "N"-ésimo caractere de indentação mostrará um sinal `+`; caso contrário, mostrará um espaço. A mesclagem dos commits são indicados por um sinal `-`. Cada commit mostra um nome curto que pode ser usado como um SHA-1 estendido para nomear esse commit.

O exemplo a seguir mostra três ramificações, `master` (mestres), `fixes` (correções) e `mhf`:

------------------------------------------------
$ git show-branch master fixes mhf
* [master] Add 'git show-branch'.
 ! [fixes] Introduz a flag "reset type" para "git reset"
  ! [mhf] Permite que o refspec "+remote:local" cause --force quando for buscar.
---
  + [mhf] Permite que o refspec "+remote:local" cause --force quando for buscar.
  + [mhf~1] Usa git-octopus quando for capturar mais de um cabeçalho.
 +  [fixes] Introduz a sinalização "reset type" para "git reset"
  + [mhf~2] "git fetch --force".
  + [mhf~3] Utilize .git/remote/origin, e não .git/branches/origin.
  + [mhf~4] Faz um "git pull" e "git fetch" retornar para a predefinição no "origin"
  + [mhf~5] Infame 'octopus merge'
  + [mhf~6] Retira git-parse-remote.
  + [mhf~7] Multi-head fetch.
  + [mhf~8] Começa a adicionar a compatibilidade com o $GIT_DIR/remotes/.
*++ [master] Adiciona 'git show-branch'.
------------------------------------------------

Todas estas três ramificações foram bifurcadas de um commit comum, [master], cuja mensagem de commit é "Add \'git show-branch'". O ramo de "correções" adiciona um commit com a etiqueta "reset type" para "git reset"". O ramo "mhf" adiciona muitos outros commits. A ramificação atual é "master".


EXEMPLOS
--------

Caso mantenha os seus ramos principais imediatamente sob `refs/heads` e tópico dos ramos nos subdiretórios, ter o seguinte no arquivo de configuração pode ajudar:

------------
[showbranch]
	default = --topo-order
	default = heads/*

------------

Com isso, o comando `git show-branch` sem parâmetros adicionais mostraria apenas as ramificações primárias. Além disso, se você estiver em seu ramo de interesse, ele também será exibido.

------------
$ git show-branch --reflog="10,1 horas atrás" --list master
------------

Mostra 10 entradas de reflog que remontam ao pico de 1 hora atrás. Sem a opção `--list`, o resultado também mostra como essas dicas estão topologicamente relacionadas umas às outras.

CONFIGURAÇÃO
------------

include::includes/cmd-config-section-all.txt[]

include::config/showbranch.txt[]

GIT
---
Parte do conjunto linkgit:git[1]
