Gerando a correção em um formato texto com a opção `-p`
-------------------------------------------------------

Executando linkgit:git-diff[1], linkgit:git-log[1], linkgit:git-show[1], linkgit:git-diff-index[1], linkgit:git-diff-tree[1], ou linkgit:git-diff-files[1] com a opção `-p` produz um patch em formato texto. É possível personalizar a criação do patch em um formato texto através das variáveis de ambiente `GIT_EXTERNAL_DIFF` e `GIT_DIFF_OPTS` (consulte linkgit:git[1]).

O que a opção `-p` produz é um pouco diferente do formato diff tradicional:

1.   Ele é precedido por um cabeçalho "git diff" que se parece com:

       diff --git a/arquivo1 b/arquivo2
+
Os nomes dos arquivos `a/` e `b/` são os mesmos a menos que haja uma renomeação ou cópia. Especialmente para uma criação ou exclusão, `/dev/null` _não_ é utilizado no lugar dos nomes do arquivo `a/` ou `b/`.
+
Quando há um envolvimento no processo de renomear ou copiar, `arquivo1` e `arquivo2` exibem o nome do arquivo de origem da renomeação ou cópia e o nome do arquivo produzido pela renomeação ou copia respectivamente.

2.   É seguido por uma ou mais linhas estendidas do cabeçalho:

       modo antigo               <modo>
       modo novo                 <modo>
       modo de arquivo excluído  <modo>
       novo modo de arquivo      <modo>
       copiar de                 <caminho>
       copiar para               <caminho>
       renomear de               <caminho>
       renomear para             <caminho>
       índice de similaridade    <quantidade>
       índice de dissimilaridade <quantidade>
       índice                    <hash>..<hash> <modo>
+
Os modos dos arquivo são impressos como números octais com 6 dígitos, incluindo o tipo do arquivo e dos bits de permissão do arquivo.
+
Os nomes do caminho nos cabeçalhos estendidos não incluem os prefixos `a/` e `b/`.
+
O índice de similaridade é a porcentagem das linhas inalteradas e o índice de dissimilaridade é a porcentagem das linhas alteradas. É um número inteiro arredondado, seguido por um sinal de porcentagem. O valor do índice de similaridade de 100% é reservado para dois arquivos iguais, enquanto a dissimilaridade de 100% significa que nenhuma linha do arquivo antigo chegou ao novo.
+
A linha do índice inclui os nomes dos objetos bolha antes e depois da alteração. O `<modo>` será incluído caso o modo do arquivo não seja alterado; caso contrário, linhas separadas indicam o modo antigo e o novo.

3.  Os nomes dos caminhos com caracteres "incomuns" são citados como já explicado na variável de configuração `core.quotePath` (consulte linkgit:git-config[1]).

4.  Todos os arquivos `arquivo1` na saída se referem aos arquivos antes do commit e todos os arquivos `arquivo2` se referem aos arquivos após o commit. É incorreto aplicar cada alteração em cada arquivo sequencialmente. Por exemplo, este patch irá substituir a e b:

      diff --git a/a b/b
      renomeie a partir de a
      renomeie para b
      diff --git a/b b/a
      renomeie a partir do b
      renomeie para a


O formato diff combinado
------------------------

Qualquer comando que gere um diff pode utilizar a opção `-c` ou `--cc` para produzir um 'diff combinado' ao exibir uma mesclagem. Este é o formato predefinido durante a exibição das mesclagens com linkgit:git-diff[1] or linkgit:git-show[1]. Observe também que é possível utilizar a opção `-m` com qualquer um destes comandos para impor a geração dos diffs com as origens individuais de uma mesclagem.

Um formato "diff combinado" fica assim:

------------
diff --combined describe.c
index fabadb8,cc95eb0..4866510
--- a/describe.c
+++ b/describe.c
@@@ -98,20 -98,12 +98,20 @@@
	return (a_date > b_date) ? -1 : (a_date == b_date) ? 0 : 1;
  }

- static void describe(char *arg)
 -static void describe(struct commit *cmit, int last_one)
++static void describe(char *arg, int last_one)
  {
 +	unsigned char sha1[20];
 +	struct commit *cmit;
	struct commit_list *list;
	static int initialized = 0;
	struct commit_name *n;

 +	if (get_sha1(arg, sha1) < 0)
 +		usage(describe_usage);
 +	cmit = lookup_commit_reference(sha1);
 +	if (!cmit)
 +		usage(describe_usage);
 +
	if (!initialized) {
		initialized = 1;
		for_each_ref(get_name);
------------

1.   Ele é precedido por um cabeçalho "git diff" parecido com este (quando a opção `-c` é utilizada):

       diff --combined arquivo
+
ou assim (quando a opção `--cc` é utilizada):

       diff --cc arquivo

2.   Ele é seguido por uma ou mais linhas estendidas do cabeçalho (este exemplo exibe uma mesclagem com duas origens):

       índice <hash>,<hash>..<hash>
       modo <modo>,<modo>..<modo>
       modo novo arquivo <modo>
       modo arquivo excluído <modo>,<modo>
+
A linha `modo <modo>,<modo>..<modo>` aparece apenas caso pelo menos um dos <modos> seja diferente do restante. Os cabeçalhos estendidos com informações sobre a movimentação do conteúdo detectado (renomeação e detecção da cópia) são projetados para trabalhar com o diff com dois `<tree-ish>` e não são utilizados pelo formato diff combinado.

3.   É seguido por duas linhas do cabeçalho do arquivo/para o arquivo

       --- a/arquivo
       +++ b/arquivo
+
Semelhante ao cabeçalho de duas linhas para o formato diff tradicional 'unificado', o `/dev/null` é utilizado para sinalizar os arquivos criados ou excluídos.
+
No entanto, caso a opção `--combined-all-paths` seja utilizada, em vez de duas linhas do arquivo/para o arquivo, será obtido um cabeçalho `N+1` do cabeçalho do arquivo de "origem" para o arquivo de "destino" onde N é a quantidade de origens na mesclagem do commit

       --- a/arquivo
       --- a/arquivo
       --- a/arquivo
       +++ b/arquivo
+
Este formato estendido pode ser útil caso a detecção da renomeação ou cópia esteja ativa, permitindo que você veja o nome original do arquivo em diferentes origens.

4.   O formato do cabeçalho do pedaço é modificado para prevenir que as pessoas o alimentem acidentalmente com `patch -p1`. O formato diff combinado foi criado para revisar as alterações da mesclagem dos commits e não era para ser aplicado. A alteração é semelhante a alteração no cabeçalho estendido do 'índice':

       @@@ <from-file-range> <from-file-range> <to-file-range> @@@
+
Existem (a quantidade de origens + 1) caracteres `@` no cabeçalho do bloco para o formato diff combinado.

Diferente do formato diff 'unificado' tradicional que exiba os dois arquivos A e B com uma única coluna que possua o sinal de menos `-` (o sinal de menos -- aparece em A mas é removido em B), `+` (o sinal de mais -- ausente em A, mas adicionado em B), ou o prefixo `" "` (sem alteração -- de espaço), este formato compara dois ou mais arquivos arquivo1, arquivo2, ... com um arquivo X e exibe como X difere de cada arquivoN. Uma coluna para cada arquivoN é anexada à linha de saída para observar como a linha de X é diferente dela.

Um caractere `-` na coluna N significa que a linha aparece no "arquivoN", mas não aparece no resultado. Um caractere `+` na coluna N significa que a linha aparece no resultado e o arquivoN não possui essa linha (em outras palavras, a linha foi adicionada, do ponto de vista dessa origem).

Na saída do exemplo acima, a assinatura da função foi alterada nos dois arquivos (portanto, duas remoções `-` do arquivo1 e do arquivo2, mais `++` significa que uma linha que foi adicionada não aparece no arquivo1 ou no arquivo2). Outras oito linhas também são iguais no arquivo1, mas não aparecem no arquivo2 (portanto, prefixadas com `+`).

Quando exibido pelo comando `git diff-tree -c`, compara as origens de um commit mesclado com o resultado da mesclagem (ou seja, arquivo1..arquivoN são as origens). Quando exibido pelo comando `git diff-files -c`, as duas origens com as suas respectivas mesclagens não resolvidas com o arquivo da árvore de trabalho (ou seja, arquivo1 é o estágio 2, informado como "nossa versão", o arquivo2 é o estágio 3, informado como "a versão deles").
