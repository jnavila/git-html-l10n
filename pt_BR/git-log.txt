git-log(1)
==========

NOME
----
git-log - Exibe os registros log do commit


RESUMO
------
[verse]
'git log' [<opções>] [<intervalo-das-revisões>] [[--] <caminho>...]

DESCRIÇÃO
---------
Exibe os registros log do commit.

:git-log: 1
include::rev-list-description.txt[]

O comando aceita as opções aplicáveis ao comando linkgit:git-rev-list[1] para controlar o que é exibido e como. As opções aplicáveis ao comando linkgit:git-diff[1] serve para controlar como as alterações que cada commit faz são exibidas.


OPÇÕES
------

--follow::
	Continue listando o histórico de um arquivo além de o renomear (funciona apenas para um único arquivo).

--no-decorate::
--decorate[=short|full|auto|no]::
	Exiba os nomes das refs de quaisquer commits que estão sendo exibidos. Caso `short` seja definido, os prefixos do nome das refs `refs/heads/`, `refs/tags/` e `refs/remotes/` não serão exibidas. Já se `full` for definido, o nome completo da "ref" (incluindo o prefixo) será exibida. Se 'auto' for definido e se a saída seja para um terminal, os nomes das referências serão exibidas como se a opção 'short' tenha sido utilizada, caso contrário, nenhuma referência de nome será exibida. A opção `--decorate` é um atalho para `--decorate=short`. Caso seja configurado, o valor de `log.decorate` é utilizado, caso contrário a predefinição é `auto`.

--decorate-refs=<padrão>::
--decorate-refs-exclude=<padrão>::
	Para cada referência de candidato, não o use para decoração caso ele coincida com algum padrão fornecido para a opção `--decorate-refs-exclude` ou caso não coincida com nenhum padrão fornecido para `--decorate-refs`. A opção de configuração `log.excludeDecoration` permite excluir as refs das decorações, porém um padrão explícito `--decorate-refs` será substituida caso coincida com `log.excludeDecoration`.
+
Caso nenhuma destas opções ou configurações sejam fornecidas, as referências serão usadas como decoração caso coincidam com `HEAD`, `refs/heads/`, `refs/remotes/`, `refs/stash/` ou `refs/tags /`.

--clear-decorations::
	Quando definido, esta opção limpa todas as opções anteriores `--decorate-refs` ou `--decorate-refs-exclude` e relaxa o filtro padrão de decoração para incluir todas as referências. Esta opção é assumida caso o valor de configuração `log.initialDecorationSet` seja definida como `all`.

--source::
	Exiba na tela o nome "ref" utilizado na linha de comando pela qual cada commit foi alcançado.

--[no-]mailmap::
--[no-]use-mailmap::
	Utilize o arquivo mailmap para mapear os nomes dos autores dos commits e seus endereços de e-mail para nomes e endereços de e-mail reais canônicos. Consulte linkgit:git-shortlog[1].

--full-diff::
	Sem esta opção, o comando `git log -p <caminho> ...` exibe os commits que tocam os caminhos informados e os "diffs" sobre os mesmos caminhos. Com isso, o "diff" completo é exibido para os commits que tocam nos caminhos informados; significa que o "<caminho> ..." limita apenas os commits, não limita o "diff" para estes commits.
+
Observe que isso afeta todos os tipos de saída baseados em "diff", por exemplo os produzidos pelas opções `--stat`, etc.

--log-size::
	Inclua uma linha ``log size <número>'' na saída para cada commit, onde o <número> é o comprimento da mensagem deste commit em bytes. Destina-se a acelerar as ferramentas que leem as mensagens a partir do comando `git log` para alocar espaço antecipadamente.

include::line-range-options.txt[]

<intervalo-da-revisão>::
	Exibe apenas os commits no intervalo definido das revisões. Quando um <intervalo-da-revisão> não é definido, a predefinição retorna para `HEAD` (ou seja, todo o histórico que leva ao commit atual). O `origin..HEAD` define todos os commits acessíveis a partir do commit atual (ou seja, `HEAD`), porém não a partir do `origin`. Para obter uma lista mais completa de maneiras de soletrar o <intervalo-da-revisão>, consulte a seção "DEFININDO OS INTERVALOS" no linkgit:gitrevisions[7].

[--] <caminho>...::
	Exiba apenas os commits que sejam suficientes para explicar como os arquivos que coincidam com os caminhos informados foram criados. Consulte 'Simplificação do Histórico' abaixo para obter mais detalhes e para conhecer os outros modos de simplificação.
+
Os caminhos podem precisar ser prefixados com um `--` para separá-los das opções ou do intervalo de revisões, quando um conflito surgir.

include::rev-list-options.txt[]

include::pretty-formats.txt[]

FORMATAÇÃO DIFF
---------------

Por predefinição, o comando `git log` não gera qualquer diff. As opções abaixo podem ser usadas para exibir as alterações feitas por cada commit.

Note que a menos que uma das variantes `--diff-merges` (incluindo as opções curtas`-m`, `-c` e `--cc`) seja explicitamente informada, a mesclagem dos commits não mostrarão um diff, mesmo se um diff formato como `--patch` seja escolhido, nem corresponderá às opções de pesquisa como `-S`. A exceção é quando a opção `--first-parent` está em uso, neste caso`first-parent` é o formato predefinido.

:git-log: 1
:diff-merges-default: `off`
include::diff-options.txt[]

include::diff-generate-patch.txt[]

EXEMPLOS
--------
`git log --no-merges`::

	Exibe todo o histórico do commit, mas ignore todas as mesclagens

`git log v2.6.12.. include/scsi drivers/scsi`::

	Exibe todos os commits desde a versão 'v2.6.12' que alterou qualquer arquivo nos subdiretórios 'include/scsi' ou 'drivers/scsi'

`git log --since="2 weeks ago" -- gitk`::

	Exibe as alterações nas últimas duas semanas no arquivo 'gitk'. O `--` é necessário para evitar confusão com o *ramo* chamado 'gitk'

`git log --name-status release..test`::

	Exibe os commits que estão no ramo "test", mas não ainda no ramo "release", junto com a lista dos caminhos que cada commit modifica.

`git log --follow builtin/rev-list.c`::

	Exibe os commits que mudaram o arquivo `builtin/rev-list.c`, incluindo os commits que ocorreram antes do arquivo receber o nome atual.

`git log --branches --not --remotes=origin`::

	Exibe todas os commits que estão em qualquer uma das ramificações locais, mas não em quaisquer outras ramificações remotas rastreadas para 'origin' (o que você tem mas na "origin" não).

`git log master --not --remotes=*/master`::

	Exibe todos os commits que estão no "master" local, mas não em nenhuma outra ramificação "master" do repositório remoto.

`git log -p -m --first-parent`::

	EWxibe o histórico, incluindo as alterações dos diffs, porém apenas da perspectiva do ``ramo principal'', ignorando os commits provenientes da mesclagem das ramificações e exibindo os diffs completos das alterações introduzidas pelas mesclagens. Apenas faz sentido ao seguir uma política estrita de mesclar todos os tópicos das ramificações ao permanecer num único ramo integrado.

`git log -L '/int main/',/^}/:main.c`::

	Exibe como a função `main()` no arquivo `main.c` evoluiu ao longo do tempo.

`git log -3`::

	Limita a quantidade de commits a serem exibidos em 3.

DISCUSSÃO
---------

include::i18n.txt[]

CONFIGURAÇÃO
------------

Para configurações relacionadas com a geração de arquivos diferenciais "diff" consulte linkgit:git-diff[1], para as variáveis principais consulte linkgit:git-config[1].

format.pretty::
	É a opção predefinida para `--format`. (Consulte 'Formatos bonitos' acima.) A predefinição retorna para `medium`.

i18n.logOutputEncoding::
	Codificação que será utilizada para exibir os registros logs. (Consulte a 'Discussão' acima.) A predefinição retorna para o valor existente na opção de configuração `i18n.commitEncoding` caso seja definido, caso contrário, 'UTF-8'.

include::includes/cmd-config-section-rest.txt[]

include::config/log.txt[]

include::config/notes.txt[]

GIT
---
Parte do conjunto linkgit:git[1]
