git-log(1)
==========

NOME
----
git-log - Exibe os registros log do commit


RESUMO
------
[verse]
'git log' [<opções>] [<intervalo-das-revisões>] [[--] <caminho>...]

DESCRIÇÃO
---------
Exibe os registros log do commit.

:git-log: 1
include::rev-list-description.txt[]

O comando aceita as opções aplicáveis ao comando linkgit:git-rev-list[1] para controlar o que é exibido e como. As opções aplicáveis ao comando linkgit:git-diff[1] serve para controlar como as alterações que cada commit faz são exibidas.


OPÇÕES
------

--follow::
	Continue listando o histórico de um arquivo além de o renomear (funciona apenas para um único arquivo).

--no-decorate::
--decorate[=short|full|auto|no]::
	Print out the ref names of any commits that are shown. If 'short' is specified, the ref name prefixes 'refs/heads/', 'refs/tags/' and 'refs/remotes/' will not be printed. If 'full' is specified, the full ref name (including prefix) will be printed. If 'auto' is specified, then if the output is going to a terminal, the ref names are shown as if 'short' were given, otherwise no ref names are shown. The option `--decorate` is short-hand for `--decorate=short`. Default to configuration value of `log.decorate` if configured, otherwise, `auto`.

--decorate-refs=<padrão>::
--decorate-refs-exclude=<padrão>::
	Para cada referência de candidato, não o use para decoração caso ele coincida com algum padrão fornecido para a opção `--decorate-refs-exclude` ou caso não coincida com nenhum padrão fornecido para `--decorate-refs`. A opção de configuração `log.excludeDecoration` permite excluir as refs das decorações, porém um padrão explícito `--decorate-refs` será substituida caso coincida com `log.excludeDecoration`.
+
Caso nenhuma destas opções ou configurações sejam fornecidas, as referências serão usadas como decoração caso coincidam com `HEAD`, `refs/heads/`, `refs/remotes/`, `refs/stash/` ou `refs/tags /`.

--clear-decorations::
	Quando definido, esta opção limpa todas as opções anteriores `--decorate-refs` ou `--decorate-refs-exclude` e relaxa o filtro padrão de decoração para incluir todas as referências. Esta opção é assumida caso o valor de configuração `log.initialDecorationSet` seja definida como `all`.

--source::
	Exiba na tela o nome "ref" utilizado na linha de comando pela qual cada commit foi alcançado.

--[no-]mailmap::
--[no-]use-mailmap::
	Utilize o arquivo mailmap para mapear os nomes dos autores dos commits e seus endereços de e-mail para nomes e endereços de e-mail reais canônicos. Consulte linkgit:git-shortlog[1].

--full-diff::
	Without this flag, `git log -p <path>...` shows commits that touch the specified paths, and diffs about the same specified paths. With this, the full diff is shown for commits that touch the specified paths; this means that "<path>..." limits only commits, and doesn't limit diff for those commits.
+
Observe que isso afeta todos os tipos de saída baseados em "diff", por exemplo os produzidos pelas opções `--stat`, etc.

--log-size::
	Include a line ``log size <number>'' in the output for each commit, where <number> is the length of that commit's message in bytes. Intended to speed up tools that read log messages from `git log` output by allowing them to allocate space in advance.

include::line-range-options.txt[]

<revisão-faixa>::
	Show only commits in the specified revision range. When no <revision-range> is specified, it defaults to `HEAD` (i.e. the whole history leading to the current commit). `origin..HEAD` specifies all the commits reachable from the current commit (i.e. `HEAD`), but not from `origin`. For a complete list of ways to spell <revision-range>, see the 'Specifying Ranges' section of linkgit:gitrevisions[7].

[--] <caminho>...::
	Show only commits that are enough to explain how the files that match the specified paths came to be. See 'History Simplification' below for details and other simplification modes.
+
Os caminhos podem precisar ser prefixados com um `--` para separá-los das opções ou do intervalo de revisões, quando um conflito surgir.

include::rev-list-options.txt[]

include::pretty-formats.txt[]

FORMATAÇÃO DIFF
---------------

Por predefinição, o comando `git log` não gera qualquer diff. As opções abaixo podem ser usadas para exibir as alterações feitas por cada commit.

Note que a menos que uma das variantes `--diff-merges` (incluindo as opções curtas`-m`, `-c` e `--cc` e `--dd`) seja explicitamente informada, a mesclagem dos commits não mostrarão um diff, mesmo se um diff formato como `--patch` seja escolhido, nem corresponderá às opções de pesquisa como `-S`. A exceção é quando a opção `--first-parent` está em uso, neste caso`first-parent` é o formato predefinido para mesclar os commits.

:git-log: 1
:diff-merges-default: `off`
include::diff-options.txt[]

include::diff-generate-patch.txt[]

EXEMPLOS
--------
`git log --no-merges`::

	Exibe todo o histórico do commit, mas ignore todas as mesclagens

`git log v2.6.12.. include/scsi drivers/scsi`::

	Exibe todos os commits desde a versão 'v2.6.12' que alterou qualquer arquivo nos subdiretórios 'include/scsi' ou 'drivers/scsi'

`git log --since="2 weeks ago" -- gitk`::

	Show the changes during the last two weeks to the file 'gitk'. The `--` is necessary to avoid confusion with the *branch* named 'gitk'

`git log --name-status release..test`::

	Exibe os commits que estão no ramo "test", mas não ainda no ramo "release", junto com a lista dos caminhos que cada commit modifica.

`git log --follow builtin/rev-list.c`::

	Exibe os commits que mudaram o arquivo `builtin/rev-list.c`, incluindo os commits que ocorreram antes do arquivo receber o nome atual.

`git log --branches --not --remotes=origin`::

	Exibe todas os commits que estão em qualquer uma das ramificações locais, mas não em quaisquer outras ramificações remotas rastreadas para 'origin' (o que você tem mas na "origin" não).

`git log master --not --remotes=*/master`::

	Exibe todos os commits que estão no "master" local, mas não em nenhuma outra ramificação "master" do repositório remoto.

`git log -p -m --first-parent`::

	Shows the history including change diffs, but only from the ``main branch'' perspective, skipping commits that come from merged branches, and showing full diffs of changes introduced by the merges. This makes sense only when following a strict policy of merging all topic branches when staying on a single integration branch.

`git log -L '/int main/',/^}/:main.c`::

	Exibe como a função `main()` no arquivo `main.c` evoluiu ao longo do tempo.

`git log -3`::

	Limita a quantidade de commits a serem exibidos em 3.

DISCUSSÃO
---------

include::i18n.txt[]

CONFIGURAÇÃO
------------

Para configurações relacionadas com a geração de arquivos diferenciais "diff" consulte linkgit:git-diff[1], para as variáveis principais consulte linkgit:git-config[1].

format.pretty::
	Default for the `--format` option. (See 'Pretty Formats' above.) Defaults to `medium`.

i18n.logOutputEncoding::
	Encoding to use when displaying logs. (See 'Discussion' above.) Defaults to the value of `i18n.commitEncoding` if set, and UTF-8 otherwise.

include::includes/cmd-config-section-rest.txt[]

include::config/log.txt[]

include::config/notes.txt[]

GIT
---
Parte do conjunto linkgit:git[1]
