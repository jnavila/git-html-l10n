git-check-ignore(1)
===================

NOME
----
git-verifique-ignorar - Depure o gitignorar / excluir arquivos


RESUMO
------
[verse]
'git check-ignore' [<opções>] <pathname>...
'git check-ignore' [<opções>] --stdin

DESCRIÇÃO
---------

Para cada nome do caminho informado através da linha de comando ou de um arquivo via `--stdin`, verifique se o arquivo foi excluído por .gitignorar (ou outros arquivos de entrada para o mecanismo de exclusão) e imprima o caminho se ele for excluído.

Por padrão, os arquivos rastreados não são exibidos, pois não estão sujeitos a regras de exclusão. mas veja `--não-índice '.

OPÇÕES
------
-q, --quieto::
	Não produza nada, apenas defina a condição do encerramento. É válido apenas com um único nome do caminho.

-v, --verbose::
	Em vez de imprimir quais os caminhos foram excluídos, para cada caminho que coincida a um padrão de exclusão, imprima o padrão de exclusão junto com o caminho. (A correspondência da exclusão de um padrão geralmente significa que o caminho foi excluído, porém caso o padrão comece com "`!`", então é um padrão negado e a coincidência significa que o caminho NÃO é excluído.)
+
Para as regras da precedência dentro e entre as fontes eliminadas, consulte linkgit:gitignorar[5].

--stdin::
	Leia os nomes do caminho na entrada padrão, um por linha, em vez da linha de comando.

-z::
	O formato gerado é modificado para ser analisável pela máquina (veja abaixo). Caso o `--stdin` também seja informado, os caminhos da entrada serão separados por um caractere `NUL` em vez de um caractere de avanço de linha.

-n, --non-matching::
	Exiba os caminhos informados que não coincidam com qualquer padrão.	 Só faz sentido quando a opção `--verbose` está ativa, caso contrário não seria possível distinguir entre os caminhos que coincidem ou não com um padrão.

--no-index::
	Não procure no índice ao realizar as verificações. Pode ser utilizado para depurar o motivo de um caminho ter sido rastreado por ex. `git add .` e não foi ignorado pelas regras conforme o esperado pelo usuário ou ao desenvolver padrões incluindo a negação da coincidência a um caminho adicionado anteriormente com o comando `git add -f`.

SAÍDA
-----

É predefinido que será gerado qualquer um dos nomes do caminho informados que coincidam com um padrão para ser ignorado, um por linha. Caso nenhum padrão coincida com um determinado caminho, nada será gerado; significa que o caminho não será ignorado.

Caso a opção `--verbose` seja utilizada, a saída será uma série de linhas desta forma:

<fonte> <COLON> <linenum> <COLON> <padrão> <HT> <pathname>

<pathname> é o caminho de um arquivo que está sendo consultado, <padrão> é o padrão que será coincidido, <fonte> é o arquivo de origem do padrão e <linenum> é o número da linha do padrão nesta origem. Caso o padrão contenha um prefixo "`!`" Ou um sufixo "`/`", ele será preservado na saída. <fonte> será um caminho absoluto ao se referir ao arquivo configurado por `core.excludesFile`, ou relativo à raiz do repositório ao se referir a um `.git/info/exclude` ou a exclusão de um arquivo por diretório.

Caso `-z` seja utilizado, os nomes do caminho gerado são delimitados pelo caractere nulo; caso `--verbose` também seja utilizado, então os caracteres nulos também serão utilizados em vez das vírgulas e das guias rígidas:

<fonte> <NULL> <linenum> <NULL> <padrão> <NULL> <pathname> <NULL>

Caso `-n` ou `--nonnon-matching` sejam utilizados, os nomes do caminho que não coincidam também serão gerados; nesse caso, todos os campos de cada registro da saída, exceto o `<pathname>` que estará vazio. Pode ser útil ao ser executado de forma não interativa, para que os arquivos possam ser transmitidos incrementalmente para o `STDIN` de um longo processo de verificar/ignorar para cada um destes arquivos, o `STDOUT` indicará caso esse arquivo coincida ou não com um padrão. (Sem essa opção, seria impossível dizer se a ausência da saída para um determinado arquivo significava que não há coincidência com nenhum padrão ou que a saída ainda não havia sido gerada.)

A carga da memória intermédia (buffering) ocorre como foi documentada na opção `GIT_FLUSH` em linkgit:git[1]. O responsável pela chamada é aquele que evita que os bloqueios causados pelo preenchimento excessivo de uma memória intermédia na entrada ou pela leitura de uma memória intermédia vazia na saída.

CONDIÇÃO DE ENCERRAMENTO
------------------------

0::
	Um ou mais dos caminhos informados são ignorados.

1::
	Nenhum dos caminhos informados serão ignorados.

128::
	Um erro fatal foi encontrado.

VEJA TAMBÉM
-----------
linkgit:gitignore[5] linkgit:git-config[1] linkgit:git-ls-files[1]

GIT
---
Parte do conjunto linkgit:git[1]
