git-blame(1)
============

NOME
----
git-blame - Exiba qual revisão e qual foi o autor que alterou cada linha de um arquivo pela última vez

RESUMO
------
[verse]
'git blame' [-c] [-b] [-l] [--root] [-t] [-f] [-n] [-s] [-e] [-p] [-w] [--incremental]
	    [-L <faixa>] [-S <revs-file>] [-M] [-C] [-C] [-C] [--since=<data>]
	    [--ignore-rev <rev>] [--ignore-revs-file <arquivo>]
	    [--color-lines] [--color-by-age] [--progress] [--abbrev=<n>]
	    [ --contents <arquivo> ] [<rev> | --reverse <rev>..<rev>] [--] <arquivo>

DESCRIÇÃO
---------

Anota cada linha no arquivo informado com informações da revisão que modificou a linha pela última vez. Opcionalmente, comece a anotar a partir da revisão informada.

Quando informado uma ou mais vezes, a opção `-L` limita a anotação às linhas solicitadas.

A origem das linhas é seguida automaticamente pelas renomeações através de todos os arquivos (atualmente não há uma opção para desativar a presente renomeação). Para seguir as linhas movidas de um arquivo para outro ou para seguir as linhas que foram copiadas e coladas de um outro arquivo, etc., consulte as opções `-C` e `-M`.

O relatório não informa nada sobre quais as linhas foram eliminadas ou quais foram substituídas; é necessário utilizar uma ferramenta como "git diff" ou a interface "pickaxe" mencionada de forma breve no parágrafo seguinte.

Além de oferecer compatibilidade à anotação do arquivo, o Git também é compatível com a pesquisa no histórico do desenvolvimento para quando ocorra uma alteração num trecho do código. Isso torna possível o monitoramento quando um trecho do código for adicionado num arquivo, movido ou copiado entre os arquivos e eventualmente tenha sido excluído ou substituído. Funciona pesquisando uma sequência de texto no diff. Um pequeno exemplo da interface "pickaxe" que pesquisa por `blame_usage`:

-----------------------------------------------------------------------------
$ git log --pretty=oneline -S'blame_usage'
5040f17eba15504bad66b14a645bddd9b015ebb7 blame -S <ancestry-file>
ea4c7f9bf69e781dd0cd88d2bccb2bf5cc15c9a7 git-blame: Make the output
-----------------------------------------------------------------------------

OPÇÕES
------
include::blame-options.txt[]

-c::
	Utilize o mesmo modo de saída como o linkgit:git-annotate[1] (Predefinição: desligado).

--score-debug::
	Include debugging information related to the movement of lines between files (see `-C`) and lines moved within a file (see `-M`). The first number listed is the score. This is the number of alphanumeric characters detected as having been moved between or within files. This must be above a certain threshold for 'git blame' to consider those lines of code to have been moved.

-f::
--show-name::
	Show the filename in the original commit. By default the filename is shown if there is any line that came from a file with a different name, due to rename detection.

-n::
--show-number::
	Exiba o número da linha no commit original (Predefinição: desligado).

-s::
	Suprima o nome do autor e o registro de data e hora da saída.

-e::
--show-email::
	Show the author email instead of the author name (Default: off). This can also be controlled via the `blame.showEmail` config option.

-w::
	Ignore os espaços durante a comparação da versão das origens e seus herdeiros para descobrir de onde vieram as linhas.

--abbrev=<n>::
	Instead of using the default 7+1 hexadecimal digits as the abbreviated object name, use <m>+1 digits, where <m> is at least <n> but ensures the commit object names are unique. Note that 1 column is used for a caret to mark the boundary commit.


O FORMATO PADRÃO
----------------

Quando nenhuma opção `--porcelain` nem `--incremental` for definida, a opção `git blame` produzirá uma anotação para cada linha com:

- nome do objeto abreviado para o commit de onde a linha veio;
- identidade do autor (por padrão, o nome do autor e a data, a menos que `-s` ou `-e` seja usado); e
- número da linha

antes do conteúdo da linha.

O FORMATO PORCELANA
-------------------

Nesse formato, cada linha é enviada após um cabeçalho; o cabeçalho no mínimo tem a primeira linha que tem:

- 40-byte SHA-1 do commit da linha é atribuído a;
- o número da linha no arquivo original;
- o número da linha no arquivo final;
- on a line that starts a group of lines from a different commit than the previous one, the number of lines in this group. On subsequent lines this field is absent.

Esta linha de cabeçalho é seguida pelas seguintes informações por pelo menos uma vez para cada commit:

- o nome do autor ("autor"), email ("autor-mail"), tempo ("author-time") e o fuso horário ("autor-tz"); da mesma forma para quem realizou o commit.
- o nome do arquivo no commit ao qual a linha seja atribuída.
- a primeira linha da mensagem do registro log do commit ("resumo").

O conteúdo da linha real são gerados após o cabeçalho acima, prefixado por um TAB. Permite adicionar mais elementos de cabeçalho posteriormente.

The porcelain format generally suppresses commit information that has already been seen. For example, two lines that are blamed to the same commit will both be shown, but the details for that commit will be shown only once. This is more efficient, but may require more state be kept by the reader. The `--line-porcelain` option can be used to output full commit information for each line, allowing simpler (but less efficient) usage like:

	# conta a quantidade de linhas atribuídas para cada autor
	git blame --line-porcelain file |
	sed -n 's/^author //p' |
	sort | uniq -c | sort -rn


DEFININDO OS INTERVALOS
-----------------------

Ao contrário do comando 'git blame' e do 'git annotate' nas versões mais antigas do git, a extensão da anotação pode ser limitada a intervalos de linhas e de revisão. A opção `-L`, que limita a anotação a um intervalo de linhas, pode ser utilizada várias vezes.

Quando quiser encontrar a origem para as linhas 40-60 do arquivo `foo`, utilize a opção` -L` assim (eles significam a mesma coisa - ambos pedem 21 linhas iniciando na linha 40):

	git blame -L 40,60 foo
	git blame -L 40,+21 foo

Você tambem pode utilizar uma expressão regular para determinar o intervalo da linha:

	git blame -L '/^sub hello {/,/^}$/' foo

que limita a anotação ao corpo da sub-rotina `hello`.

Quando não quiser encontrar as alterações mais antigas que a versão v2.6.18 ou nas alterações anteriores a 3 semanas, utilize especificadores de intervalo da revisão similares ao 'git rev-list':

	git blame v2.6.18.. -- foo
	git blame --since=3.weeks -- foo

Quando os especificadores de intervalo da revisão forem utilizados para limitar a anotação, as linhas que não foram alteradas desde o limite do intervalo (seja o commit v2.6.18 ou o commit mais recente que seja 3 semanas mais antigo como no exemplo acima) são responsabilizadas por este limite do intervalo do commit.

A particularly useful way is to see if an added file has lines created by copy-and-paste from existing files. Sometimes this indicates that the developer was being sloppy and did not refactor the code properly. You can first find the commit that introduced the file with:

	git log --diff-filter=A --pretty=short -- foo

e então anote a alteração entre o commit e as suas origens, utilizando a notação `commit^!`:

	git blame -C -C -f $commit^! -- foo


SAÍDA INCREMENTAL
-----------------

When called with `--incremental` option, the command outputs the result as it is built. The output generally will talk about lines touched by more recent commits first (i.e. the lines will be annotated out of order) and is meant to be used by interactive viewers.

O formato da saída é semelhante ao formato Porcelana, mas não contém as linhas reais do arquivo que está sendo anotado.

. Cada entrada responsabilizada sempre começa com uma linha com:

	<40-byte-hex-sha1> <sourceline> <resultline> <num-lines>
+
Os números das linhas começam a contagem a partir do 1.

. A primeira vez que um commit é exibido no fluxo, ele contém várias outras informações sobre ele impressas com uma tag de uma palavra no início de cada linha, descrevendo as informações adicionais do commit (autor, e-mail, quem fez o commit, as datas, resumo, etc.).

. Ao contrário do formato Porcelana, as informações do nome do arquivo são sempre informadas e encerram a entrada:

	"nome do arquivo" <citação-do-nome-do-arquivo-com-espaço-em-branco-vai-aqui>
+
logo, é realmente muito fácil analisar alguma linha algo que seja orientado por palavra (que deve ser bastante natural para a maioria das linguagens de script).
+
[NOTE]
For people who do parsing: to make it more robust, just ignore any lines between the first and last one ("<sha1>" and "filename" lines) where you do not recognize the tag words (or care about that particular one) at the beginning of the "extended information" lines. That way, if there is ever added information (like the commit encoding or extended commit commentary), a blame viewer will not care.


MAPEANDO AUTORES
----------------

Consulte linkgit:gitmailmap[5].

CONFIGURAÇÃO
------------

include::includes/cmd-config-section-all.txt[]

include::config/blame.txt[]

VEJA TAMBÉM
-----------
linkgit:git-annotate[1]

GIT
---
Parte do conjunto linkgit:git[1]
