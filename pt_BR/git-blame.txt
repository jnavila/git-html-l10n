git-blame(1)
============

NOME
----
git-blame - Exiba qual revisão e qual foi o autor que alterou cada linha de
um arquivo pela última vez

SINOPSE
-------
[verse]
'git blame' [-c] [-b] [-l] [--root] [-t] [-f] [-n] [-s] [-e] [-p] [-w] [--incremental]
	    [-L <range>] [-S <revs-file>] [-M] [-C] [-C] [-C] [--since=<data>]
	    [--ignore-rev <rev>] [--ignore-revs-file <arquivo>]
	    [--progress] [--abbrev=<n>] [<rev> | --contents <arquivo> | --reverse <rev>..<rev>]
	    [--] <arquivo>

DESCRIÇÃO
---------

Anota cada linha no arquivo informado com informações da revisão que
modificou a linha pela última vez. Opcionalmente, comece a anotar a partir
da revisão informada.

Quando informado uma ou mais vezes, a opção `-L` limita a anotação às linhas
solicitadas.

A origem das linhas é seguida automaticamente pelas renomeações através de
todos os arquivos (atualmente não há uma opção para desativar a presente
renomeação). Para seguir as linhas movidas de um arquivo para outro ou para
seguir as linhas que foram copiadas e coladas de um outro arquivo, etc.,
consulte as opções `-C` e `-M`.

O relatório não informa nada sobre quais as linhas foram eliminadas ou quais
foram substituídas; é necessário utilizar uma ferramenta como "git diff" ou
a interface "pickaxe" mencionada de forma breve no parágrafo seguinte.

Além de oferecer compatibilidade à anotação do arquivo, o Git também é
compatível com a pesquisa no histórico do desenvolvimento para quando ocorra
uma alteração em um trecho do código. Isso torna possível o monitoramento
quando um trecho do código for adicionado em um arquivo, movido ou copiado
entre os arquivos e eventualmente tenha sido excluído ou
substituído. Funciona pesquisando uma sequência de texto no diff. Um pequeno
exemplo da interface "pickaxe" que pesquisa por `blame_usage`:

-----------------------------------------------------------------------------
$ git log --pretty=oneline -S'blame_usage'
5040f17eba15504bad66b14a645bddd9b015ebb7 blame -S <ancestry-file>
ea4c7f9bf69e781dd0cd88d2bccb2bf5cc15c9a7 git-blame: Make the output
-----------------------------------------------------------------------------

OPÇÕES
------
include::blame-options.txt[]

-c::
	Utilize o mesmo modo de saída como o linkgit:git-annotate[1] (Predefinição:
	desligado).

--score-debug::
	Inclua as informações de depuração relacionadas a movimentação das linhas
	entre os arquivos (consulte `-C`) e as linhas que foram movidas dentro de um
	arquivo (consulte `-M`).  O primeiro número listado é a pontuação.  Esta é a
	quantidade de caracteres alfanuméricos detectados como movidos entre os
	arquivos ou dentro deles.  Deve estar acima de um certo limite para que o
	comando 'git blame' considere que estas linhas do código tenham sido
	movidas.

-f::
--show-name::
	Exiba o nome do arquivo no commit original.  É predefinido que o nome do
	arquivo seja exibido caso haja alguma linha que tenha vindo de um arquivo
	com um nome diferente, devido à detecção de renomeação.

-n::
--show-number::
	Exiba o número da linha no commit original (Predefinição: desligado).

-s::
	Suprima o nome do autor e o registro de data e hora da saída.

-e::
--show-email::
	Exiba o endereço e-mail do autor em vez do se nome (Predefinição:
	desligado).  Também pode ser controlado através da opção da configuração
	`blame.showEmail`.

-w::
	Ignore os espaços em branco durante a comparação da versão das origens e
	seus herdeiros para descobrir de onde vieram as linhas.

--abbrev=<n>::
	Em vez de utilizar os dígitos 7+1 hexadecimais predefinidos como o nome
	abreviado do objeto, utilize <n>+1 dígitos. Observe que uma coluna é
	utilizada para um sinal de intercalação para marcar o limite do commit.


O FORMATO PORCELANA
-------------------

Nesse formato, cada linha é enviada após um cabeçalho; o cabeçalho no mínimo
tem a primeira linha que tem:

- 40-byte SHA-1 do commit da linha é atribuído a;
- o número da linha no arquivo original;
- o número da linha no arquivo final;
- em uma linha que inicie um grupo de linhas a partir de um commit diferente
  ao anterior, a quantidade de linhas neste grupo.  Nas linhas subsequentes
  este campo está ausente.

Esta linha de cabeçalho é seguida pelas seguintes informações por pelo menos
uma vez para cada commit:

- o nome do autor ("autor"), email ("autor-mail"), tempo ("author-time") e o
  fuso horário ("autor-tz"); da mesma forma para quem realizou o commit.
- o nome do arquivo no commit ao qual a linha seja atribuída.
- a primeira linha da mensagem do registro log do commit ("resumo").

O conteúdo da linha real é gerado após o cabeçalho acima, prefixado por um
TAB. Permite adicionar mais elementos de cabeçalho posteriormente.

O formato porcelana geralmente suprime as informações dos commits que já
foram vistos. Duas linhas forem atribuídos ao mesmo commit serão exibidos,
porém os detalhes deste commit serão exibidos apenas uma vez por exemplo. É
mais eficiente porém pode exigir que mais condições sejam mantidos pelo
leitor. A opção `--line-porcelain` pode ser utilizado para gerar informações
completas do commit em cada linha, permitindo um uso mais simples (porém
menos eficiente), como:

	# conta a quantidade de linhas atribuídas para cada autor
	git blame --line-porcelain file |
	sed -n 's/^author //p' |
	sort | uniq -c | sort -rn


ESPECIFICANDO OS INTERVALOS
---------------------------

Ao contrário do comando 'git blame' e do 'git annotate' nas versões mais
antigas do git, a extensão da anotação pode ser limitada a intervalos de
linhas e de revisão. A opção `-L`, que limita a anotação a um intervalo de
linhas, pode ser utilizada várias vezes.

Quando quiser encontrar a origem para as linhas 40-60 do arquivo `foo`,
utilize a opção` -L` assim (eles significam a mesma coisa - ambos pedem 21
linhas iniciando na linha 40):

	git blame -L 40,60 foo
	git blame -L 40,+21 foo

Você tambem pode utilizar uma expressão regular para determinar o intervalo
da linha:

	git blame -L '/^sub hello {/,/^}$/' foo

que limita a anotação ao corpo da sub-rotina `hello`.

Quando não quiser encontrar as alterações mais antigas que a versão v2.6.18
ou nas alterações anteriores a 3 semanas, utilize especificadores de
intervalo da revisão similares ao 'git rev-list':

	git blame v2.6.18.. -- foo
	git blame --since=3.weeks -- foo

Quando os especificadores de intervalo da revisão forem utilizados para
limitar a anotação, as linhas que não foram alteradas desde o limite do
intervalo (seja o commit v2.6.18 ou o commit mais recente que seja 3 semanas
mais antigo como no exemplo acima) são responsabilizadas por este limite do
intervalo do commit.

Uma maneira particularmente útil é verificar se um arquivo que foi
adicionado possua linhas criadas através de um copiar e colar vindos dos
arquivos já existentes.  Às vezes isso indica que o desenvolvedor estava
sendo desleixado e não reorganizou o código corretamente.  Você pode
encontrar primeiro o commit que introduziu o arquivo com o comando:

	git log --diff-filter=A --pretty=short -- foo

e então anote a alteração entre o commit e as suas origens, utilizando a
notação `commit^!`:

	git blame -C -C -f $commit^! -- foo


SAÍDA INCREMENTAL
-----------------

Quando invocado com a opção `--incremental`, o comando gera o resultado
conforme ele foi construído.  A saída geralmente fala sobre as linhas
tocadas pelos commits mais recentes primeiro (ou seja, as linhas serão
anotadas fora de ordem) e deve ser utilizado por visualizadores interativos.

O formato da saída é semelhante ao formato Porcelana, mas não contém as
linhas reais do arquivo que está sendo anotado.

. Cada entrada responsabilizada sempre começa com uma linha com:

	<40-byte hex sha1> <sourceline> <resultline> <num_lines>
+
Os números das linhas começam a contagem a partir do 1.

. A primeira vez que um commit é exibido no fluxo, ele contém várias outras
  informações sobre ele impressas com uma tag de uma palavra no início de cada
  linha, descrevendo as informações adicionais do commit (autor, e-mail, quem
  fez o commit, as datas, resumo, etc.).

. Ao contrário do formato Porcelana, as informações do nome do arquivo são
  sempre informadas e encerram a entrada:

	"nome do arquivo" <citação-do-nome-do-arquivo-com-espaço-em-branco-vai-aqui>
+
logo, é realmente muito fácil analisar alguma linha algo que seja orientado
por palavra (que deve ser bastante natural para a maioria das linguagens de
script).
+
[NOTE]
Para pessoas que fazem a analise: para torná-lo mais robusto, ignore todas
as linhas entre a primeira e a última (linhas "<sha1>" e "filename") nas
quais você não reconheça as palavras-chave (ou se preocupe com uma em
particular) no início das linhas com "informações estendidas". Dessa forma,
caso alguma vez haja informações que foram adicionadas (como a codificação
do commit ou o comentário estendido do commit), um "blame viewer" não irá se
importar.


MAPEANDO AUTORES
----------------

include::mailmap.txt[]


VEJA TAMBÉM
-----------
linkgit:git-annotate[1]

GIT
---
Parte do conjunto linkgit:git[1]
