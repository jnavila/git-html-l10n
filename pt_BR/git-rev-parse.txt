git-rev-parse(1)
================

NOME
----
git-rev-parse - Escolha e trabalhe os parâmetros


RESUMO
------
[verse]
'git rev-parse' [<opções>] <args>...

DESCRIÇÃO
---------

Many Git porcelainish commands take a mixture of flags (i.e. parameters that begin with a dash '-') and parameters meant for the underlying 'git rev-list' command they use internally and flags and parameters for the other commands they use downstream of 'git rev-list'. This command is used to distinguish between them.


OPÇÕES
------

Modos de Operação
~~~~~~~~~~~~~~~~~

Cada uma destas opções deve aparecer primeiro na linha de comando.

--parseopt::
	Utilize o comando 'git rev-parse' no modo de análise de opções (consulte a seção "PARSEOPT" abaixo).

--sq-quote::
	Utilize o comando 'git rev-parse' em modo de citação shell (consulte a seção "SQ-QUOTE" abaixo). Ao contrário da opção `--sq` abaixo, este modo apenas cita. Nada mais é feito para comandar a entrada.

As opções para `--parseopt`
~~~~~~~~~~~~~~~~~~~~~~~~~~~

--keep-dashdash::
	Apenas faz sentido no modo `--parseopt`. Informa ao analisador das opções para ecoar o primeiro `--` encontrado em vez de ignorá-lo.

--stop-at-non-option::
	Only meaningful in `--parseopt` mode. Lets the option parser stop at the first non-option argument. This can be used to parse sub-commands that take options themselves.

--stuck-long::
	Apenas faz sentido no modo `--parseopt`. Gere as opções em sua forma longa, caso estejam disponíveis, e com os seus argumentos bloqueados.

Opções para a filtragem
~~~~~~~~~~~~~~~~~~~~~~~

--revs-only::
	Não produza opções e parâmetros não destinados ao comando 'git rev-list'.

--no-revs::
	Não produza opções e parâmetros destinados ao comando 'git rev-list'.

--flags::
	Não produza parâmetros que não sejam opções.

--no-flags::
	Não gere parâmetros para opções.

Opções para a Saída
~~~~~~~~~~~~~~~~~~~

--default <arg>::
	Caso não haja nenhum parâmetro informado pelo usuário, em vez disso utilize `<arg>`.

--prefix <arg>::
	Behave as if 'git rev-parse' was invoked from the `<arg>` subdirectory of the working tree. Any relative filenames are resolved as if they are prefixed by `<arg>` and will be printed in that form.
+
This can be used to convert arguments to a command run in a subdirectory so that they can still be used after moving to the top-level of the repository. For example:
+
----
prefix=$(git rev-parse --show-prefix)
cd "$(git rev-parse --show-toplevel)"
# rev-parse provides the -- needed for 'set'
eval "set $(git rev-parse --sq --prefix "$prefix" -- "$@")"
----

--verify::
	Verifique que exatamente um parâmetro seja informado e se pode ser transformado num SHA-1 com 20 bytes brutos, que possa ser utilizado para acessar o banco de dados do objeto. Em caso positivo, emita-o para a saída padrão; caso contrário, gere um erro.
+
If you want to make sure that the output actually names an object in your object database and/or can be used as a specific type of object you require, you can add the `^{type}` peeling operator to the parameter. For example, `git rev-parse "$VAR^{commit}"` will make sure `$VAR` names an existing object that is a commit-ish (i.e. a commit, or an annotated tag that points at a commit). To make sure that `$VAR` names an existing object of any type, `git rev-parse "$VAR^{object}"` can be used.
+
Note que se você estiver verificando um nome de uma fonte não confiável, é prudente usar a opção `--end-of-options` para que o argumento relacionado ao nome não seja confundido com uma outra opção.

-q::
--quiet::
	Only meaningful in `--verify` mode. Do not output an error message if the first argument is not a valid object name; instead exit with non-zero status silently. SHA-1s for valid object names are printed to stdout on success.

--sq::
	Usually the output is made one line per flag and parameter. This option makes output a single line, properly quoted for consumption by shell. Useful when you expect your parameter to contain whitespaces and newlines (e.g. when using pickaxe `-S` with 'git diff-{asterisk}'). In contrast to the `--sq-quote` option, the command input is still interpreted as usual.

--short[=length]::
	O mesmo que `--verify` porém encurta o nome do objeto para um prefixo único com pelo menos um`comprimento` determinado de caracteres. A quantidade mínima é de 4 caracteres, o valor é predefinido na variável de configuração `core.abbrev` (consulte linkgit:git-config[1]).

--not::
	Ao exibir os nomes dos objetos, prefixe-os com '{caret}' e retire o prefixo '{caret}' dos nomes dos objetos que já possuam um.

--abbrev-ref[=(strict|loose)]::
	A non-ambiguous short name of the objects name. The option core.warnAmbiguousRefs is used to select the strict abbreviation mode.

--symbolic::
	Normalmente, os nomes dos objetos são emitidos em formato SHA-1 (com possível prefixo '{caret}'); essa opção faz com que eles sejam impressos o mais próximo possíveis da entrada original.

--symbolic-full-name::
	É semelhante ao `--symbolic`, porém omite a entrada que não seja uma refs (por exemplo, os nomes dos ramos ou tags; ou de uma forma explicitamente desambiguante "heads/master", quando você quer nomear a o ramo "master" quando houver uma tag com o nome "master") e mostre-os como "refnames" completos (por exemplo, "refs/heads/master").

Opções para os Objetos
~~~~~~~~~~~~~~~~~~~~~~

--all::
	Exibe todas as refs encontradas em `refs/`.

--branches[=pattern]::
--tags[=pattern]::
--remotes[=pattern]::
	Exibe todos as ramificações, tags ou ramificações monitoradas remotamente, respectivamente (ou seja, as refs encontradas respectivamente em `refs/heads`, `refs/tags` ou `refs/remotes`).
+
If a `pattern` is given, only refs matching the given shell glob are shown. If the pattern does not contain a globbing character (`?`, `*`, or `[`), it is turned into a prefix match by appending `/*`.

--glob=pattern::
	Show all refs matching the shell glob pattern `pattern`. If the pattern does not start with `refs/`, this is automatically prepended. If the pattern does not contain a globbing character (`?`, `*`, or `[`), it is turned into a prefix match by appending `/*`.

--exclude=<glob-pattern>::
	Não inclua as refs que coincidam com `<glob-pattern>` em que as próximas opções `--all`, `--branches`, `--tags`, `--remotes` ou `--glob` considerariam de outra forma. As repetições destas opções acumulam padrões de exclusão até a próxima opção `--all`, `--branches`, `--tags`, `--remotes` ou `--glob` (outras opções ou argumentos não limpam os padrões acumulados).
+
Os padrões informados não devem começar com `refs/heads`, `refs/tags`, ou `refs/remotes` quando aplicadas as opções `--branches`, `--tags`, ou `--remotes` respectivamente, e devem começar com `refs/` quando for aplicado ao `--glob` ou `--all`. Se a intenção for um delimitador '/{asterisco}', este deve ser utilizado de forma explicita.

--exclude-hidden=[fetch|receive|uploadpack]::
	Não inclua refs que seriam ocultados por `git-fetch`, `git-receive-pack` ou `git-upload-pack` durante a consulta da configuração apropriada de `fetch.hideRefs`, `receive.hideRefs` ou `uploadpack.hideRefs` junto com `transfer.hideRefs` (consulte linkgit:git-config[1]). Esta opção afeta a próxima opção pseudo-ref `--all` ou `--glob` e é zerada após o processamento.

--disambiguate=<prefixo>::
	Show every object whose name begins with the given prefix. The <prefix> must be at least 4 hexadecimal digits long to avoid listing each and every object in the repository by mistake.

Opções para os Arquivos
~~~~~~~~~~~~~~~~~~~~~~~

--local-env-vars::
	List the GIT_* environment variables that are local to the repository (e.g. GIT_DIR or GIT_WORK_TREE, but not GIT_EDITOR). Only the names of the variables are listed, not their value, even if they are set.

--path-format=(absolute|relative)::
	Controls the behavior of certain other options. If specified as absolute, the paths printed by those options will be absolute and canonical. If specified as relative, the paths will be relative to the current working directory if that is possible. The default is option specific.
+
Esta opção pode ser usada várias vezes e afeta apenas os argumentos seguintes na linha de comando, seja no final da linha de comando ou na próxima instância desta opção.

As seguintes opções são modificadas pela opção `--path-format`:

--git-dir::
	Exibe o `$GIT_DIR` caso seja definido. Caso contrário, exibe o caminho para o diretório .git. O caminho exibido, quando relativo, é relativo ao diretório de trabalho atual.
+
Caso o `$GIT_DIR` não esteja definido e o diretório atual não for detectado como estando num repositório Git ou na árvore de trabalho, imprima uma mensagem para stderr e encere com uma condição diferente de zero.

--git-common-dir::
	Exibe o `$GIT_COMMON_DIR` caso seja definido, senão `$GIT_DIR`.

--resolve-git-dir <caminho>::
	Check if <path> is a valid repository or a gitfile that points at a valid repository, and print the location of the repository. If <path> is a gitfile then the resolved path to the real repository is printed.

--git-path <caminho>::
	Resolva "$GIT_DIR/<caminho>" e leve em consideração as outras variáveis de realocação do caminho, como `$GIT_OBJECT_DIRECTORY`, `$GIT_INDEX_FILE`, etc. Caso `$GIT_OBJECT_DIRECTORY` seja definido para '/foo/bar' por exemplo, então o comando "git rev-parse --git-path objects/abc" returna '/foo/bar/abc'.

--show-toplevel::
	Mostra o caminho (absoluto) do cume do diretório da árvore de trabalho. Caso não haja uma árvore de trabalho, relate um erro.

--show-superproject-working-tree::
	Show the absolute path of the root of the superproject's working tree (if exists) that uses the current repository as its submodule. Outputs nothing if the current repository is not used as a submodule by any project.

--shared-index-path::
	Exibe o caminho para o arquivo do índice compartilhado no modo de índice dividido ou vazio caso não esteja no modo do índice dividido.

As seguintes opções não são afetadas pela opção `--path-format`:

--absolute-git-dir::
	Como `--git-dir`, porém sua saída é sempre o caminho absoluto canonizado.

--is-inside-git-dir::
	Quando o diretório de trabalho atual estiver abaixo do diretório do repositório, imprima 'true', caso contrário, 'false'.

--is-inside-work-tree::
	Quando o diretório de trabalho atual estiver dentro da árvore de trabalho do repositório, imprima 'true', caso contrário, 'false'.

--is-bare-repository::
	Quando o repositório for simples imprima 'true', caso contrário 'false'.

--is-shallow-repository::
	Quando o repositório é raso, imprima 'true', caso contrário, 'false'.

--show-cdup::
	Quando o comando é chamado a partir de um subdiretório, exiba o caminho do diretório do nível mais alto em relação ao diretório atual (geralmente uma sequência de "../" ou uma sequência vazia).

--show-prefix::
	Quando o comando é invocado a partir de um subdiretório, exiba o caminho do diretório atual em relação ao nível mais alto do diretório.

--show-object-format[=(storage|input|output)]::
	Show the object format (hash algorithm) used for the repository for storage inside the `.git` directory, input, or output. For input, multiple algorithms may be printed, space-separated. If not specified, the default is "storage".

--show-ref-format::
	Show the reference storage format used for the repository.


Outras Opções
~~~~~~~~~~~~~

--since=datestring::
--after=datestring::
	Analise a cadeia de caracteres da data e exiba o parâmetro --max-age= correspondente para 'git rev-list'.

--until=datestring::
--before=datestring::
	Analise a cadeia de caracteres da data e exiba o parâmetro --min-age= que corresponda para o 'git rev-list'.

<args>...::
	As opções e os parâmetros que serão analisados.


include::revisions.txt[]

PARSEOPT
--------

No modo `--parseopt`, o comando 'git rev-parse' ajuda no processamento das opções trazendo aos scripts shell as mesmas facilidades integradas que o 'C' possuí. Funciona como um normalizador das opções (por exemplo, divide trocas únicas com valores agregados), quase como o que o `getopt(1)` faz.

It takes on the standard input the specification of the options to parse and understand, and echoes on the standard output a string suitable for `sh(1)` `eval` to replace the arguments with normalized ones. In case of error, it outputs usage on the standard error stream, and exits with code 129.

Note: Make sure you quote the result when passing it to `eval`. See below for an example.

Formato de Entrada
~~~~~~~~~~~~~~~~~~

'git rev-parse --parseopt' input format is fully text based. It has two parts, separated by a line that contains only `--`. The lines before the separator (should be one or more) are used for the usage. The lines after the separator describe the options.

As opções de cada linha possui este formato:

------------
<opt-spec><flags>*<arg-hint>? SP+ help LF
------------

`<opt-spec>`::
	its format is the short option character, then the long option name separated by a comma. Both parts are not required, though at least one is necessary. May not contain any of the `<flags>` characters. `h,help`, `dry-run` and `f` are examples of correct `<opt-spec>`.

`<flags>`::
	`<flags>` são do `*`, `=`, `?` ou `!`.
	* Utilize `=` caso a opção receba um argumento.

	* Utilize `?` para dar sentido que a opção aceita um argumento opcional. Você provavelmente quer utilzar o modo `--stuck-long` para poder analisar de forma inequívoca o argumento opcional.

	* Utilize `*` para indicar que esta opção não deve ser listada no uso gerado para a opção `-h`. É exibido para `--help-all` conforme documentado em linkgit:gitcli[7].

	* Utilize `!` para não fazer com que a opção longa que foi negada esteja disponível.

`<arg-hint>`::
	`<arg-hint>`, if specified, is used as a name of the argument in the help output, for options that take arguments. `<arg-hint>` is terminated by the first whitespace. It is customary to use a dash to separate words in a multi-word argument hint.

O restante da linha, depois dos espaços removidos, é usado como ajuda associada à opção.

As linhas em branco são ignoradas e as linhas que não coincidam com esta especificação são utilizadas como cabeçalhos dos grupos das opções (inicie a linha com um espaço para criar essas linhas de propósito).

Exemplo
~~~~~~~

------------
OPTS_SPEC="\
algum-comando [<opções>] <args>...

algum-comando faz 'foo' e 'bar'!
--
h,help! show the help

foo some nifty option --foo bar= some cool option --bar with an argument baz=arg another cool option --baz with a named argument qux?path qux may take a path argument but has meaning by itself

  Um cabeçalho do grupo de opções
C?        opção 'C' com um argumento opcional"

eval "$(echo "$OPTS_SPEC" | git rev-parse --parseopt -- "$@" || echo exit $?)"
------------


Texto de uso
~~~~~~~~~~~~

Quando `"$@"` is `-h` ou `--help` no exemplo acima, o seguinte texto de utilização será exibido:

------------
utilização: algum-comando [<opções>] <args>...

    algum-comando faz 'foo' e 'bar'!

    -h, --help            exibe a ajuda
    --[no-]foo                 alguma opção bacana --foo
    --[no-]bar ...        alguma opção legal --bar com um argumento
    --[no-]baz <arg>      outra opção legal --baz com um determinado argumento
    --[no-]qux[=<caminho>]   o qux pode utilizar um argumento para o caminho mas significa ele mesmo

Um cabeçalho do grupo de opções
    -C[...]               opção C com um argumento opcional
------------

SQ-QUOTE
--------

No modo `--sq-quote`, o comando 'git rev-parse' ecoa na saída padrão uma única linha adequada para `sh (1)` `eval`. Esta linha é feita normalizando os argumentos após a opção `--sq-quote`. Nada mais é feito além de citar os argumentos.

Caso queira que o comando de entrada ainda seja interpretada como de costume pelo comando `git rev-parse` antes da saída ser citada pela shell, consulte a opção `--sq`.

Exemplo
~~~~~~~

------------
$ cat >your-git-script.sh <<\EOF
#!/bin/sh
args=$(git rev-parse --sq-quote "$@")   # cita os argumentos utilizados pelo usuário
command="git frotz -n24 $args"          # e utilize-o dentro de uma
					# linha de comando artesanal
eval "$command"
EOF

$ sh your-git-script.sh "a b'c"
------------

EXEMPLOS
--------

* Imprima o nome do objeto do commit atual:
+
------------
$ git rev-parse --verify HEAD
------------

* Imprima o nome do objeto do commit a partir da revisão na variável shell '$REV':
+
------------
$ git rev-parse --verify --end-of-options $REV^{commit}
------------
+
Isso causará um erro caso '$REV' esteja vazio ou não seja uma revisão válida.

* Semelhante ao acima:
+
------------
$ git rev-parse --default master --verify --end-of-options $REV
------------
+
porém caso '$REV' esteja vazia, o nome do objeto do commit vindo do "master" será impresso.

GIT
---
Parte do conjunto linkgit:git[1]
