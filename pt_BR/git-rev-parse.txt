git-rev-parse(1)
================

NOME
----
git-rev-parse - Escolha e trabalhe os parâmetros


RESUMO
------
[verse]
'git rev-parse' [<opções>] <args>...

DESCRIÇÃO
---------

Muitos comandos porcelana do Git utilizam uma mistura de opções (ou seja, parâmetros que começam com um traço '-') e os parâmetros destinados ao comando 'git rev-list' subjacente que eles utilizam internamente, as opções e os parâmetros para os outros comandos que utilizam na produção final do 'git rev-list '. Este comando é utilizado para se distinguir entre eles.


OPÇÕES
------

Modos de Operação
~~~~~~~~~~~~~~~~~

Cada uma destas opções deve aparecer primeiro na linha de comando.

--parseopt::
	Utilize o comando 'git rev-parse' no modo de análise de opções (consulte a seção "PARSEOPT" abaixo).

--sq-quote::
	Utilize o comando 'git rev-parse' em modo de citação shell (consulte a seção "SQ-QUOTE" abaixo). Ao contrário da opção `--sq` abaixo, este modo apenas cita. Nada mais é feito para comandar a entrada.

As opções para `--parseopt`
~~~~~~~~~~~~~~~~~~~~~~~~~~~

--keep-dashdash::
	Apenas faz sentido no modo `--parseopt`. Informa ao analisador das opções para ecoar o primeiro `--` encontrado em vez de ignorá-lo.

--stop-at-non-option::
	Apenas faz sentido no modo `--parseopt`. Permite que o analisador de opções pare no primeiro argumento sem opção. Pode ser usado para analisar os subcomandos que aceitam essas opções.

--stuck-long::
	Apenas faz sentido no modo `--parseopt`. Gere as opções em sua forma longa, caso estejam disponíveis, e com os seus argumentos bloqueados.

Opções para a filtragem
~~~~~~~~~~~~~~~~~~~~~~~

--revs-only::
	Não produza opções e parâmetros não destinados ao comando 'git rev-list'.

--no-revs::
	Não produza opções e parâmetros destinados ao comando 'git rev-list'.

--flags::
	Não produza parâmetros que não sejam opções.

--no-flags::
	Não gere parâmetros para opções.

Opções para a Saída
~~~~~~~~~~~~~~~~~~~

--default <arg>::
	Caso não haja nenhum parâmetro informado pelo usuário, em vez disso utilize `<arg>`.

--prefix <arg>::
	Comporte-se como se o comando 'git rev-parse' fosse invocado no subdiretório `<arg>` da árvore de trabalho. Quaisquer nomes dos arquivos relativos são resolvidos como se fossem prefixados através do `<arg>` e serão impressos neste formulário.
+
Pode ser utilizado para converter os argumentos em um comando executado-o em um subdiretório para que eles ainda possam ser utilizados após a mudança para o nível mais alto do repositório. Por exemplo:
+
----
prefix=$(git rev-parse --show-prefix)
cd "$(git rev-parse --show-toplevel)"
# rev-parse provides the -- needed for 'set'
eval "set $(git rev-parse --sq --prefix "$prefix" -- "$@")"
----

--verify::
	Verifique que exatamente um parâmetro seja informado e se pode ser transformado em um SHA-1 com 20 bytes brutos, que possa ser utilizado para acessar o banco de dados do objeto. Em caso positivo, emita-o para a saída padrão; caso contrário, gere um erro.
+
Caso queira garantir que a saída realmente nomeie um objeto no banco de dados dos objetos e/ou possam ser utilizados como um tipo específico que você precisa, é possível adicionar o operador de remoção `^{type}` ao parâmetro. Por exemplo, `git rev-parse" $VAR^{commit}"` garantirá que `$VAR` nomeie um objeto já existente que seja um "commit-ish" (ou seja, um commit ou uma tag anotada que aponte para um commit). Para garantir que o '$VAR` nomeie um objeto já existente de qualquer tipo, `git rev-parse "$VAR^{object}"` pode ser utilizado.
+
Note that if you are verifying a name from an untrusted source, it is wise to use `--end-of-options` so that the name argument is not mistaken for another option.

-q::
--quiet::
	Apenas faz sentido no modo `--verify`. Não produza uma mensagem de erro caso o primeiro argumento não for um nome válido do objeto; em vez disso, encerre com uma condição diferente de zero silenciosamente. O SHA-1 para os objetos com nomes válidos que são impressos com êxito no stdout.

--sq::
	Normalmente, a saída é feita uma linha por opção e parâmetro. Esta opção gera a saída em uma única linha, devidamente citada para utilização do shell. Útil quando você espera que o seu parâmetro contenha espaços e novas linhas (por exemplo, ao utilizar a picareta `S` com 'git diff-{asterisk}'). Ao contrário da opção `--sq-quote`, a entrada do comando ainda é interpretada como de costume.

--short[=comprimento]::
	O mesmo que `--verify` porém encurta o nome do objeto para um prefixo único com pelo menos um`comprimento` determinado de caracteres. A quantidade mínima é de 4 caracteres, o valor é predefinido na variável de configuração `core.abbrev` (consulte linkgit:git-config[1]).

--not::
	Ao exibir os nomes dos objetos, prefixe-os com '{caret}' e retire o prefixo '{caret}' dos nomes dos objetos que já possuam um.

--abbrev-ref[=(strict|loose)]::
	Para um nome abreviado não ambíguo dos nomes dos objetos. A opção `core.warnAmbiguousRefs` é utilizada para selecionar o modo estrito da abreviação.

--symbolic::
	Normalmente, os nomes dos objetos são emitidos em formato SHA-1 (com possível prefixo '{caret}'); essa opção faz com que eles sejam impressos o mais próximo possíveis da entrada original.

--symbolic-full-name::
	É semelhante ao `--symbolic`, porém omite a entrada que não seja uma refs (por exemplo, os nomes dos ramos ou tags; ou de uma forma explicitamente desambiguante "heads/master", quando você quer nomear a o ramo "master" quando houver uma tag com o nome "master") e mostre-os como "refnames" completos (por exemplo, "refs/heads/master").

Opções para os Objetos
~~~~~~~~~~~~~~~~~~~~~~

--all::
	Exibe todas as refs encontradas em `refs/`.

--branches[=pattern]::
--tags[=padrão]::
--remotes[=padrão]::
	Exibe todos as ramificações, tags ou ramificações monitoradas remotamente, respectivamente (ou seja, as refs encontradas respectivamente em `refs/heads`, `refs/tags` ou `refs/remotes`).
+
Caso um `padrão` seja informado, apenas as refs coincidentes com o "shell glob" são exibidos. Caso o padrão não contenha um caractere curinga (`?`, `*` ou `[`), este será transformado em um prefixo correspondente ao acrescentar `/*`.

--glob=pattern::
	Exiba todos os árbitros que coincidam com o `padrão` (pattern) do "glob". Caso o padrão não comece com `refs /`, isto será anexado automaticamente. Caso o padrão não contenha um caractere curinga (`?`, `*` ou `[`), este será transformado em um prefixo correspondente ao acrescentar `/*`.

--exclude=<glob-pattern>::
	Não inclua as refs que coincidam com `<glob-pattern>` em que as próximas opções `--all`, `--branches`, `--tags`, `--remotes` ou `--glob` considerariam de outra forma. As repetições destas opções acumulam padrões de exclusão até a próxima opção `--all`, `--branches`, `--tags`, `--remotes` ou `--glob` (outras opções ou argumentos não limpam os padrões acumulados).
+
Os padrões informados não devem começar com `refs/heads`, `refs/tags`, ou `refs/remotes` quando aplicadas as opções `--branches`, `--tags`, ou `--remotes` respectivamente, e devem começar com `refs/` quando for aplicado ao `--glob` ou `--all`. Se a intenção for um delimitador '/{asterisco}', este deve ser utilizado de forma explicita.

--disambiguate=<prefixo>::
	Exiba todos os objetos cujo nome começa com o prefixo informado. O `<prefixo>` deve ter pelo menos 4 dígitos hexadecimais para evitar ter que listar por engano todos os objetos no repositório.

Opções para os Arquivos
~~~~~~~~~~~~~~~~~~~~~~~

--local-env-vars::
	Liste as variável de ambiente do GIT_* que são locais no repositório (`GIT_DIR` ou `GIT_WORK_TREE`, mas não o `GIT_EDITOR` por exemplo). Somente os nomes das variáveis são listadas, não o seu valor, mesmo que estejam definidos.

--git-dir::
	Exibe o `$GIT_DIR` caso seja definido. Caso contrário, exibe o caminho para o diretório .git. O caminho exibido, quando relativo, é relativo ao diretório de trabalho atual.
+
Caso o `$GIT_DIR` não esteja definido e o diretório atual não for detectado como estando em um repositório Git ou na árvore de trabalho, imprima uma mensagem para stderr e encere com uma condição diferente de zero.

--absolute-git-dir::
	Como `--git-dir`, porém sua saída é sempre o caminho absoluto canonizado.

--git-common-dir::
	Exibe o `$GIT_COMMON_DIR` caso seja definido, senão `$GIT_DIR`.

--is-inside-git-dir::
	Quando o diretório de trabalho atual estiver abaixo do diretório do repositório, imprima 'true', caso contrário, 'false'.

--is-inside-work-tree::
	Quando o diretório de trabalho atual estiver dentro da árvore de trabalho do repositório, imprima 'true', caso contrário, 'false'.

--is-bare-repository::
	Quando o repositório for simples imprima 'true', caso contrário 'false'.

--is-shallow-repository::
	Quando o repositório é raso, imprima 'true', caso contrário, 'false'.

--resolve-git-dir <caminho>::
	Verifique se o <caminho> é um repositório válido ou um 'gitfile' que aponte para um repositório válido e imprima o local do repositório. Caso o <caminho> seja um gitfile, o caminho resolvido para o repositório real será impresso.

--git-path <caminho>::
	Resolva "$GIT_DIR/<caminho>" e leve em consideração as outras variáveis de realocação do caminho, como `$GIT_OBJECT_DIRECTORY`, `$GIT_INDEX_FILE`, etc. Caso `$GIT_OBJECT_DIRECTORY` seja definido para '/foo/bar' por exemplo, então o comando "git rev-parse --git-path objects/abc" returna '/foo/bar/abc'.

--show-cdup::
	Quando o comando é chamado a partir de um subdiretório, exiba o caminho do diretório do nível mais alto em relação ao diretório atual (geralmente uma sequência de "../" ou uma sequência vazia).

--show-prefix::
	Quando o comando é invocado a partir de um subdiretório, exiba o caminho do diretório atual em relação ao nível mais alto do diretório.

--show-toplevel::
	Exibe o caminho absoluto do diretório no nível mais da árvore de trabalho. Caso não haja uma árvore em funcionamento, relate um erro.

--show-superproject-working-tree::
	Exibe o caminho absoluto da raiz da árvore de trabalho do superprojeto (caso exista) que usa o repositório atual como sendo o seu submódulo. Não produz nada caso o repositório atual não eja usado como um submódulo por nenhum projeto.

--shared-index-path::
	Exibe o caminho para o arquivo do índice compartilhado no modo de índice dividido ou vazio caso não esteja no modo do índice dividido.

--show-object-format[=(storage|input|output)]::
	Exiba o formato do objeto (algoritmo hash) usado no repositório para o armazenamento dentro do diretório `.git`, entrada ou saída. Para a entrada, vários algoritmos podem ser impressos, separados por espaço. Caso não seja definido, a predefinição retorna para "storage".


Outras Opções
~~~~~~~~~~~~~

--since=datestring::
--after=datestring::
	Analise a cadeia de caracteres da data e exiba o parâmetro --max-age= correspondente para 'git rev-list'.

--until=datestring::
--before=datestring::
	Analise a cadeia de caracteres da data e exiba o parâmetro `--max-age=` que corresponda para o 'git rev-list'.

<args>...::
	As opções e os parâmetros que serão analisados.


include::revisions.txt[]

PARSEOPT
--------

No modo `--parseopt`, o comando 'git rev-parse' ajuda no processamento das opções trazendo aos scripts shell as mesmas facilidades integradas que o 'C' possuí. Funciona como um normalizador das opções (por exemplo, divide trocas únicas com valores agregados), quase como o que o `getopt(1)` faz.

Ele assume na entrada padrão a definição das opções para analisar e entender, e ecoa na saída uma sequência adequada para o `sh(1)` `eval` para substituir os argumentos por argumentos normalizados. Em caso de erro, ele gera a utilização do fluxo de erros predefinidos e encerra com o código 129.

Observação: Certifique-se de citar o resultado ao encaminhá-lo para o `eval`. Consulte um exemplo abaixo.

Formato de Entrada
~~~~~~~~~~~~~~~~~~

O formato da entrada do comando 'git rev-parse --parseopt' é texto puro. Possui duas partes, separadas por uma linha que contém apenas `--`. As linhas antes do separador (devem ser uma ou mais) são utilizadas para o uso. As linhas após o separador definem as opções.

As opções de cada linha possui este formato:

------------
<opt-spec><flags>*<arg-hint>? SP+ help LF
------------

`<opt-spec>`::
	o seu formato é o caractere curto da opção e, em seguida, o nome da opção longa, separado por vírgula. Ambas as partes não são necessárias, embora pelo menos uma seja necessária. Não pode conter nenhum dos caracteres `<flags>`. `h,help`, `dry-run` e `f` são exemplos corretos do `<opt-spec>`.

`<flags>`::
	`<flags>` são do `*`, `=`, `?` ou `!`.
	* Utilize `=` caso a opção receba um argumento.

	* Utilize `?` para dar sentido que a opção aceita um argumento opcional. Você provavelmente quer utilzar o modo `--stuck-long` para poder analisar de forma inequívoca o argumento opcional.

	* Utilize `*` para indicar que esta opção não deve ser listada no uso gerado para a opção `-h`. É exibido para `--help-all` conforme documentado em linkgit:gitcli[7].

	* Utilize `!` para não fazer com que a opção longa que foi negada esteja disponível.

`<arg-hint>`::
	Caso `<arg-hint>` seja definido, é usado como um nome do argumento na saída da ajuda, para as opções que aceitem os argumentos. O `<arg-hint>` é finalizado através do primeiro espaço. É habitual utilizar um traço para separar as palavras em uma dica de um argumento com várias palavras.

O restante da linha, depois dos espaços removidos, é usado como ajuda associada à opção.

As linhas em branco são ignoradas e as linhas que não coincidam com esta especificação são utilizadas como cabeçalhos dos grupos das opções (inicie a linha com um espaço para criar essas linhas de propósito).

Exemplo
~~~~~~~

------------
OPTS_SPEC="\
algum-comando [<opções>] <args>...

algum-comando faz 'foo' e 'bar'!
--
h,help    exibe a ajuda

foo       alguma opção bonita --foo
bar=      alguma opção bacana --bar com um argumento
baz=arg   outra opção bacana --baz com um argumento definido
qux?path  qux talvez tenha um caminho como argumento porém significa ele mesmo

  Um cabeçalho do grupo de opções
C?        opção 'C' com um argumento opcional"

eval "$(echo "$OPTS_SPEC" | git rev-parse --parseopt -- "$@" || echo exit $?)"
------------


Texto de uso
~~~~~~~~~~~~

Quando `"$@"` is `-h` ou `--help` no exemplo acima, o seguinte texto de utilização será exibido:

------------
utilização: algum-comando [<opções>] <args>...

    algum-comando faz 'foo' e 'bar'!

    -h, --help            exibe a ajuda
    --foo                 alguma opção bacana --foo
    --bar ...             alguma opção legal --bar com um argumento
    --baz <arg>           outra opção legal --baz com um determinado argumento
    --qux[=<caminho>]     o qux pode utilizar um argumento para o caminho mas significa ele mesmo

Um cabeçalho do grupo de opções
    -C[...]               opção C com um argumento opcional
------------

SQ-QUOTE
--------

No modo `--sq-quote`, o comando 'git rev-parse' ecoa na saída padrão uma única linha adequada para `sh (1)` `eval`. Esta linha é feita normalizando os argumentos após a opção `--sq-quote`. Nada mais é feito além de citar os argumentos.

Caso queira que o comando de entrada ainda seja interpretada como de costume pelo comando `git rev-parse` antes da saída ser citada pela shell, consulte a opção `--sq`.

Exemplo
~~~~~~~

------------
$ cat >your-git-script.sh <<\EOF
#!/bin/sh
args=$(git rev-parse --sq-quote "$@")   # cita os argumentos utilizados pelo usuário
command="git frotz -n24 $args"          # e utilize-o dentro de uma
					# linha de comando artesanal
eval "$command"
EOF

$ sh your-git-script.sh "a b'c"
------------

EXEMPLOS
--------

* Imprima o nome do objeto do commit atual:
+
------------
$ git rev-parse --verify HEAD
------------

* Imprima o nome do objeto do commit a partir da revisão na variável shell '$REV':
+
------------
$ git rev-parse --verify --end-of-options $REV^{commit}
------------
+
Isso causará um erro caso '$REV' esteja vazio ou não seja uma revisão válida.

* Semelhante ao acima:
+
------------
$ git rev-parse --default master --verify --end-of-options $REV
------------
+
porém caso '$REV' esteja vazia, o nome do objeto do commit vindo do "master" será impresso.

GIT
---
Parte do conjunto linkgit:git[1]
