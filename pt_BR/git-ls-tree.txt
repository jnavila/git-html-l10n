git-ls-tree(1)
==============

NOME
----
git-ls-tree - Lista o conteúdo de um objeto na árvore


RESUMO
------
[verse]
'git ls-tree' [-d] [-r] [-t] [-l] [-z]
	    [--name-only] [--name-status] [--object-only] [--full-name] [--full-tree] [--abbrev[=<n>]] [--format=<formato>]
	    <tree-ish> [<caminho>...]

DESCRIÇÃO
---------
Lista o conteúdo de um determinado objeto na árvore, como o que "/bin/ls -a" faz no diretório de trabalho atual. Observe que:

 - o comportamento é um pouco diferente do "/bin/ls", pois o '<caminho>' indica apenas uma lista de padrões para serem coincididos, portanto, especificar o nome do diretório (sem `-r`) se comportará de maneira diferente e a ordem dos argumentos não importa.

 - o comportamento é semelhante ao do "/bin/ls" onde o '<caminho>' é considerado como relativo ao diretório de trabalho atual. Por exemplo, quando você está em um diretório 'sub' que possui um diretório 'dir', é possível executar o comando 'git ls-tree -r HEAD dir' para listar o conteúdo da árvore (que é `sub/dir` no `HEAD`). Você quer informar uma árvore que não esteja no nível raiz (por exemplo, `git ls-tree -r HEAD:sub dir`) neste caso, pois isso resultaria na solicitação do `sub/sub/dir` no commit `HEAD`. No entanto, o diretório de trabalho atual pode ser ignorado passando a opção `--full-tree`.

OPÇÕES
------
<árvore>::
	Id de uma `tree-ish`.

-d::
	Exibe apenas a entrada da árvore informada em si, não seus herdeiros.

-r::
	Recursar nas subárvores.

-t::
	Exiba as entradas da árvore mesmo quando for recursá-las. Não tem efeito caso `-r` não tenha sido passado. `-d` implica no uso da opção `-t`.

-l::
--long::
	Exibe o tamanho do objeto nas entradas da bolha (arquivo).

-z::
	A terminação \0 da linha na saída e não cita os nomes dos arquivos. Consulte FORMATO DE SAÍDA abaixo para obter mais informações.

--name-only::
--name-status::
	Liste apenas os nomes dos arquivos (em vez da saída "longa"), um por linha. Não pode ser combinado com a opção `--object-only`.

--object-only::
	Liste apenas os nomes dos objetos, um por linha. Não pode ser combinado com a opção `--name-only` ou `--name-status`. Isso é o mesmo que usar `--format='%(objectname)'`, mas tanto para esta opção quanto para aquele formato exato, o comando usa um caminho de código otimizado manualmente em vez de passar pelo mecanismo de formatação genérico.

--abrev[=<n>]::
	Em vez de exibir as linhas do objeto hexadecimal com 40 bytes, exibe o prefixo mais curto que se refira de forma única ao objeto e que tenha até '<n>' hexdigits. Um número não predefinido dos dígitos podem ser definidos com `--abbrev=<n>`.

--full-name::
	Em vez de mostrar os nomes dos caminhos relativos ao diretório de trabalho atual, mostre os nomes completos dos caminhos.

--full-tree::
	Não limite a listagem ao diretório de trabalho atual. Implica no uso da opção `--full-name`.

--format=<formato>::
	Uma string que interpola `%(fieldname)` do resultado que está sendo mostrado. Ele também interpola `%%` para `%`, e `%xx` onde `xx` são dígitos hexadecimais interpolados para o caractere com código hexadecimal `xx`; por exemplo, `%00` interpola para `\0` (NUL), `%09` para `\t` (TAB) e `%0a` para `\n` (LF). Quando especificado, `--format` não pode ser combinado com outras opções de alteração do formato como `--long`, `--name-only` e `--object-only`.

[<caminho>...]::
	Quando os caminhos forem informados, exiba-os (observe que estes nomes do caminho não são realmente brutos, porém uma lista de padrões que serão combinados). Caso contrário, implicitamente utiliza o nível na raiz da árvore como o único argumento do caminho.


Formato de saída
----------------

O formato de saída do `ls-tree` é determinado pela opção `--format` ou com as outras opções de alteração do formato, tais como `--name-only` etc. (consulte o `--format` acima).

O uso de certas diretivas `--format` à utilização dessas opções, ao invocar o mecanismo completo de formatação pode ser mais lento do que se usar uma opção de formatação apropriada.

Nos casos onde o `- -format` mapearia exatamente para uma opção existente, o `ls-tree` utilizará o caminho mais rápido e apropriado. Assim, o formato padrão é equivalente a:

	%(objectmode) %(objecttype) %(objectname)%x09%(path)

Este formato gerado é compatível com o que a opção `--index-info --stdin` do comando 'git update-index' espera.

Quando a opção `-l` é utilizada, o formato muda para

	%(objectmode) %(objecttype) %(objectname) %(objectsize:padded)%x09%(path)

O tamanho do objeto identificado pelo `<nome_do_objeto>` é informado em bytes e justificado à direita com largura mínima de 7 caracteres. O tamanho do objeto é informado apenas para as entradas das bolhas (arquivo); para as outras entradas, o caracter `-` é utilizado no lugar do tamanho.

Sem a opção `z`, os `pathnames` com os caracteres "incomuns" são citados conforme explicado na variável de configuração `core.quotePath` (consulte linkgit:git-config[1]). Utilizando a opção `-z`, o nome do arquivo é gerado literalmente e a linha é finalizada com um byte `NUL`.

Formato personalizado:

É possível imprimir em um formato personalizado usando a opção `--format`, que é capaz de interpolar diferentes campos usando uma notação `%(fieldname)`. Por exemplo, se você se importa apenas com os campos "objectname" e "path", você pode executar com um comando "--format" específico como

	git ls-tree --format='%(objectname) %(caminho)' <tree-ish>

NOME DOS CAMPOS
---------------

Há vários valores dos campos estruturados que podem ser utilizados para a interpolação da saída resultante. Para cada linha gerada, os seguintes nomes podem ser usados:

objectmode::
	O modo do objeto.
objecttype::
	O tipo do objeto (`commit`, `blob` ou `tree`).
objectname::
	O nome do objeto.
objectsize[:padded]::
	O tamanho do objeto `blob` ("-" caso seja um `commit` ou `tree`). Também suporta um formato preenchido do tamanho com "%(objectsize:padded)".
caminho::
	O caminho do objeto.

GIT
---
Parte do conjunto linkgit:git[1]
