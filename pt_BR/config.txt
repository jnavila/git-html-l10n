ARQUIVO DE CONFIGURAÇÃO
-----------------------

O arquivo de configuração do Git contém várias variáveis que afetam o
comportamento dos comandos do Git. Os arquivos `.git/config` e opcionalmente
`config.worktree` (consulte a seção "ARQUIVO DE CONFIGURAÇÃO" do
linkgit:git-worktree[1]) em cada repositório são utilizados para armazenar a
configuração para aquele repositório e o `$HOME/.gitconfig` é utilizado para
armazenar uma configuração por usuário como valores alternativos para o
arquivo `.git/config`. O arquivo `/etc/gitconfig` pode ser utilizado para
armazenar a predefinição de uma configuração em todo o sistema.

As variáveis de configuração são utilizadas pelo encanamento Git e pelas
porcelanas. As variáveis são divididas em seções em que o nome completo da
variável da variável em si é o último segmento separado por ponto e o nome
da seção é tudo que estiver antes do último ponto. Os nomes das variáveis
não diferenciam maiúsculas de minúsculas, permitem apenas os caracteres
alfanuméricos e `-` que devem começar com um caractere alfabético.  Algumas
variáveis podem aparecer várias vezes; dizemos então que a variável possui
diversos valores.

Sintaxe
~~~~~~~

A sintaxe é bastante flexível e permissiva; os espaços são ignorados na
maioria das vezes.  Os caracteres '#' e ';' define o começo dos comentários
até o final da linha, as linhas em branco são ignoradas.

O arquivo consiste em seções e variáveis.  Uma seção começa com o nome da
seção entre colchetes e continua até a próxima seção.  Os nomes de seção não
diferenciam as maiúsculas das minúsculas.  Apenas os caracteres
alfanuméricos, `-` e `.` são permitidos nos nomes das seções.  Cada variável
deve pertencer a alguma seção, o que significa que deve haver um cabeçalho
da seção antes da primeira configuração de uma variável.

As seções podem ser divididas em subseções.  Para iniciar uma subseção,
coloque seu nome entre aspas duplas, separado por um espaço do nome da
seção, no cabeçalho da seção, como no exemplo abaixo:

--------
	[seção "subseção"]

--------

Os nomes das subseções diferenciam as maiúsculas das minúsculas, podem
conter qualquer caractere, exceto os que definem uma nova linha e um byte
nulo. As aspas duplas `"` e a barra invertida podem ser incluídas
escapando-as como` \"` e `\\` respectivamente. As barras invertidas
anteriores aos outros caracteres são descartadas durante a leitura; `\t` é
lido como` t` e `\0` é lido como `0` cabeçalhos da seção por exemplo e não
podem abranger várias linhas.  As variáveis podem pertencer diretamente a
uma seção ou a uma determinada subseção. Você pode ter `[section]` caso
tenha `[section "subsection"]`, mas não é necessário.

Também existe uma sintaxe obsoleta `[section.subsection]`. Com esta sintaxe
o nome da subseção é convertido em minúsculas e também é comparado com
distinção entre maiúsculas e minúsculas. Estes nomes de subseções seguem as
mesmas restrições que os nomes de seção.

Todas as outras linhas (e o restante da linha após o cabeçalho da seção) são
reconhecidas como variáveis de configuração, no formato 'name=value' (ou
apenas 'name', que é uma abreviação para dizer que a variável é um valor
booleano 'true').  Os nomes das variáveis não diferenciam maiúsculas de
minúsculas, permitem apenas os caracteres alfanuméricos e `-` que devem
começar com um caractere alfabético.

Uma linha que define um valor pode ser continuada para a próxima linha,
terminando com um `\`; acento grave e o final da linha são removidos.  São
descartados os espaços à esquerda após 'name=', o restante da linha após o
primeiro caractere de comentário '#' ou ';' e os espaços à direita da linha
a menos que estejam entre aspas duplas.  Internamente os espaços com valores
são retidos de forma literal.

Dentro de uma aspa dupla `"` e barra invertida `\` os caracteres podem ser
utilizados literalmente: utilize `\"` para `"` e `\\` para `\`.

As seguintes sequências de escape (ao lado de `\"` e `\\`) são reconhecidos:
`\n` para caracteres de nova linha (NL), `\t` para tabulação horizontal (HT,
TAB)  e `\b` para o backspace (BS).  São validas também as outras sequências
de escape de caracteres (incluindo sequências de escape octais).


Inclui
~~~~~~

As seções `include` e `includeIf` permitem que você inclua diretivas da
configuração de outra fonte. Estas seções se comportam de forma idêntica,
com exceção das seções `includeIf` que podem ser ignorados se a sua condição
não for avaliada como verdadeira; consulte "Inclusão condicional" abaixo.

Você pode incluir um arquivo da configuração de outro configurando a
variável especial `include.path` (ou `includeIf.*.path`) como o nome do
arquivo a ser incluído. A variável assume um nome do caminho como seu valor
e está sujeita à expansão do til. Estas variáveis podem ser utilizadas
várias vezes.

O conteúdo do arquivo incluído é inserido imediatamente, como se tivesse
sido encontrado no local da diretiva de inclusão. Caso o valor da variável
seja um caminho relativo, o caminho será considerado relativo ao arquivo da
configuração no qual a diretiva de inclusão foi encontrada.  Veja os
exemplos abaixo.

Inclusão condicional
~~~~~~~~~~~~~~~~~~~~

Você pode incluir um arquivo da configuração de outro condicionalmente
setando uma variável `includeIf.<condição>.path` para o nome do arquivo que
será incluído.

A condição começa com uma palavra-chave seguida de dois pontos e alguns
dados cujo formato e significado dependem da palavra-chave. As
palavras-chave compatíveis são:

`gitdir`::

	Os dados que seguem a palavra-chave `gitdir:` são utilizados como um padrão
	de agrupamento. Caso o local do diretório .git coincida com o padrão, a
	condição de inclusão será atendida.
+
O local .git pode ser descoberto automaticamente ou vir da variável de
ambiente `$GIT_DIR`. Caso o repositório seja descoberto automaticamente por
meio de um arquivo .git (de submódulos ou uma árvore de trabalho vinculada
por exemplo), o local .git será o local final onde está o diretório .git, e
não o diretório
.o que o arquivo git seja.
+
O padrão pode conter curingas de mascaramento padrão e dois adicionais,
`**/` e `/**`, que podem coincidir com diversos componentes do caminho. Para
mais detalhes, consulte o linkgit:gitignore[5] para detalhes. Por
conveniência:

 * Caso o padrão comece com `~/`, `~` será substituído com o conteúdo da
   variável de ambiente `HOME`.

 * Caso o padrão comece com `./`, é substituído com o diretório contendo o
   arquivo da configuração atual.

 * Caso o padrão não comece com com nenhum `~/`, `./` ou `/`, `**/` será
   anexado automaticamente. O padrão `foo/bar` se torna `**/foo/bar` e
   coincidirá com `/qualquer/caminho/para/foo/bar` por exemplo.

 * Caso o padrão termine com `/`, `**` será adicionado automaticamente. O
   padrão `foo/` se torna `foo/**` por exemplo. Em outras palavras, ele combina
   "foo" e tudo dentro, recursivamente.

`gitdir/i`::
	É o mesmo que `gitdir` exceto que a coincidência é feita sem distinguir as
	maiúsculas das minusculas (em sistemas onde seja indiferente o sistema de
	arquivos não se importa com maiúsculas de minusculas)

`onbranch`::
	Os dados que seguem a palavra-chave `onbranch:` são considerados um padrão
	com caracteres curinga de mascaramento predefinidos e dois adicionais, `**/`
	e `/**`, que podem coincidir com vários componentes do caminho.  Caso
	estejamos em uma árvore de trabalho cujo nome do ramo atual com check-out
	coincida com o padrão, a inclusão condicional será atendida.
+
Caso o padrão termine com `/`, `**` será adicionado automaticamente. O
padrão `foo/` se torna `foo/**` por exemplo. Em outras palavras, ele
coincide com todos os ramos que começam com `foo/`. Isso é útil pois caso as
suas ramificações estejam organizadas hierarquicamente e você queira aplicar
uma configuração em todas as ramificações nesta hierarquia.

Algumas poucas anotações sobre coincidir através de `gitdir` e `gitdir/i`:

 * Os "symlinks" (links simbólicos) em `$GIT_DIR` não são resolvidos antes que
   sejam coincididos.

 * Ambas as versões do "symlink" (links simbólico) e do "realpath" (caminho
   real) dos caminhos serão coincididos fora do `$GIT_DIR`. Por exemplo, caso
   `~/git` seja um link simbólico para /mnt/storage/git, ambos os
   `gitdir:~/git` e `gitdir:/mnt/storage/git` coincidirão.
+
Este não foi o caso no lançamento inicial desse recurso na versão v2.13.0,
que coincidia apenas à versão do caminho real. A configuração que queira ser
compatível com o lançamento inicial deste recurso precisa definir apenas a
versão do caminho real ou das duas versões.

 * Note que "../" não é especial e não irá coincidir literalmente, o que não é
   o que você quer.

Exemplo
~~~~~~~

----
# Principais variáveis
[core]
	; Não confie nos modos dos arquivos
	filemode = false

# Nosso algoritmo diff
[diff]
	external = /usr/local/bin/diff-wrapper
	renames = true

[ramo "devel"]
	remote = origin
	merge = refs/heads/devel

# Configurações de proxy
[core]
	gitProxy="ssh" for "kernel.org"
	gitProxy=default-proxy ; for the rest

[include]
	path = /path/to/foo.inc ; incluído através de um caminho absoluto
	path = foo.inc ; find "foo.inc" relativo ao arquivo atual
	path = ~/foo.inc ; find "foo.inc" no seu diretório `$HOME`

; inclua caso $GIT_DIR seja /path/to/foo/.git
[includeIf "gitdir:/path/to/foo/.git"]
	path = /path/to/foo.inc

; inclua em todos os repositórios dentro do /path/to/group
[includeIf "gitdir:/path/to/group/"]
	path = /path/to/foo.inc

; inclua em todos os repositórios dentro do $HOME/to/group
[includeIf "gitdir:~/to/group/"]
	path = /path/to/foo.inc

; os caminhos relativos são sempre relativos à inclusão
; do arquivo (caso a condição seja verdadeira); a sua localização não é
; afetada pela condição
[includeIf "gitdir:/path/to/group/"]
	path = foo.inc

; inclua apenas caso estejamos em uma árvore de trabalho
; onde "foo-branch" seja verificado
[includeIf "onbranch:foo-branch"]
	path = foo.inc
----

Valores
~~~~~~~

Os Valores das várias variáveis são tratadas como uma cadeia de caracteres
simples, porém existem variáveis que pegam os valores de tipos específicos e
existem regras de como soletrá-los.

booleano::

       Quando uma variável pega um valor booleano, muitos sinônimos são aceitos
       para 'true' e 'false', estes são todos insensíveis as mudanças de maiúsculas
       e minusculas.

	verdadeiro;; 	Os literais booleanos verdadeiros são `yes`, `on`, `true`,
		e `1`.  Além disso, uma variável definida sem `= <valor>`
		é tida como verdadeira.

	falso;; 	Os falsos literais booleanos são `no`, `off`, `false`,
		`0` e uma cadeia de caracteres vazios.
+
Quando converter um valor para a sua forma canônica utilizando o
`--type=bool`, tipo de especificação 'git config' se assegurará que a saída
seja 'true' ou 'false' (em minusculas).

inteiro::
       O valor das muitas variáveis que determinam os vários tamanhos podem ter
       como sufixo `k`, `M`,... que significa "escale o número por 1024", "por
       1024x1024", etc.

color::
       O valor de uma variável que pega uma cor de uma lista de cores (ao menos
       duas, uma para o primeiro plano e outra para o plano de fundo) e os
       atributos (quantos queira), separados por espaços.
+
As cores básicas que são aceitas são `normal` (normal), `black` (preto) ,
`red` (vermelho) , `green` (verde), `yellow` (amarelo) , `blue` (azul),
`magenta` (magenta), `cyan` (ciano) and `white` (branco).  A primeira cor é
o primeiro plano; a segunda é o plano de fundo.  Todas as cores básicas
exceto `normal` possuem uma variante brilhante que pode ser definida
prefixando a cor com `bright`, como `brightred`.
+
As cores também podem ser utilizadas como números entre 0 e 255; estes usam
o modo ANSI com 256 cores (note que nem todos os terminais são
compatíveis).  Caso o seu terminal seja compatível, você também pode definir
os valores RGB de 24 bits como hexadecimais, `#ff0ab3` por exemplo.
+
Os atributos compatíveis são `bold`, `dim`, `ul`, `blink`, `reverse`,
`italic`, e `strike` (para letras cruzadas  ou "rasuradas").  A posição de
qualquer atributo em relação às cores (antes, depois ou entre) não
importa. Atributos específicos podem ser desativados prefixando-os com `no`
ou `no-` (por exemplo `noreverse`, `no-ul`, etc).
+
Uma sequência de cores vazias não produz nenhum efeito de cor. Isso pode ser
utilizado para evitar colorir elementos específicos sem desabilitar
totalmente a cor.
+
Para os slots com as cores predefinidas do git, os atributos devem ser
redefinidos no início de cada item na saída colorida. Portanto ao definir a
variável `color.decorate.branch` como` black` pintará esse nome do ramo como
`preto` simples, mesmo se a coisa anterior na mesma linha de saída (abrir
parênteses antes da lista dos nomes das ramificações na saída de `log
--decorate` por exemplo) é definido para ser pintado com `bold` (negrito) ou
algum outro atributo.  No entanto, os formatos dos registros log
personalizados podem fazer uma coloração mais complicada e em camadas, as
formas negadas podem ser úteis lá.

caminho do diretório::
	Uma variável que recebe um valor para o nome do caminho pode receber uma
	cadeia de caracteres que começa com "`~/`" ou "`~user/`", a expansão usual
	do til acontece com essa cadeia de caracteres: `~/` é expandida para o valor
	`$HOME`, e `~user/` para o diretório inicial do usuário que foi definido.


Variáveis
~~~~~~~~~

Observe que esta lista não é abrangente e não está completa.  Para variáveis
específicas do comando, você encontrará uma descrição mais detalhada na
página apropriada do manual.

Outras ferramentas relacionadas ao `git-related` podem usar as suas próprias
variáveis.  Ao inventar novas variáveis para utilização em sua própria
ferramenta, certifique-se que os seus respectivos nomes não entram em
conflito com os que já são utilizados pelo próprio Git e outras ferramentas
populares, e descreva-os em sua documentação.

include::config/advice.txt[]

include::config/core.txt[]

include::config/add.txt[]

include::config/alias.txt[]

include::config/am.txt[]

include::config/apply.txt[]

include::config/blame.txt[]

include::config/branch.txt[]

include::config/browser.txt[]

include::config/checkout.txt[]

include::config/clean.txt[]

include::config/color.txt[]

include::config/column.txt[]

include::config/commit.txt[]

include::config/credential.txt[]

include::config/completion.txt[]

include::config/diff.txt[]

include::config/difftool.txt[]

include::config/fastimport.txt[]

include::config/feature.txt[]

include::config/fetch.txt[]

include::config/format.txt[]

include::config/filter.txt[]

include::config/fsck.txt[]

include::config/gc.txt[]

include::config/gitcvs.txt[]

include::config/gitweb.txt[]

include::config/grep.txt[]

include::config/gpg.txt[]

include::config/gui.txt[]

include::config/guitool.txt[]

include::config/help.txt[]

include::config/http.txt[]

include::config/i18n.txt[]

include::config/imap.txt[]

include::config/index.txt[]

include::config/init.txt[]

include::config/instaweb.txt[]

include::config/interactive.txt[]

include::config/log.txt[]

include::config/mailinfo.txt[]

include::config/mailmap.txt[]

include::config/man.txt[]

include::config/merge.txt[]

include::config/mergetool.txt[]

include::config/notes.txt[]

include::config/pack.txt[]

include::config/pager.txt[]

include::config/pretty.txt[]

include::config/protocol.txt[]

include::config/pull.txt[]

include::config/push.txt[]

include::config/rebase.txt[]

include::config/receive.txt[]

include::config/remote.txt[]

include::config/remotes.txt[]

include::config/repack.txt[]

include::config/rerere.txt[]

include::config/reset.txt[]

include::config/sendemail.txt[]

include::config/sequencer.txt[]

include::config/showbranch.txt[]

include::config/splitindex.txt[]

include::config/ssh.txt[]

include::config/status.txt[]

include::config/stash.txt[]

include::config/submodule.txt[]

include::config/tag.txt[]

include::config/tar.txt[]

include::config/trace2.txt[]

include::config/transfer.txt[]

include::config/uploadarchive.txt[]

include::config/uploadpack.txt[]

include::config/url.txt[]

include::config/user.txt[]

include::config/versionsort.txt[]

include::config/web.txt[]

include::config/worktree.txt[]
