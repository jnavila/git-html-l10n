git-merge(1)
============

NOME
----
git-merge - Une dois ou mais históricos de desenvolvimento


RESUMO
------
[verse]
'git merge' [-n] [--stat] [--no-commit] [--squash] [--[no-]edit]
	[--no-verify] [-s <estratégia>] [-X <opção-da-estratégia>] [-S[<keyid>]]
	[--[no-]allow-unrelated-histories]
	[--[no-]rerere-autoupdate] [-m <msg>] [-F <arquivo>] [<commit>...]
'git merge' (--continue | --abort | --quit)

DESCRIÇÃO
---------
Incorpora as alterações dos commits citados (desde o momento em que os seus históricos divergirem do ramo atual) para dentro do ramo atual. Este comando é utilizado pelo 'git pull' para incorporar as alterações vindos de outro repositório e pode ser utilizado manualmente para mesclar as alterações do outro ramo para um outro.

Suponha que exista o seguinte histórico e o ramo atual seja `master`:

------------
	  A---B---C topic
	 /
    D---E---F---G master
------------

Em seguida, `git merge topic` repetirá as alterações feitas no ramo `topic` uma vez que ele divergiu de `master` (ou seja,`E`) até que o seu commit atual (`C`) no topo do `master` registrando o resultado em um novo commit junto com os nomes de dois commits relacionados em uma mensagem log vindo do usuário descrevendo as alterações.

------------
	  A---B---C topic
	 /         \
    D---E---F---G---H master
------------

A segunda sintaxe ("`git merge --abort`") só pode ser executada após o resultado da mesclagem apresentar conflitos. O comando 'git merge abort' abortará o processo de mesclagem e tentará reconstruir a condição anterior a mesclagem. No entanto, Caso haja alterações com commits não realizados quando a mesclagem for iniciada (e especialmente caso estas alterações forem modificadas posteriormente após o início da mesclagem), o 'git merge abort' será, em alguns casos, incapaz de reconstruir as alterações originais (pré-mesclagem). Portanto:

*Aviso*: É desencorajado executar o comando 'git merge' com alterações
não-triviais dos commits que não foram feitos é desencorajado: enquanto
possível, pode deixá-lo em uma condição difícil de sair no caso de haver um conflito.

A terceira sintaxe ("`git merge --continue`") só pode ser executada depois que a mesclagem apresentar conflitos.

OPÇÕES
------
:git-merge: 1

include::merge-options.txt[]

-m <msg>::
	Defina a mensagem do commit que será utilizada para a mesclagem do commit (no caso de uma ser criada).
+
Caso `--log` seja utilizado, um atalho dos commits que estão sendo mesclados será anexado à mensagem informada.
+
O comando 'git fmt-merge-msg' pode ser utilizado para informar uma boa predefinição para as invocações automatizadas do comando 'git merge'. A mensagem automatizada pode incluir a descrição da ramificação.

-F <arquivo>::
--file=<arquivo>::
	Leia a mensagem de commit que será utilizada para mesclar o commit (no caso de uma ser criada).
+
Caso `--log` seja utilizado, um atalho dos commits que estão sendo mesclados será anexado à mensagem informada.

--rerere-autoupdate::
--no-rerere-autoupdate::
	Permita que o mecanismo "rerere" atualize o índice com o resultado da resolução automática de conflitos, caso seja possível.

--overwrite-ignore::
--no-overwrite-ignore::
	Silently overwrite ignored files from the merge result. Este é o comportamento predefinido. Use `--no-overwrite-ignore` to abort.

--abort::
	Interrompa o processo atual da resolução de conflitos e tente reconstruir a condição de pré-mesclagem. Caso uma entrada de "autostash" esteja presente, aplique-a à árvore de trabalho.
+
Caso existam commits que não tenham sido realizados e estejam presentes na árvore de trabalho quando a mesclagem for iniciada, o comando 'git merge --abort' será, em alguns casos, incapaz de reconstruir essas alterações. Portanto, é recomendável sempre fazer o commit ou acumular as suas alterações antes de executar o 'git merge'.
+
O comando 'git merge --abort' é o equivalente ao 'git reset --merge' quando `MERGE_HEAD` estiver presente ou a menos que o `MERGE_AUTOSTASH` também esteja; neste caso, o comando 'git merge --abort' aplica a entrada "stash" na área de trabalho enquanto 'git reset --merge' salvará as alterações acumuladas na lista "stash".

--quit::
	Não se preocupe com a mesclagem em andamento. Mantenha o índice e a árvore de trabalho como estão. Caso `MERGE_AUTOSTASH` esteja presente, os lançamentos armazenados serão salvos na lista "stash".

--continue::
	Depois que um 'git merge' for interrompido por causa dos conflitos, é possível concluir a mesclagem executando o comando 'git merge --continue' (consulte a seção "COMO RESOLVER CONFLITOS" abaixo).

<commit>...::
	Os commits, geralmente outros cabeçalhos do ramo que serão mesclados na nossa filial. A especificação de mais de um commit criará uma mesclagem com mais de duas origens (carinhosamente chamada de mesclagem polvo (octopus merge)).
+
Caso nenhum commit seja informado na linha de comando, mescle as ramificações monitoradas remotamente para que a ramificação atual esteja configurada para ser utilizada como sua upstream. Consulte também a seção de configuração desta página do manual.
+
Quando `FETCH_HEAD` (e nenhum outro commit) for definido, as ramificações registradas no arquivo `.git/FETCH_HEAD` através da invocação anterior para mesclagem com o comando `git fetch`, serão mescladas no ramo atual.


VERIFICAÇÕES PRÉVIAS DA MESCLAGEM
---------------------------------

Você deve ter o seu próprio trabalho em boas condições e com o commit feito localmente antes de aplicar as alterações externas, para evitar que sejam sobrescritos no caso da existência de conflitos. Consulte também linkgit:git-stash[1]. Os comandos 'git pull' e 'git merge' ficarão inertes sem fazer nada quando as modificações dos commits que não foram aplicados localmente se sobrepuserem aos arquivos que os comandos 'git pull'/'git merge' talvez precisem atualizar.

Para evitar o registro de alterações não relacionadas a mesclagem do commit, os comandos 'git pull' e 'git merge' também serão cancelados caso exista alguma alteração registrada no índice em relação ao commit `HEAD`. (Podem existir algumas poucas exceções especiais a essa regra dependendo de qual estratégia de mesclagem estiver em uso, no geral, o índice deve corresponder ao HEAD.)

Caso todos os commits sejam antecessores ao `HEAD`, então o comando 'git merge' encerrara prematuramente exibindo a mensagem "Já foi atualizado"

MESCLAGEM COM AVANÇO RÁPIDO
---------------------------

Frequentemente, o cabeçalho do ramo atual é um ancestral do commit informado. Este é o caso mais comum especialmente quando invocado a partir do comando 'git pull': você está monitorando um repositório upstream, não efetuou as alterações locais e agora deseja atualizar para uma revisão upstream mais recente. Nesse caso, não é necessário um novo commit para armazenar o histórico combinado; em vez disso, o `HEAD` (junto com o índice) é atualizado para apontar para o commit informado sem criar uma mesclagem extra do commit.

Este comportamento pode ser suprimido ao usar a opção `--no-ff`.

MESCLAGEM REAL
--------------

Exceto em uma mesclagem de avanço rápido (veja acima), as ramificações que serão mescladas devem ser vinculadas através de uma consolidação da mesclagem que tenha ambas como as suas origens.

Uma versão mesclada que reconcilia as alterações de todas as ramificações que serão mescladas, o commit é feito e o seu `HEAD`, índice e a árvore de trabalho são atualizados para ela. É possível ter alterações na árvore de trabalho, desde que não se sobreponham; a atualização irá preservá-las.

Quando não é óbvio como reconciliar as alterações, acontece o seguinte:

1. O indicador do `HEAD` se mantém o mesmo.
2. O "ref" do `MERGE_HEAD` é definido para indicar o `HEAD` do outro ramo.
3. Os caminhos que foram mesclados corretamente são atualizados no arquivo do índice e na sua árvore de trabalho.
4. Para os caminhos conflitantes, o arquivo do índice registra até três versões: o estágio 1 armazena a versão do ancestral comum, o estágio 2 do `HEAD` e o estágio 3 do `MERGE_HEAD` (você pode inspecionar os estágios com `git ls-files -u`). Os arquivos da árvore de trabalho contêm o resultado do programa "merge"; ou seja, os resultados da mesclagem em três direções com os marcadores de conflito familiares `<<<`, `===` e `>>>`.
5. Nenhuma outra alteração é feita. Em particular, as alterações locais que você tinha antes de iniciar a mesclagem permanecerão as mesmas e as entradas do índice para elas permanecerão como estavam, ou seja, correspondendo com `HEAD '.

Caso tenha tentado uma mesclagem que resultou em conflitos complexos e queira recomeçar, execute o comando `git merge --abort`.

MESCLANDO TAG
-------------

Ao mesclar uma tag anotada (e possivelmente assinada), o Git sempre cria a mesclagem de um commit, mesmo que seja possível realizar uma mesclagem de avanço rápido, o modelo da mensagem do commit é preparado com a mensagem da tag. Além disso, caso a tag esteja assinada, a verificação da assinatura será relatada como um comentário no modelo de mensagem. Consulte também linkgit:git-tag[1].

Quando você deseja apenas integrar-se ao trabalho que leva ao commit que está marcado, por exemplo, sincronizando com um ponto de liberação upstream, talvez você não queira fazer uma consolidação desnecessária da mesclagem.

Neste caso, você pode "desembrulhar" a etiqueta antes de encaminhá-la para o comando `git merge` ou passar ao `--ffff-only` quando você não tiver nenhum trabalho feito por conta própria. por exemplo.

----
git fetch origin
git merge v1.2.3^0
git merge --ff-only v1.2.3
----


COMO OS CONFLITOS SÃO APRESENTADOS
----------------------------------

Durante uma mesclagem, os arquivos da árvore de trabalho são atualizados para refletir o resultado da mesclagem. Entre as alterações feitas no ancestral da versão comum, as que não se sobrepõem (ou seja, você alterou uma área do arquivo enquanto o outro lado deixou a área intacta ou vice-versa) são incorporadas no resultado final, literalmente. Quando os dois lados que fizeram as alterações na mesma área, porém, o Git não pode escolher aleatoriamente um lado sobre o outro e solicita que você o resolva, deixando intacto o que os dois lados fizeram nessa área.

É predefinido que o Git utilize o mesmo estilo que o utilizado pelo programa "merge" (mesclar) do conjunto RCS para apresentar um pedaço conflitante, como este:

------------
Aqui estão as linhas que não são alteradas em relação ao ancestral
comum ou resolvido de maneira limpa porque apenas um lado mudou.
<<<<<<< yours:sample.txt
A resolução de conflitos é difícil;
vamos às compras.
=======
O Git facilita a resolução de conflitos.
>>>>>>> theirs:sample.txt
E aqui está outra linha que foi claramente resolvida ou não foi modificada.
------------

A área onde ocorreu um para de alterações conflitantes é marcada com os marcadores `<<<<<<<`, `=======` e `>>>>>>>`. A parte anterior ao `=======` é tipicamente do seu lado e a parte posterior é tipicamente do lado deles.

O formato predefinido não exibe o que o original disse na área conflitante. Você não pode dizer quantas linhas foram excluídas e substituídas através das observações do seu lado. A única coisa que é possível dizer é que o seu lado quer dizer que é difícil e você prefere ir às compras, enquanto o outro lado quer dizer que é fácil.

Um estilo alternativo pode ser utilizado ao definir a variável de configuração "merge.conflictStyle" como "diff3". No estilo "diff3", o conflito acima pode ser assim:

------------
Aqui estão as linhas que não são alteradas em relação ao ancestral
comum ou resolvido de maneira limpa porque apenas um lado mudou.
<<<<<<< yours:sample.txt
A resolução de conflitos é difícil;
vamos às compras.
|||||||
A resolução de conflitos é difícil.
=======
O Git facilita a resolução de conflitos.
>>>>>>> theirs:sample.txt
E aqui está outra linha que foi claramente resolvida ou não foi modificada.
------------

Além dos marcadores `<<<<<<<`, `=======` e `>>>>>>>` `, ele utiliza outro marcador `|||||||` que é seguido pelo texto original. Você pode dizer que o original acabou de declarar um fato e o seu lado simplesmente cedeu a essa afirmação e desistiu, enquanto o outro lado tentou ter uma atitude mais positiva. Às vezes, você pode ter uma resolução melhor visualizando o original.


COMO RESOLVER OS CONFLITOS
--------------------------

Após encontrar um conflito, você pode fazer duas coisas:

 * Decida não fazer a mesclagem. As únicas limpezas necessárias são para redefinir o arquivo no índice para o commit `HEAD` para que '2' seja revertido. e para limpar as alterações na árvore de trabalho feitas por '2'. e o '3' .; O `git merge --abort` pode ser utilizado para isso.

 * Resolva os conflitos. O Git marcará os conflitos na árvore de trabalho. Edite os arquivos em ordem e comando 'git add' adiciona eles ao índice. Utilize o comando 'git commit' ou 'git merge --continue' para selar o acordo. O último comando verifica a existência de uma mesclagem (interrompida) em andamento antes de chamar o comando 'git commit'.

Você pode trabalhar o conflito com uma quantidade de ferramentas:

 * Utilize uma ferramenta de mesclagem "mergetool". `git mergetool` para iniciar uma ferramenta gráfica para lhe auxiliar através do processo de mesclagem.

 * Veja as diferenças dos arquivos diff. O `git diff` exibirá um diff de três vias, destacando as alterações das versões` HEAD` e `MERGE_HEAD`.

 * Veja as diferenças de cada ramo. O comando `git log --merge -p <caminho>` exibirá as diferenças primeiro para a versão `HEAD` e depois para a versão `MERGE_HEAD`.

 * Consulte os originais. O comando `git show :1:filename` exibe o ancestral comum, `git show :2:filename` exibe a versão do `HEAD` e o `git show :3:filename` exibe a versão do `MERGE_HEAD`.


EXEMPLOS
--------

* Mescla as ramificações `fixes` e `enhancements` no cume do ramo atual, fazendo um conjunto de mesclagens:
+
------------------------------------------------
$ git merge fixes enhancements
------------------------------------------------

* Mescle o ramo `obsolete` (obsoleto) no ramo atual, utilizando a `nossa` estratégia de mesclagem:
+
------------------------------------------------
$ git merge -s ours obsolete
------------------------------------------------

* Mescla o ramo `maint` no ramo atual, porém não faça um novo commit de forma automática:
+
------------------------------------------------
$ git merge --no-commit maint
------------------------------------------------
+
Isso pode ser utilizado quando você queira incluir outras alterações na mesclagem ou se deseja, grave a sua própria mensagem do commit na mesclagem.
+
Você deve evitar abusar dessa opção para ocultar as alterações substanciais em uma mesclagem do commit. Pequenos reparos, como o nome da versão/revisão são aceitáveis.


include::merge-strategies.txt[]

CONFIGURAÇÃO
------------
include::config/merge.txt[]

branch.<nome>.mergeOptions::
	Define as opções predefinidas de mesclagem no ramo <nome>. A sintaxe e as opções que são compatíveis são iguais às do 'git merge', porém atualmente os valores das opções que contêm os caracteres de espaço não são compatíveis.

VEJA TAMBÉM
-----------
linkgit:git-fmt-merge-msg[1], linkgit:git-pull[1], linkgit:gitattributes[5], linkgit:git-reset[1], linkgit:git-diff[1], linkgit:git-ls-files[1], linkgit:git-add[1], linkgit:git-rm[1], linkgit:git-mergetool[1]

GIT
---
Parte do conjunto linkgit:git[1]
