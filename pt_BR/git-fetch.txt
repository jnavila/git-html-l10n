git-fetch(1)
============

NOME
----
git-fetch - Faz o download dos objetos e `refs` do outro repositório


RESUMO
------
[verse]
'git fetch' [<opções>] [<repositório> [<refspec>...]]
'git fetch' [<opções>] <grupo>
'git fetch' --multiple [<opções>] [(<repositório> | <grupo>)...]
'git fetch' --all [<opções>]


DESCRIÇÃO
---------
Busque as ramificações ou as tags (coletivamente, refs) de um ou mais repositórios, juntamente com os objetos necessários para completar seus históricos. As ramificações de rastreamento remoto são atualizadas (consulte a descrição de `<refspec>` abaixo para conhecer maneiras de controlar esse comportamento).

É predefinido que qualquer tag que aponte para os históricos que estão sendo capturados também sejam capturados; o efeito é capturar as tags que apontem para os ramos nos quais você está interessado. Este comportamento predefinido pode ser alterado utilizando as opções `--tags`, `--no-tags` ou configurando `remote.<nome>.tagOpt`. Utilizando um `refspec` de forma explicita, é possível que você busque as tags que não apontam para as ramificações nas quais você também está interessado.

O 'git fetch' pode capturar num único repositório ou numa determinada URL assim como em vários repositórios de uma vez caso `<grupo>` seja utilizado e exista um entrada `remotes.<grupo>` no arquivo de configuração. (Consulte linkgit:git-config[1]).

Por predefinição quando nenhum ponto remoto é utilizado, o `origin` será utilizado, a menos que haja um ramo `upstream` configurado para o ramo atual.

Os nomes dos `refs` que são capturados, juntamente com os nomes dos objetos para os quais eles apontam, são gravados em `.git/FETCH_HEAD`. Essa informação pode ser utilizada por scripts ou outros comandos git, como linkgit:git-pull[1].

OPÇÕES
------
include::fetch-options.txt[]

include::pull-fetch-param.txt[]

--stdin::
	Faz a leitura linha a linha dos refspecs a partir do stdin adicionalmente aqueles fornecidos pelos argumentos. O formato "tag <nome>" não é compatível.

include::urls-remotes.txt[]


CONFIGURAÇÕES DOS RAMOS MONITORADOS REMOTAMENTE[[CRTB]]
-------------------------------------------------------

Você costuma interagir com o mesmo repositório remoto, capturando-o regularmente e de forma repetida. Para acompanhar o progresso de um repositório remoto, o `git fetch` permite que você configure variáveis da configuração `remote.<repositório>.fetch`.

Normalmente, essa variável pode ser assim:

------------------------------------------------
[remote "origin"]
	fetch = +refs/heads/*:refs/remotes/origin/*
------------------------------------------------

Essa configuração é utilizada de duas maneiras:

* Quando o `git fetch` é executado sem informar quais as ramificações ou tags capturar na linha de comando, por exemplo. Os valores `git fetch origin` ou `git fetch`, `remote.<repositório>.fetch` são utilizados como `refspecs` eles especificam quais os `refs` capturar e quais as `refs` locais atualizar. O exemplo acima capturará todas as ramificações que existem em `origin` (ou seja, qualquer `ref` que coincida ao lado esquerdo do valor, `refs/heads/*`) e atualizará as ramificações de rastreamento remoto correspondentes na hierarquia `refs/remotes/origem/*`.

* Quando o `git fetch` é executado especificamente com as ramificações ou tags utilizando a linha de comando como `git fetch origin master` por exemplo, os `<refspec>` utilizados determinam uma ordem de capturar, o quê deve ser capturado (o `master` no exemplo é uma abreviação de `master:`, que por sua vez significa "capture a ramificação 'master', por exemplo), assim o comando no exemplo capturará _apenas_ a ramificação 'master'. Os valores `remote.<repositório>.fetch` determinam qual a ramificação remota rastreada, caso exista, será atualizada. Quando utilizados desta maneira, os valores `remote.<repository>.fetch` não têm nenhum efeito na decisão do _quê_ é capturado (ou seja, os valores não são utilizados como `refspecs` quando a linha de comando lista `refspecs`); eles são utilizados apenas para decidir _onde_ os `refs` que estão sendo capturados estão sendo armazenados e agem como um mapeamento.

O último valores do `remote.<repositório>.fetch` podem ser substituídos, ao usar os parâmetros `--refmap=<refspec>` na linha de comando.

PODA
----

A disposição predefinida do Git se organiza de forma a manter os dados a menos que sejam descartados de forma explicita; isso se estende a manter referências locais nas ramificações remotas que elas mesmas excluíram.

Se desassistidas, essas referências obsoletas podem piorar o desempenho em repositórios grandes e ocupados aonde apresentam muita rotatividade e por exemplo, façam uso de comandos como `git branch -a --contains <commit>` cuja saída é desnecessariamente detalhada, cautilizando impacto de desempenho em qualquer outra referência de trabalho conhecida.

Estas referências de rastreamento remoto podem ser excluídas com um único:

------------------------------------------------
# Enquanto estiver fazendo a captura
$ git fetch --prune <nome>

# Exclua apenas, não busque nada
$ git remote prune <nome>
------------------------------------------------

Para remover as referências como parte do seu fluxo de trabalho normal sem precisar se lembrar de executá-lo, defina `fetch.prune` globalmente ou com a configuração ` remote.<nome>.prune` por ramo remoto. Consulte linkgit:git-config[1].

Aqui é onde as coisas ficam complicadas e bem específicas. O recurso de remoção não se importa muito com as ramificações; em vez disso, remove as referências locais <--> remotas como uma função do `refspec` remoto (consulte `<refspec>` e <<CONFIGURAÇÕES DOS RAMOS MONITORADOS REMOTAMENTE, CRTB>> acima).

Portanto, caso o `refspec` remoto inclua `refs/tags/*:refs/tags/*` por exemplo ou caso execute manualmente `git fetch --prune <nome> "refs/tags/*:refs/tags/*"` por exemplo. As ramificações remotas rastreadas que forem excluídas não expirarão, a não ser qualquer outra tag local que não exista remotamente.

Senão for o que você deseja, caso queira remover remotamente o `<nome>` por exemplo e também capturar explicitamente as tags a partir dele; primeiramente, ao recolher dele você exclui todas as tags locais, a maioria das quais podem não terem vindo do `<nome>` remoto.

Assim, tenha cuidado ao utilizar isso com um `refspec` como `refs/tags/*:refs/tags/*` ou qualquer outro `refspec` que possa mapear as referências de diferentes pontos remotos para o mesmo `namespace` local.

Como manter-se atualizado com as ramificações e as tags remotamente é um caso de uso comum, a opção `--prune-tags` pode ser utilizada junto com o `--prune` para remover as tags locais que não existam no ponto remoto e impor a atualização dessas tags que estiverem diferentes. A remoção de tags também podem ser ativadas com `fetch.pruneTags` ou `remote.<nome>.pruneTags` nas configurações. Consulte linkgit:git-config[1].

A opção `--prune-tags` é equivalente a ter o `refs/tags/*:refs/tags/*` declarado nos `refspecs` remotos. Isso pode ocasionar algumas interações estranhas:

------------------------------------------------
# Ambas capturam as tags
$ git fetch --no-tags origin 'refs/tags/*:refs/tags/*'
$ git fetch --no-tags --prune-tags origin
------------------------------------------------

O motivo pelo qual não ocorre um erro durante o uso sem a opção `--prune` ou as suas versões de configuração, é a flexibilidade das versões configuradas, para manter um mapeamento 1=1 entre as opções da linha de comando e o que as versões das configuração fazem.

É razoável que a configuração `fetch.pruneTags=true` em `~/.gitconfig` que as tags sejam removidas sempre que o comando `git fetch --prune` seja executado, sem fazer com que todas as invocações do comando `git fetch` sem a opção `--prune` cause um erro.

A remoção de tags com `--prune-tags` também funciona durante o resgate de uma URL em vez de um determinado nome remoto. Todas essas tags de remoção serão encontradas em `origin`:

------------------------------------------------
$ git fetch origin --prune --prune-tags
$ git fetch origin --prune 'refs/tags/*:refs/tags/*'
$ git fetch <url of origin> --prune --prune-tags
$ git fetch <url of origin> --prune 'refs/tags/*:refs/tags/*'
------------------------------------------------

SAÍDA
-----

A saída do comando "git fetch" depende do método de transporte utilizado; Esta seção descreve a saída durante a utilização da captura ao utilizar o protocolo Git (localmente ou via ssh) e o protocolo inteligente "Smart HTTP".

A condição da saída durante a captura é produzida em forma de tabela, com cada linha representando a condição de uma única referência. Cada linha é uma forma de:

-------------------------------
 <flag> <resumo> <de> -> <para> [<motivo>]
-------------------------------

Ao usar `--porcelain`, o formato gerado serve para ser analisado por uma máquina. Em contraste com os formatos de saída legíveis para humanos, ele imprime na saída predefinida em na de erro padrão. Cada linha tem o formato:

-------------------------------
<flag> <id-antiga-do-objeto> <id-nova-do-objeto> <referência-local>
-------------------------------

A condição das referências atualizadas é exibido caso a opção --verbose seja utilizada.

O modo de saída compacta é definida com a variável de configuração `fetch.output`, caso `<de>` ou `<para>` seja inteiramente encontrada em outra cadeia de caracteres, esta será substituída por `*` na outra cadeia de caracteres. `master -> origin/master` se torna `master -> origin/*` por exemplo.

sinalizar, sinalização, indicação, marcação, marcador::
	Um único caractere indicando a condição da referência:
(space);; para um avanço rápido bem sucedido;
`+`;; para uma imposição de atualização bem sucedida;
`-`;; para uma eliminação da referência bem sucedida;
`t`;; para uma atualização da tag bem sucedida;
`*`;; para a captura de uma nova referência bem sucedida;
`!`;; para uma referência que foi rejeitada ou a sua atualização tenha falhado; e
`=`;; para uma referência que estava atualizada e não precisou de nenhuma captura.

resumo::
	Para a a captura de uma referência bem sucedida, o resumo exibe os valores antigos e novos num formato adequado para a utilização como argumento para o comando `git log` (`<antigo>..<novo>` na maioria dos casos, e `<antigo>...<novo>` para atualizações de avanço rápido que forem impostas).

de::
	The name of the remote ref being fetched from, minus its `refs/<tipo>/` prefix. In the case of deletion, the name of the remote ref is "(none)".

para::
	The name of the local ref being updated, minus its `refs/<tipo>/` prefix.

motivo::
	Uma explicação legível para humanos. No caso de referências capturadas com sucesso, nenhuma explicação é necessária. Para uma referência com falha, o motivo será explanado.

EXEMPLOS
--------

* Atualize as ramificações de rastreamento remoto:
+
------------------------------------------------
$ git fetch origin
------------------------------------------------
+
O comando acima copia todas as ramificações do `refs/heads/` do espaço de nomes remoto e as armazena em `refs/remotes/origin/` com um espaço de nomes local, a menos que a opção `remote.<repositório>.fetch` seja utilizada para definir um `refspec` fora do que já vem predefinido.

* Utilizando `refspecs` de forma explicita:
+
------------------------------------------------
$ git fetch origin +seen:seen maint:tmp
------------------------------------------------
+
Faz a atualização (ou cria, conforme seja necessário) as ramificações `seen` e `tmp` no repositório local, capturando as ramificações (respectivamente) `seen` e `maint` no repositório remoto.
+
O ramo `seen` será atualizado ainda que não faça um avanço rápido, porque é prefixado com um sinal de mais; já o `tmp` não será.

* Dê uma olhada no ramo remoto sem a configuração remota do seu repositório local:
+
------------------------------------------------
$ git fetch git://git.kernel.org/pub/scm/git/git.git maint
$ git log FETCH_HEAD
------------------------------------------------
+
O primeiro comando captura a ramificação `maint` do repositório em `git://git.kernel.org/pub/scm/git/git.git` e o segundo comando usa `FETCH_HEAD` para examinar a ramificação com linkgit:git-log[1]. Os objetos capturados serão eventualmente removidos pelo serviço de limpeza interno do git (consulte linkgit:git-gc[1]).

include::transfer-data-leaks.txt[]

CONFIGURAÇÃO
------------

include::includes/cmd-config-section-all.txt[]

include::config/fetch.txt[]

BUGS
----
Com a opção `--recurse-submodules` só se pode buscar por novos commits nos submódulos que estejam presentes localmente, por exemplo, em `$GIT_DIR/modules/`. Se o upstream adicionar um novo submódulo, este submódulo não pode ser buscado até que seja clonado, por exemplo, através do `git submodule update`. Isso deve ser corrigido numa versão futura do Git.

VEJA TAMBÉM
-----------
linkgit:git-pull[1]

GIT
---
Parte do conjunto linkgit:git[1]
