git-fetch(1)
============

NOME
----
git-fetch - Faz o download dos objetos e `refs` do outro repositório


RESUMO
------
[verse]
'git fetch' [<opções>] [<repositório> [<refspec>...]]
'git fetch' [<opções>] <grupo>
'git fetch' --multiple [<opções>] [(<repositório> | <grupo>)...]
'git fetch' --all [<opções>]


DESCRIÇÃO
---------
Fetch branches and/or tags (collectively, "refs") from one or more other repositories, along with the objects necessary to complete their histories. Remote-tracking branches are updated (see the description of <refspec> below for ways to control this behavior).

By default, any tag that points into the histories being fetched is also fetched; the effect is to fetch tags that point at branches that you are interested in. This default behavior can be changed by using the --tags or --no-tags options or by configuring remote.<name>.tagOpt. By using a refspec that fetches tags explicitly, you can fetch tags that do not point into branches you are interested in as well.

'git fetch' can fetch from either a single named repository or URL, or from several repositories at once if <group> is given and there is a remotes.<group> entry in the configuration file. (See linkgit:git-config[1]).

Por predefinição quando nenhum ponto remoto é utilizado, o `origin` será utilizado, a menos que haja um ramo `upstream` configurado para o ramo atual.

The names of refs that are fetched, together with the object names they point at, are written to `.git/FETCH_HEAD`. This information may be used by scripts or other git commands, such as linkgit:git-pull[1].

OPÇÕES
------
include::fetch-options.txt[]

include::pull-fetch-param.txt[]

--stdin::
	Faz a leitura linha a linha dos refspecs a partir do stdin adicionalmente aqueles fornecidos pelos argumentos. O formato "tag <nome>" não é compatível.

include::urls-remotes.txt[]


CONFIGURAÇÕES DOS RAMOS MONITORADOS REMOTAMENTE[[CRTB]]
-------------------------------------------------------

You often interact with the same remote repository by regularly and repeatedly fetching from it. In order to keep track of the progress of such a remote repository, `git fetch` allows you to configure `remote.<repository>.fetch` configuration variables.

Normalmente, essa variável pode ser assim:

------------------------------------------------
[remote "origin"]
	fetch = +refs/heads/*:refs/remotes/origin/*
------------------------------------------------

Essa configuração é utilizada de duas maneiras:

* When `git fetch` is run without specifying what branches and/or tags to fetch on the command line, e.g. `git fetch origin` or `git fetch`, `remote.<repository>.fetch` values are used as the refspecs--they specify which refs to fetch and which local refs to update. The example above will fetch all branches that exist in the `origin` (i.e. any ref that matches the left-hand side of the value, `refs/heads/*`) and update the corresponding remote-tracking branches in the `refs/remotes/origin/*` hierarchy.

* When `git fetch` is run with explicit branches and/or tags to fetch on the command line, e.g. `git fetch origin master`, the <refspec>s given on the command line determine what are to be fetched (e.g. `master` in the example, which is a short-hand for `master:`, which in turn means "fetch the 'master' branch but I do not explicitly say what remote-tracking branch to update with it from the command line"), and the example command will fetch _only_ the 'master' branch. The `remote.<repository>.fetch` values determine which remote-tracking branch, if any, is updated. When used in this way, the `remote.<repository>.fetch` values do not have any effect in deciding _what_ gets fetched (i.e. the values are not used as refspecs when the command-line lists refspecs); they are only used to decide _where_ the refs that are fetched are stored by acting as a mapping.

O último valores do `remote.<repositório>.fetch` podem ser substituídos, ao usar os parâmetros `--refmap=<refspec>` na linha de comando.

PODA
----

A disposição predefinida do Git se organiza de forma a manter os dados a menos que sejam descartados de forma explicita; isso se estende a manter referências locais nas ramificações remotas que elas mesmas excluíram.

Se desassistidas, essas referências obsoletas podem piorar o desempenho em repositórios grandes e ocupados aonde apresentam muita rotatividade e por exemplo, façam uso de comandos como `git branch -a --contains <commit>` cuja saída é desnecessariamente detalhada, cautilizando impacto de desempenho em qualquer outra referência de trabalho conhecida.

Estas referências de rastreamento remoto podem ser excluídas com um único:

------------------------------------------------
# Enquanto estiver fazendo a captura
$ git fetch --prune <nome>

# Exclua apenas, não busque nada
$ git remote prune <nome>
------------------------------------------------

Para remover as referências como parte do seu fluxo de trabalho normal sem precisar se lembrar de executá-lo, defina `fetch.prune` globalmente ou com a configuração ` remote.<nome>.prune` por ramo remoto. Consulte linkgit:git-config[1].

Aqui é onde as coisas ficam complicadas e mais específicas. O recurso de poda não se preocupa de fato com as ramificações; em vez disso, ele poda as referências remotas <--> locais como uma função no refspec remoto (consulte `<refspec>` e <<CRTB,CONFIGURAÇÕES DOS RAMOS MONITORADOS REMOTAMENTE>> acima).

Portanto, caso o `refspec` remoto inclua `refs/tags/*:refs/tags/*` por exemplo ou caso execute manualmente `git fetch --prune <nome> "refs/tags/*:refs/tags/*"` por exemplo. As ramificações remotas rastreadas que forem excluídas não expirarão, a não ser qualquer outra tag local que não exista remotamente.

Senão for o que você deseja, caso queira remover remotamente o `<nome>` por exemplo e também capturar explicitamente as tags a partir dele; primeiramente, ao recolher dele você exclui todas as tags locais, a maioria das quais podem não terem vindo do `<nome>` remoto.

Assim, tenha cuidado ao utilizar isso com um `refspec` como `refs/tags/*:refs/tags/*` ou qualquer outro `refspec` que possa mapear as referências de diferentes pontos remotos para o mesmo `namespace` local.

Como manter-se atualizado com as ramificações e as tags remotamente é um caso de uso comum, a opção `--prune-tags` pode ser utilizada junto com o `--prune` para remover as tags locais que não existam no ponto remoto e impor a atualização dessas tags que estiverem diferentes. A remoção de tags também podem ser ativadas com `fetch.pruneTags` ou `remote.<nome>.pruneTags` nas configurações. Consulte linkgit:git-config[1].

A opção `--prune-tags` é equivalente a ter o `refs/tags/*:refs/tags/*` declarado nos `refspecs` remotos. Isso pode ocasionar algumas interações estranhas:

------------------------------------------------
# Ambas capturam as tags
$ git fetch --no-tags origin 'refs/tags/*:refs/tags/*'
$ git fetch --no-tags --prune-tags origin
------------------------------------------------

O motivo pelo qual não ocorre um erro durante o uso sem a opção `--prune` ou as suas versões de configuração, é a flexibilidade das versões configuradas, para manter um mapeamento 1=1 entre as opções da linha de comando e o que as versões das configuração fazem.

É razoável que a configuração `fetch.pruneTags=true` em `~/.gitconfig` que as tags sejam removidas sempre que o comando `git fetch --prune` seja executado, sem fazer com que todas as invocações do comando `git fetch` sem a opção `--prune` cause um erro.

A remoção de tags com `--prune-tags` também funciona durante o resgate de uma URL em vez de um determinado nome remoto. Todas essas tags de remoção serão encontradas em `origin`:

------------------------------------------------
$ git fetch origin --prune --prune-tags
$ git fetch origin --prune 'refs/tags/*:refs/tags/*'
$ git fetch <url-of-origin> --prune --prune-tags
$ git fetch <url-of-origin> --prune 'refs/tags/*:refs/tags/*'
------------------------------------------------

SAÍDA
-----

A saída do comando "git fetch" depende do método de transporte utilizado; Esta seção descreve a saída durante a utilização da captura ao utilizar o protocolo Git (localmente ou via ssh) e o protocolo inteligente "Smart HTTP".

A condição da saída durante a captura é produzida em forma de tabela, com cada linha representando a condição de uma única referência. Cada linha é uma forma de:

-------------------------------
 <flag> <resumo> <de> -> <para> [<motivo>]
-------------------------------

Ao usar `--porcelain`, o formato gerado serve para ser analisado por uma máquina. Em contraste com os formatos de saída legíveis para humanos, ele imprime na saída predefinida em na de erro padrão. Cada linha tem o formato:

-------------------------------
<flag> <id-antiga-do-objeto> <id-nova-do-objeto> <referência-local>
-------------------------------

A condição das referências atualizadas é exibido caso a opção --verbose seja utilizada.

O modo de saída compacta é definida com a variável de configuração `fetch.output`, caso `<de>` ou `<para>` seja inteiramente encontrada em outra cadeia de caracteres, esta será substituída por `*` na outra cadeia de caracteres. `master -> origin/master` se torna `master -> origin/*` por exemplo.

sinalizar, sinalização, indicação, marcação, marcador::
	Um único caractere indicando a condição da referência:
(space);; para um avanço rápido bem sucedido;
`+`;; para uma imposição de atualização bem sucedida;
`-`;; para uma eliminação da referência bem sucedida;
`t`;; para uma atualização da tag bem sucedida;
`*`;; para a captura de uma nova referência bem sucedida;
`!`;; para uma referência que foi rejeitada ou a sua atualização tenha falhado; e
`=`;; para uma referência que estava atualizada e não precisou de nenhuma captura.

resumo::
	Para a a captura de uma referência bem sucedida, o resumo exibe os valores antigos e novos num formato adequado para a utilização como argumento para o comando `git log` (`<antigo>..<novo>` na maioria dos casos, e `<antigo>...<novo>` para atualizações de avanço rápido que forem impostas).

de::
	The name of the remote ref being fetched from, minus its `refs/<tipo>/` prefix. In the case of deletion, the name of the remote ref is "(none)".

para::
	The name of the local ref being updated, minus its `refs/<tipo>/` prefix.

motivo::
	Uma explicação legível para humanos. No caso de referências capturadas com sucesso, nenhuma explicação é necessária. Para uma referência com falha, o motivo será explanado.

EXEMPLOS
--------

* Atualize as ramificações de rastreamento remoto:
+
------------------------------------------------
$ git fetch origin
------------------------------------------------
+
O comando acima copia todas as ramificações do `refs/heads/` do espaço de nomes remoto e as armazena em `refs/remotes/origin/` com um espaço de nomes local, a menos que a opção `remote.<repositório>.fetch` seja utilizada para definir um `refspec` fora do que já vem predefinido.

* Utilizando `refspecs` de forma explicita:
+
------------------------------------------------
$ git fetch origin +seen:seen maint:tmp
------------------------------------------------
+
This updates (or creates, as necessary) branches `seen` and `tmp` in the local repository by fetching from the branches (respectively) `seen` and `maint` from the remote repository.
+
O ramo `seen` será atualizado ainda que não faça um avanço rápido, porque é prefixado com um sinal de mais; já o `tmp` não será.

* Dê uma olhada no ramo remoto sem a configuração remota do seu repositório local:
+
------------------------------------------------
$ git fetch git://git.kernel.org/pub/scm/git/git.git maint
$ git log FETCH_HEAD
------------------------------------------------
+
The first command fetches the `maint` branch from the repository at `git://git.kernel.org/pub/scm/git/git.git` and the second command uses `FETCH_HEAD` to examine the branch with linkgit:git-log[1]. The fetched objects will eventually be removed by git's built-in housekeeping (see linkgit:git-gc[1]).

include::transfer-data-leaks.txt[]

CONFIGURAÇÃO
------------

include::includes/cmd-config-section-all.txt[]

include::config/fetch.txt[]

BUGS
----
Com a opção `--recurse-submodules` só se pode buscar por novos commits nos submódulos que estejam presentes localmente, por exemplo, em `$GIT_DIR/modules/`. Se o upstream adicionar um novo submódulo, este submódulo não pode ser buscado até que seja clonado, por exemplo, através do `git submodule update`. Isso deve ser corrigido numa versão futura do Git.

VEJA TAMBÉM
-----------
linkgit:git-pull[1]

GIT
---
Parte do conjunto linkgit:git[1]
