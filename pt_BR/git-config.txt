git-config(1)
=============

NOME
----
git-config - Obtenha e defina opções globais ou do repositório


RESUMO
------
[verse]
'git config' [<opção-do-arquivo>] [--type=<tipo>] [--fixed-value] [--show-origin] [--show-scope] [-z|--null] nome [valor [value-pattern]]
'git config' [<opção-do-arquivo>] [--type=<tipo>] --add nome valor
'git config' [<opção-do-arquivo>] [--type=<tipo>] [--fixed-value] --replace-all nome valor [value-pattern]
'git config' [<opção-do-arquivo>] [--type=<tipo>] [--show-origin] [--show-scope] [-z|--null] [--fixed-value] --get nome [value-pattern]
'git config' [<opção-do-arquivo>] [--type=<tipo>] [--show-origin] [--show-scope] [-z|--null] [--fixed-value] --get-all nome [value-pattern]
'git config' [<opção-do-arquivo>] [--type=<tipo>] [--show-origin] [--show-scope] [-z|--null] [--fixed-value] [--name-only] --get-regexp name_regex [value-pattern]
'git config' [<opção-do-arquivo>] [--type=<tipo>] [-z|--null] --get-urlmatch nome URL
'git config' [<opção-do-arquivo>] [--fixed-value] --unset nome [value-pattern]
'git config' [<opção-do-arquivo>] [--fixed-value] --unset-all nome [value-pattern]
'git config' [<opção-do-arquivo>] --rename-section nome_antigo novo_nome
'git config' [<opção-do-arquivo>] --remove-section nome
'git config' [<opção-do-arquivo>] [--show-origin] [--show-scope] [-z|--null] [--name-only] -l | --list
'git config' [<opção-do-arquivo>] --get-color nome [default]
'git config' [<opção-do-arquivo>] --get-colorbool nome [stdout-is-tty]
'git config' [<opção-do-arquivo>] -e | --edit

DESCRIÇÃO
---------
Você pode consultar, definir, substituir e remover opções com este comando. Na verdade o nome é a seção e a chave são separadas por um ponto, e seu valor será escapado.

Várias linhas podem ser adicionadas utilizando a opção `--add`. Caso queira atualizar ou remover alguma opção que pode ocorrer em várias linhas, um `value-pattern` (que é uma expressão regular extendida a menos que a opção `--fixed-value` seja usada) precisa ser utilizado. Apenas os valores existentes que correspondam à um pattern são atualizados ou não definidos. Caso queira manipular as linhas que *não* correspondam com o pattern, basta colocar um único ponto de exclamação na frente (consulte também <<EXEMPLOS>>), observe porém que isso só funciona quando a opção `--fixed-value` não estiver em uso.

A opção `--type=<tipo>` instrui o 'git config' para garantir que os valores que chegam e os que saem sejam canonicamente compatíveis com o <tipo>. Caso nenhum `--type=<tipo>` seja utilizado, nenhuma canonização será realizada. Os autores dos chamados podem desconfigurar um `--type` existente com a opção `--no-type`.

A leitura destes valores são lidos do sistema nos arquivos de configuração global local e do repositório, é predefinido que as opções `system`, `global`, `local`, `worktree` e `file` possam ser utilizadas para dizer ao comando para ler somente deste local (consulte <<ARQUIVOS>>).

Durante a escrita, é predefinido que o novo valor é gravado no arquivo de configuração local do repositório e as opções `system`, `global`, `worktree`, `file` possam ser utilizadas para dizer ao comando para gravar nesse local (você pode dizer `--local`, porém esta é a predefinição).

Este comando falhará com uma condição diferente de zero em caso de erro. Alguns códigos de saída são:

- A seção ou chave é inválida (`ret=1`),
- nenhuma seção ou nome foi informado (`ret=2`),
- o arquivo de configuração é inválido (`ret=3`),
- o arquivo de configuração não pode ser gravado (`ret=4`),
- você tenta desmarcar uma opção que não existe (`ret=5`),
- você tenta desmarcar ou definir uma opção para a qual várias linhas coincidem (`ret=5`) ou
- você tenta usar um regexp inválido (`ret=6`).

Em casos bem sucedidos o comando retorna o código 0.

OPÇÕES
------

--replace-all::
	O comportamento predefinido é substituir pelo menos uma linha. Isso substitui todas as linhas que coincidam com a chave (e opcionalmente ao `value-pattern`).

--add::
	Adiciona uma nova linha à opção, sem alterar nenhum valor já existente. É o mesmo que informar '^$' como o `value-pattern` na opção `--replace-all`.

--get::
	Obtenha o valor para uma determinada chave (opcionalmente filtrada por uma expressão regular que coincida com o valor). Retorna o código de erro '1' caso a chave não seja encontrada e o último valor caso vários valores da chave sejam encontrados.

--get-all::
	Como get, mas retorna todos os valores para uma chave com vários valores.

--get-regexp::
	Como a opção `--get-all`, porém interpreta o nome como uma expressão regular e escreve os nomes das chaves. A coincidência comum da expressão regular é sensível a maiúsculas e minúsculas, é feita contra uma versão canonizado da chave onde a seção e os nomes das variáveis são minúsculas, porém os nomes das subseções não são.

--get-urlmatch nome URL::
	Quando é utilizado em um nome com duas partes `section.key`, o valor da `section.<url>.key` cuja parte da <url> coincida para o retorno da melhor URL informada (caso essa chave não exista, o valor do `section.key` será usado como substituto). Quando receber apenas a seção como nome, faça-o para todas as chaves da seção e liste-as. Retorna o código de erro 1 caso nenhum valor seja encontrado.

--global::
	Para escrever opções: escreva para o arquivo global `~/.gitconfig` em vez do repositório `.git/config`, escreva para o arquivo `$XDG_CONFIG_HOME/git/config` se este arquivo existir e o arquivo `~/.gitconfig` não faz.
+
Para opções de leitura: leia somente do global `~/.gitconfig` e de` $XDG_CONFIG_HOME/git/config` ao invés de todos os arquivos disponíveis.
+
Consulte também <<ARQUIVOS>>.

--system::
	Para opções de escrita: escreva para o `$(prefixo)/etc/gitconfig` do sistema em vez do repositório `.git/config`.
+
Para opções de leitura: leia somente do `$(prefixo)/etc/gitconfig` em todo o sistema, e não de todos os arquivos disponíveis.
+
Consulte também <<ARQUIVOS>>.

--local::
	Para as opções de escrita: escreva no arquivo do repositório `.git/config`. Este é o comportamento predefinido.
+
Para as opções da leitura: leia somente no repositório `.git/config` em vez de todos os arquivos disponíveis.
+
Consulte também <<ARQUIVOS>>.

--worktree::
	Semelhante a opção `--local`, exceto que o a opção de configuração `.git/config.worktree` é lido ou gravado caso `extensions.worktreeConfig` existir. Caso não seja, é o mesmo que a opção `--local`.

-f arquivo-config::
--file arquivo-config::
	Utilize o arquivo de configuração informado em vez daquele especificado por GIT_CONFIG.

--blob blob::
	É semelhante a opção `--file` porém utilize a bolha informada em vez de um arquivo. Como por exemplo, é possível utilizar 'master:.gitmodules' para ler os valores de um arquivo '.gitmodules' no ramo "master". Para conhecer uma lista completa das diferentes maneiras de soletrar os nomes das bolhas, consulte a seção "DEFININDO AS REVISÕES" em linkgit:gitrevisions[7].

--remove-section::
	Remova a seção dada do arquivo de configuração.

--rename-section::
	Renomeie a seção dada para um novo nome.

--unset::
	Remove do arquivo de configuração a linha correspondente à chave.

--unset-all::
	Remove do arquivo de configuração todas as linhas que correspondam à chave.

-l::
--list::
	Lista todas as variáveis definidas no arquivo de configuração, junto com seus valores.

--fixed-value::
	Quando utilizado com o argumento `value-pattern`, trate o `value-pattern` como uma string exata em vez de uma expressão regular. Isto restringirá os pares nome e o valor que são coincididos apenas com aqueles onde o valor é exatamente igual ao `value-pattern`.

--type <tipo>::
  'git config' irá assegurar que qualquer entrada ou saída é válida sob a(s) restrição(ões) de tipo dada, e irá canonicalizar os valores de saída na forma canônica do `<tipo>`'s.
+
Os `<tipo>`'s válidos incluem:
+
- 'bool': canoniza os valores como 'true' ou 'false'.
- 'int': canoniza os valores como números decimais simples. Um sufixo opcional com 'k', 'm' ou 'g' fará com que o valor seja multiplicado por 1024, 1048576 ou 1073741824 na entrada.
- 'bool-or-int': canoniza de acordo com 'bool' ou 'int', como descrito acima.
- 'path': canonize ao adicionar um sinal `~` no começo para o valor `$HOME` e `~user` no diretório home do usuário especificado. Este especificador não tem efeito durante a definição do valor (porém você pode utilizar o comando `git config section.variable ~ /` na linha de comando para permitir que o seu shell faça a expansão.)
- 'data validade': canoniza convertendo a partir de uma cadeia com data fixa ou relativa a um registro de data e hora. Este especificador não tem efeito quando for definir o valor.
- 'color': Quando obtiver um valor, canonize através da conversão para uma sequência no padrão ANSI de cor. Ao definir um valor, uma verificação é realizada para garantir que o valor informado seja canonizável como uma cor ANSI, porém será escrito como estiver.
+

--bool::
--int::
--bool-or-int::
--path::
--expiry-date::
  Opções históricas para selecionar um especificador de tipo. Em vez disso, prefira opção `--type` (veja acima).

--no-type::
  Indetermine o tipo do especificador definido anteriormente (caso tenha sido definido anteriormente). Esta opção solicita que o comando 'git config' não canonize a variável recuperada. A opção `--no-type` não tem qualquer efeito sem a opção `--type=<tipo>` ou `--<tipo>`.

-z::
--null::
	Para todas as opções que gerem valores e/ou chaves, sempre finalize os valores com o caractere nulo (em vez de uma nova linha). Utilize a nova linha como um delimitador entre chave e valor. Isso permite uma análise segura do que for gerado sem se confundir, por exemplo, através de valores que tenham quebras de linha.

--name-only::
	Gere apenas os nomes das variáveis de configuração para `--list` ou `--get-regexp`.

--show-origin::
	Aumente a geração de todas as opções de configuração consultadas com o tipo da origem (arquivo, entrada padrão, blob, linha de comando) e a origem real (o caminho do arquivo de configuração, da "ref" ou a ID da bolha, caso seja aplicável).

--show-scope::
	Semelhante a opção `--show-origin`, na medida em que aumenta a saída de todas as opções de configuração consultadas com o escopo deste valor (`local`, `global`, `system`, `command`).

--get-colorbool nome [stdout-is-tty]::

	Encontre a configuração das cores para `nome` (por exemplo, `color.diff`) e gere 'true' ou 'false'. O `stdout-is-tty` deve ser 'true' ou 'false' e é levado em consideração quando a configuração diz "auto". Caso `stdout-is-tty` esteja ausente, verifique a saída padrão do próprio comando e encerre com a condição '0' caso a cor deva ser utilizada, ou caso contrário, encerre com a condição '1'. Quando a configuração das cores para `nome` for indefinida, o comando retroage e em vez disso usa `color.ui`.

--get-color nome [default]::

	Localize a cor configurada para `nome` (`color.diff.new` por exemplo) e gere a sequência no padrão ANSI de cor. Em vez disso o parâmetro opcional `default` é utilizado, caso não haja uma cor configurada para `nome`.
+
`--type=color [--default=<default>]` é preferível em vez de `--get-color` (porém repare que a opção `--get-color` omitirá a nova linha impressa por `--type=color`).

-e::
--edit::
	Abre um editor para alterar o arquivo de configuração informado; ou `--system`,` --global` ou repositório (predefinido).

--[no-]includes::
	Respeite as diretivas `include.*` nos arquivos de configuração ao procurar pelos valores. A predefinição retorna para `off` quando determinado arquivo seja informado (por exemplo, usando os comandos `--file`, `--global`, etc) e ao pesquisar por todos os arquivos de configuração.

--default <valor>::
  Ao usar `--get` e a variável solicitada não for encontrada, comportar-se como se o <valor> fosse o valor atribuído à variável.

CONFIGURAÇÃO
------------
O `pager.config` somente é respeitado durante a listagem da configuração, ou seja, ao utilizar a opção `--list` ou qualquer um dos `--get-*` que podem retornar diversos resultados. A predefinição é utilizar um pager.

[[FILES]]
ARQUIVOS
--------

Caso não seja definido de forma explicita com a opção `--file`, existem quatro arquivos onde o 'git config' irá procurar as opções de configuração:

$(prefixo)/etc/gitconfig::
	Arquivo de configuração do sistema.

$XDG_CONFIG_HOME/git/config::
	Segundo arquivo de configuração específico do usuário. Caso $XDG_CONFIG_HOME não esteja definido ou esteja vazio , a opção de configuração `$HOME/.config/git/config` será utilizada. Qualquer variável com valor único definido neste arquivo será substituída pelo que estiver em `~/.gitconfig`. É uma boa ideia não criar este arquivo no caso de você às vezes usar versões mais antigas do Git, pois o suporte para este arquivo foi adicionado recentemente.

~/.gitconfig::
	Arquivo de configuração específico do usuário. Também chamado de arquivo de configuração "global".

$GIT_DIR/config::
	Arquivo de configuração específico do repositório.

$GIT_DIR/config.worktree::
	Isso é opcional e só é pesquisado quando o arquivo `extensions.worktreeConfig` está presente em $GIT_DIR/config.

Caso nenhuma outra opção seja utilizada, todas as opções de leitura irão ler todos estes arquivos que estiverem disponíveis. Caso o arquivo global ou o arquivo de configuração global inteiro não esteja disponível, eles serão ignorados. Caso o arquivo de configuração do repositório não estiver disponível ou legível, o comando 'git config' encerrará com um código de erro diferente de zero. No entanto, em nenhum dos casos será emitida uma mensagem de erro.

Os arquivos são lidos na ordem dada acima, com o último valor encontrado tendo precedência sobre os valores lidos anteriormente. Quando vários valores são obtidos, então todos os valores de uma chave de todos os arquivos, serão usados.

Você pode substituir os parâmetros da configuração dos parâmetros individuais ao executar qualquer comando git utilizando a opção `-c`. Para mais detalhes, consulte linkgit:git[1].

É predefinido que todas as opções de gravação sejam gravadas no arquivo de configuração específico do repositório. Observe que isso também afeta opções como `--replace-all` e `--sunset`. *O comando 'git config' sempre irá alterar um arquivo por vez*.

Estas regras podem ser substituídas através da linha de comando ou através das variáveis de ambiente. As opções `--global`, `--system` e `--worktree` limitarão o arquivo utilizado ao arquivo global, em todo o sistema ou por árvore de trabalho, respectivamente. A variável de ambiente `GIT_CONFIG` environment variable has a similar effecttem um efeito similar, porém é possível definir um nome do arquivo caso queira.


VARIÁVEIS DO AMBIENTE
---------------------

GIT_CONFIG::
	Pegue a configuração do arquivo informado em vez de .git/config. Usar a opção "--global" força isso para ~/.gitconfig. Usar a opção "--system" força isso para $(prefixo)/etc/gitconfig.

GIT_CONFIG_NOSYSTEM::
	Independente se você vai ignorar as configurações de leitura do arquivo `$(prefix)/etc/gitconfig` do sistema. Para mais detalhes, consulte linkgit:git[1].

Consulte também <<ARQUIVOS>>.

GIT_CONFIG_COUNT::
GIT_CONFIG_KEY_<n>::
GIT_CONFIG_VALUE_<n>::
	Caso GIT_CONFIG_COUNT seja definido como um número positivo, todos os pares do ambiente GIT_CONFIG_KEY_<n> e GIT_CONFIG_VALUE_<n> até esse número serão adicionados à configuração durante a execução do processo. Os pares de configuração são indexados por zero. Qualquer chave ou valor ausente são tratados como erro. Um GIT_CONFIG_COUNT vazio é tratado da mesma maneira que GIT_CONFIG_COUNT=0, ou seja, nenhum par é processado. Estas variáveis de ambiente substituirão os valores nos arquivos de configuração, mas serão substituídas por quaisquer opções explícitas passadas através do comando `git -c`.
+
É útil para os casos onde você queira gerar vários comandos git com uma configuração comum, porém não pode depender de um arquivo de configuração, ao escrever scripts por exemplo.


[[EXAMPLES]]
EXEMPLOS
--------

Dado um .git/config como este:

------------
#
# Este é o arquivo de configuração e
# um caractere '#' ou ';' serve como
# um comentário
#

; variáveis principais
[core]
	; Não confie nos modos dos arquivos
	filemode = false

; Nosso próprio algorítimo diff
[diff]
	external = /usr/local/bin/diff-wrapper
	renames = true

; Configurações de proxy
[core]
	gitproxy=proxy-command for kernel.org
	gitproxy=default-proxy ; for all the rest

; HTTP
[http]
	sslVerify
[http "https://weak.example.com"]
	sslVerify = false
	cookieFile = /tmp/cookie.txt
------------

você pode definir o `filemode` como 'true' com

------------
% git config core.filemode true
------------

As hipotéticas entradas de comando do proxy realmente têm um postfix para discernir a qual URL elas se aplicam. Aqui um exemplo de como alterar a entrada do kernel.org para "ssh".

------------
% git config core.gitproxy '"ssh" for kernel.org' 'for kernel.org$'
------------

Isso garante que apenas o par de chave/valor do kernel.org seja substituído.

Para excluir a entrada para renomear, faça

------------
% git config --unset diff.renames
------------

Caso queira excluir uma entrada para um "multivar" (como `core.gitproxy` acima), é necessário fornecer um `regex` que coincida com o valor exato de uma linha.

Para consultar o valor para uma determinada chave, faça

------------
% git config --get core.filemode
------------

ou

------------
% git config core.filemode
------------

ou, para consultar um `multivar`:

------------
% git config --get core.gitproxy "for kernel.org$"
------------

Caso queira conhecer todos os valores de um `multivar`, faça:

------------
% git config --get-all core.gitproxy
------------

Caso queira viver perigosamente, é possível substituir *all* `core.gitproxy` por um novo com

------------
% git config --replace-all core.gitproxy ssh
------------

No entanto, caso queira realmente substituir apenas a linha pelo proxy predefinido, ou seja, aquele sem um "for ..." `postfix`, faça algo assim:

------------
% git config core.gitproxy ssh '! for '
------------

Para que haja a real coincidência apenas com os valores de um ponto de exclamação, é necessário

------------
% git config section.key value '[!]'
------------

Para adicionar um novo proxy, sem alterar qualquer outro já existente, utilize

------------
% git config --add core.gitproxy '"proxy-command" for example.com'
------------

Um exemplo para usar cores personalizadas da configuração em seu script:

------------
#!/bin/sh
WS=$(git config --get-color color.diff.whitespace "blue reverse")
RESET=$(git config --get-color "" "reset")
echo "${WS}your whitespace color or blue reverse${RESET}"
------------

Para URLSs em `https://weak.example.com`, `http.sslVerify` está definido como `false`, enquanto está definido para `true` para todos os outros:

------------
% git config --type=bool --get-urlmatch http.sslverify https://good.example.com
true
% git config --type=bool --get-urlmatch http.sslverify https://weak.example.com
false
% git config --get-urlmatch http https://weak.example.com
http.cookieFile /tmp/cookie.txt
http.sslverify false
------------

include::config.txt[]

BUGS
----
Ao utilizar a sintaxe já obsoleta `[section.subsection]`, alterando um valor, resultará na adição de uma chave com várias linhas em vez de uma alteração apenas, caso a subseção seja informada com pelo menos um caractere em maiúsculo. Por exemplo, quando a configuração se parece

--------
  [section.subsection]
    key = value1
--------

e executando `git config section.Subsection.key value2` resultará em

--------
  [section.subsection]
    key = valor1
    key = valor2
--------


GIT
---
Parte do conjunto linkgit:git[1]
