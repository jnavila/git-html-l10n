--all::
	Buscar todos os controles remotos.

-a::
--append::
	Anexe os nomes das ref e os nomes dos objetos das referências buscadas ao
	conteúdo existente de `.git/FETCH_HEAD`. Sem essa opção, os dados antigos em
	`.git/FETCH_HEAD` serão sobrescritos.

--depth=<profundidade>::
	Limite a busca para o número especificado de confirmações da ponta de cada
	histórico de ramificação remota. Se buscar um repositório 'superficial'
	criado pelo `git clone` com a opção` --depth = <depth> `(veja
	linkgit:git-clone[1]), aprofunde ou encurte o histórico para o número
	especificado de commits. As tags para as confirmações aprofundadas não são
	buscadas.

--deepen=<profundidade>::
	Semelhante a --depth, exceto que especifica o número de confirmações do
	limite raso atual em vez da ponta de cada histórico de ramificação remota.

--shallow-since=<data>::
	Aprofundar ou encurtar o histórico de um repositório raso para incluir todas
	as confirmações alcançáveis após <data>.

--shallow-exclude=<revisão>::
	Aprofundar ou encurtar o histórico de um repositório raso para incluir todas
	as confirmações alcançáveis após <data>.

--unshallow::
	Se o repositório de origem estiver completo, converta um repositório raso em
	um completo, removendo todas as limitações impostas pelos repositórios
	rasos.
+
Se o repositório de origem for superficial, busque o máximo possível para
que o repositório atual tenha o mesmo histórico que o repositório de origem.

--update-shallow::
	Por padrão, ao buscar a partir de um repositório superficial, o `git fetch`
	recusa refs que requerem atualização .git/shallow. Esta opção atualiza
	.git/shallow e aceita tais referências.

--negociação-tip=<commit|glob>::
	Por padrão, o Git reportará, ao servidor, o commit alcançável de todos os
	refs locais para encontrar commits comuns na tentativa de reduzir o tamanho
	do arquivo de pacotes a ser recebido. Se especificado, o Git só reportará
	commits alcançáveis das dicas dadas. Isso é útil para acelerar buscas quando
	o usuário sabe qual ref local provavelmente terá commits em comum com o ref
	upstream sendo buscado.
+
Esta opção pode ser especificada mais de uma vez; Se assim for, o Git irá
reportar commits de qualquer um dos commits dados.
+
O argumento para essa opção pode ser um glob nos nomes de ref, um ref ou o
(possivelmente abreviado) SHA-1 de um commit. A especificação de glob é
equivalente a especificar essa opção várias vezes, uma para cada nome de
referência correspondente.
+
Veja também a variável de configuração `fetch.negotiationAlgorithm`
documentada em linkgit:git-config[1].

--dry-run::
	Mostre o que seria feito, sem fazer alterações.

-f::
--force::
	Quando 'git fetch' é usado com `<src>: <dst>` refspec ele pode se recusar a
	atualizar o branch local como discutido
ifdef::git-pull[]
	na parte `<refspec>` do linkgit:git-fetch[1]
	documentação.
endif::git-pull[]
ifndef::git-pull[]
	na parte `<refspec>` abaixo.
endif::git-pull[]
	Esta opção sobrescreve essa verificação.

-k::
--keep::
	Mantenha o pacote baixado.

ifndef::git-pull[]
--multiple::
	Permitir que vários argumentos <repository> e <group> sejam
	especificados. Nenhum <refspec> s pode ser especificado.

--[no-]auto-gc::
	Execute `git gc --auto` no final para executar a coleta de lixo, caso seja
	necessário. A predefinição é, sempre ativado.

--[no-]write-commit-graph::
	Grave um gráfico do commit após a captura remota. Este sobrescreve a
	configuração `fetch.writeCommitGraph`.
endif::git-pull[]

-p::
--prune::
	Antes de buscar, remova todas as referências de rastreamento remoto que não
	existem mais no controle remoto. As tags não estão sujeitas a remoção se
	forem buscadas apenas por causa do acompanhamento automático da tag padrão
	ou devido a uma opção --tags. No entanto, se as tags forem buscadas devido a
	um refspec explícito (na linha de comando ou na configuração remota, por
	exemplo, se o controle remoto foi clonado com a opção --mirror), elas também
	estarão sujeitas a remoção. Fornecer `--prune-tags` é uma forma abreviada de
	fornecer a tag refspec.
ifndef::git-pull[]
+
Veja a seção de PRUNING abaixo para mais detalhes.

-p::
--prune-tags::
	Antes de buscar, remova quaisquer tags locais que não existam mais no
	controle remoto se `--prune` estiver ativado. Esta opção deve ser usada com
	mais cuidado, ao contrário de `--prune` ela irá remover quaisquer
	referências locais (tags locais) que tenham sido criadas. Esta opção é uma
	forma abreviada de fornecer o refspec de tag explícito junto com o
	`--prune`, veja a discussão sobre isso em sua documentação.
+
Veja a seção de PRUNING abaixo para mais detalhes.

endif::git-pull[]

ifndef::git-pull[]
-n::
endif::git-pull[]
--no-tags::
	Por padrão, as tags que apontam para objetos que são baixados do repositório
	remoto são buscadas e armazenadas localmente. Esta opção desativa esta tag
	automática. O comportamento padrão de um controle remoto pode ser
	especificado com a configuração remota. <Nome>.tagOpt. Veja
	linkgit:git-config[1].

--refmap=<refspec>::
	Ao buscar refs listadas na linha de comando, use o refspec especificado
	(pode ser fornecido mais de uma vez) para mapear os refs para filiais de
	rastreamento remoto, em vez dos valores das variáveis de configuração
	`remote.*.Fetch` para o repositório remoto. Consulte a seção "Ramificações
	de rastreamento remoto configuradas" para detalhes.

-t::
--tags::
	Busque todas as tags do controle remoto (ou seja, busque as tags remotas
	`refs/tags/*` em tags locais com o mesmo nome), além de qualquer outra coisa
	que seria buscada. Usar essa opção sozinha não submete as tags à remoção,
	mesmo se --prune for usado (embora as tags possam ser removidas de qualquer
	maneira, se elas também forem o destino de uma referência explícita;
	consulte `--prune`).

ifndef::git-pull[]
--recurse-submodules[=yes|on-demand|no]::
	This option controls if and under what conditions new commits of populated
	submodules should be fetched too. It can be used as a boolean option to
	completely disable recursion when set to 'no' or to unconditionally recurse
	into all populated submodules when set to 'yes', which is the default when
	this option is used without any value. Use 'on-demand' to only recurse into
	a populated submodule when the superproject retrieves a commit that updates
	the submodule's reference to a commit that isn't already in the local
	submodule clone. By default, 'on-demand' is used, unless
	`fetch.recurseSubmodules` is set (see linkgit:git-config[1]).
endif::git-pull[]

-j::
--jobs=<n>::
	Number of parallel children to be used for all forms of fetching.
+
Caso a opção `--multiple` seja especificada, diferentes ramos remotos serão
buscados em paralelo. Caso vários submódulos seja buscados, este serão
buscados em paralelo. Para controlá-los independentemente, use as definições
de configuração `fetch.parallel` e `submodule.fetchJobs` (consulte
linkgit:git-config[1]).
+
Normalmente, buscas remotas de múltiplos ramos de forma paralela e recursiva
serão mais rápidas. A predefinição é realizar buscas em sequência e não e
paralelo.

ifndef::git-pull[]
--no-recurse-submodules::
	Desabilite a busca recursiva de submódulos (tem o mesmo efeito que usar a
	opção `--recurse-submodules=no`).
endif::git-pull[]

--set-upstream::
	Caso a busca remota seja bem sucedida, uma referência de rastreamento `pull`
	e `add` será adicionada ao upstream, utilizado pelo argumento `less`
	linkgit:git-pull[1] e outros comandos. Para mais informações, consulte
	`branch.<name>.merge` e `branch.<name>.remote` em linkgit:git-config[1].

ifndef::git-pull[]
--submodule-prefix=<path>::
	Anexar <path> para os caminhos impressos nas mensagens informativas como
	"Recolhendo o submódulo foo".  Esta opção é utilizada internamente quando
	recorrer as submódulos.

--recurse-submodules-default=[yes|on-demand]::
	Esta opção é utilizada internamente para prover temporariamente um valor não
	negative de forma predefinida para a opção --recurse-submodules.  Todos os
	outros métodos de configurar a recursão do submódulo `fetch` (como as
	configurações em linkgit:gitmodules[5] e linkgit:git-config[1]) sobrescreva
	esta opção usando --[no-]recurse-submodules diretamente.

-u::
--update-head-ok::
	Por padrão, 'git fetch' se recusa a atualizar a cabeça que corresponde à
	ramificação atual. Este sinalizador desativa o cheque. Isto é puramente para
	o uso interno de 'git pull' para se comunicar com 'git fetch', e a menos que
	você esteja implementando sua própria Porcelana, você não deve usá-la.
endif::git-pull[]

--upload-pack <pacote-para-envio>::
	Quando dado, e o repositório para buscar é manipulado por 'git fetch-pack',
	`--exec=<upload-pack>` é passado para o comando para especificar o caminho
	não padrão para o comando executado na outra extremidade.

ifndef::git-pull[]
-q::
--quiet::
	Passe - silencie para git-fetch-pack e silencie quaisquer outros comandos
	git usados internamente. O progresso não é relatado para o fluxo de erros
	padrão.

-v::
--verbose::
	Seja verboso.
endif::git-pull[]

--progress::
	O status de progresso é relatado no fluxo de erro padrão por padrão quando
	ele é anexado a um terminal, a menos que -q seja especificado. Esse
	sinalizador força o status de progresso mesmo se o fluxo de erro padrão não
	for direcionado para um terminal.

-o <option>::
--server-option=<option>::
	Transmita a string fornecida para o servidor ao se comunicar usando o
	protocolo versão 2. A string fornecida não deve conter um caractere NUL ou
	LF. A maneira que o servidor lida com as opções do servidor específicas para
	ele, incluindo as opções desconhecidas. Quando múltiplos
	`--server-option=<option>` são fornecidos, todos eles são enviados para o
	outro lado na ordem listada na linha de comando.

--show-forced-updates::
	É predefinido que o Git verifique se a atualização do ramo foi imposta
	durante uma busca. Isso pode ser desativado por meio de
	`fetch.showForcedUpdates`, porém a opção `--show-forced-updates garante que
	essa verificação ocorra.  Consulte linkgit:git-config[1].

--no-show-forced-updates::
	É predefinido que o Git verifique se a atualização do ramo foi imposta
	durante uma busca. Use a opção `--no-show-forced-updates` ou defina
	`fetch.showForcedUpdates` como to `false` para ignorar essa verificação por
	questões de desempenho. Se usada durante o `git pull`, a opção `--ff-only`
	ainda verificará as atualizações impostas antes de tentar uma atualização
	rápida. Consulte linkgit:git-config[1].

-4::
--ipv4::
	Use apenas endereços IPv4, ignorando endereços IPv6.

-6::
--ipv6::
	Use apenas endereços IPv6, ignorando endereços IPv4.
