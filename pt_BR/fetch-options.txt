--all::
	Capture todos os ramos remotos.

-a::
--append::
	Acrescente nomes ao "ref" e os nomes dos objetos refs capturados ao conteúdo existente de `.git/FETCH_HEAD`. Sem esta opção, os dados antigos em `.git/FETCH_HEAD` serão substituídos.

--atomic::
	Utilize uma transação atômica para atualizar as refs locais. Ou todas as refs são atualizadas ou por erro, nenhuma será.

--depth=<profundidade>::
	Limite a captura para uma quantidade específica de commits na ponta do histórico de cada ramificação remota. Caso esteja capturando um repositório 'shallow' (superficial) criado pelo `git clone` com a opção `--depth=<profundidade>` (consulte linkgit:git-clone[1]), aprofunde ou encurte o histórico para a quantidade usada de commits. As tags para os commits aprofundados não são capturados.

--deepen=<profundidade>::
	Semelhante a opção `--depth`, exceto que especifica a quantidade de commits do limite raso atual em vez da ponta de cada histórico do ramo remoto.

--shallow-since=<data>::
	Aprofunde ou encurte o histórico de um repositório raso para incluir todas os commits acessíveis após a <data>.

--shallow-exclude=<revisão>::
	Aprofunde ou diminua o histórico de um repositório raso para excluir os commits acessíveis vindos de uma determinada tag ou ramificação remota. Esta opção pode ser utilizada várias vezes.

--unshallow::
	Caso o repositório de origem esteja completo, converta um repositório raso em um completo, removendo todas as limitações impostas pelos repositórios rasos.
+
Caso o repositório de origem seja superficial, busque o máximo possível para que o repositório atual tenha o mesmo histórico que o repositório de origem.

--update-shallow::
	É predefinido que durante a captura em um repositório superficial, o `git fetch` recuse os refs que exijam a atualização do `.git/shallow`. Esta opção atualiza o `.git/shallow` e aceita tais refs.

--negotiation-tip=<commit|glob>::
	É predefinido que o Git relatará ao servidor os commits acessíveis de todos as refs locais para que localize os commits comuns na tentativa de reduzir o tamanho do pacote que será recebido. Caso seja utilizado, o Git relatará apenas os commits acessíveis a partir das dicas informadas. Útil para acelerar o processo "fetch" quando o usuário sabe qual a ref local que provavelmente, haverá commits em comum com uma ref upstream que está sendo capturada.
+
Esta opção pode ser utilizada mais de uma vez; Se assim for, o Git irá reportar os commits de qualquer um dos commits informados.
+
O argumento para esta opção pode ser um "ref" aos nomes de referência, uma referência ou o (possivelmente abreviado) SHA-1 de um commit. Especificar um agrupamento é o equivalente a utilizar esta opção várias vezes, uma para cada nome "ref" coincidente.
+
Consulte também a variável de configuração `fetch.negotiationAlgorithm` e `push.negotiate` documentada em linkgit:git-config[1] e na opção `--negotiate-only` abaixo.

--negotiate-only::
	Não busque nada do servidor e imprima os argumentos `--negotiation-tip=*` fornecidos anteriormente e que nós temos em comum com o servidor.
+
Internamente, isto é utilizado para implementar a opção `push.negotiate`, consulte linkgit:git-config[1].

--dry-run::
	Exiba apenas o que seria feito, sem fazer quaisquer alterações.

ifndef::git-pull[]
--[no-]write-fetch-head::
	Escreva a lista de referências remotas buscadas no arquivo `FETCH_HEAD` diretamente no`$GIT_DIR`. Este é o padrão. Usando a opção `--no-write-fetch-head` na linha de comando diz ao Git para não escrever o arquivo. Com opção `--dry-run`, o arquivo nunca é escrito.
endif::git-pull[]

-f::
--force::
	Quando 'git fetch' é utilizado com `<src>:<dst>` "refspec" ele pode se recusar a atualizar o ramo local como discutido
ifdef::git-pull[]
	na parte `<refspec>` da documentação do
	linkgit:git-fetch[1].
endif::git-pull[]
ifndef::git-pull[]
	na parte `<refspec>` abaixo.
endif::git-pull[]
	Esta opção sobrescreve esta verificação.

-k::
--keep::
	Mantenha o pacote que foi baixado.

ifndef::git-pull[]
--multiple::
	Permita que vários argumentos <repositório> e <grupo> sejam utilizados. Nenhum `<refspec>` pode ser utilizado.

--[no-]auto-maintenance::
--[no-]auto-gc::
	Caso seja necessário, execute o `git maintenance run --auto` no final para executar a manutenção automática do repositório. (`--[no-]auto-gc` is a synonym.) A predefinição é sempre ativo.

--[no-]write-commit-graph::
	Grave um grafo do commit após a captura remota. Este sobrescreve a configuração `fetch.writeCommitGraph`.
endif::git-pull[]

--prefetch::
	Altere o refspec configurado para colocar todos os refs no namespace `refs/prefetch/`. Consulte a tarefa `prefetch` em linkgit:git-maintenance[1].

-p::
--prune::
	Antes de capturar, remova as referências do rastreamento remoto que não exista mais remotamente. As tags não estão sujeitas a remoção caso sejam capturadas apenas por causa do acompanhamento automático da tag predefinida ou devido a uma opção `--tags`. No entanto, caso as tags seja capturadas por causa de um "refspec" explícito (na linha de comandos ou na configuração remota, por exemplo, caso haja uma clonagem remota com a opção `--mirror`), elas também estarão sujeitas a remoção. Informar a opção `--prune-tags` é uma abreviação para informar a tag refspec.
ifndef::git-pull[]
+
Consulte a seção de PRUNING abaixo para mais detalhes.

-p::
--prune-tags::
	Antes de capturar, remova as tags locais que não existam mais remotamente caso a opção `--prune` esteja ativa. Esta opção deve ser utilizada com mais cuidado, ao contrário da opção `--prune`, ela removerá todas as referências locais (tags locais) que forem criadas. Esta opção é um atalho para informar a tag explícita refspec junto com a opção `--prune`, consulte a discussão sobre isso em sua documentação.
+
Consulte a seção de PRUNING abaixo para mais detalhes.

endif::git-pull[]

ifndef::git-pull[]
-n::
endif::git-pull[]
--no-tags::
	É predefinido que as tags que apontem para os objetos baixados do repositório remoto sejam capturados e armazenadas localmente. Esta opção desativa essa tag automática a seguir. O comportamento remoto predefinido pode ser especificado com a configuração remote.<nome>.tagOpt. Consulte linkgit:git-config[1].

--refmap=<refspec>::
	Ao capturar as refs listadas na linha de comando, utilize o "refspec" informado (pode ser utilizado mais de uma vez) para mapear os refs para as ramificações rastreadas remotamente em vez dos valores das variáveis da configuração `remote.*.fetch` para o repositório remoto. Informe um `<refspec>` vazio à opção `--refmap` faz com que o Git ignore os "refspecs" configurados e confie inteiramente nos "refspecs" informados como os argumentos da linha de comando. Para mais detalhes consulte a seção "Configuração dos Ramos Monitorados Remotamente".

-t::
--tags::
	Capture todas as tags remotas (ou seja, capture as tags remotas `refs/tags/*` nas tags locais com o mesmo nome), além de qualquer outra coisa que possa ser capturada. O uso desta opção por si só não sujeita a remoção das tags, mesmo que `--prune` seja utilizado (embora as tags possam ser removidas de qualquer maneira, caso também sejam o destino de um "refspec" explícito; consulte `--prune`).

ifndef::git-pull[]
--recurse-submodules[=yes|on-demand|no]::
	Essa opção controla se e sob quais condições os novos commits dos submódulos preenchidos também devem ser capturadas. Pode ser utilizado como uma opção booleana para desativar completamente a recursão quando definido como 'no' ou para recursar incondicionalmente em todos os sub-módulos preenchidos quando definido como 'sim', que é a predefinição quando esta opção é utilizada sem qualquer valor. Utilize 'on demand' para re-examinar apenas em um submódulo preenchido quando o superprojeto recuperar um commit que atualize a referência do submódulo para um commit que ainda não esteja no clone do submódulo local. É predefinido que 'on demand' seja utilizado, a menos que `fetch.recurseSubmodules` seja definido (consulte linkgit:git-config[1]).
endif::git-pull[]

-j::
--jobs=<n>::
	A quantidade de processos paralelos que serão utilizados para todas as formas de captura.
+
Caso a opção `--multiple` seja utilizada, os diferentes ramos remotos serão capturados em paralelo. Caso vários submódulos sejam capturados, estes serão capturados em paralelo. Para controlá-los de forma independente, utilize as definições da configuração `fetch.parallel` e `submodule.fetchJobs` (consulte linkgit:git-config[1]).
+
Normalmente, as capturas remotas dos múltiplos ramos de forma paralela e recursiva serão mais rápidas. A predefinição é realizar as capturas em sequência e não em paralelo.

ifndef::git-pull[]
--no-recurse-submodules::
	Desative a captura recursiva dos submódulos (tem o mesmo efeito que utilizar a opção `--recurse-submodules=no`).
endif::git-pull[]

--set-upstream::
	Caso a captura remota seja bem sucedida, uma referência de rastreamento `add` será adicionada ao upstream, utilizado pelo argumento `less` linkgit:git-pull[1] e outros comandos. Para mais informações, consulte `branch.<nome>.merge` e `branch.<nome>.remote` em linkgit:git-config[1].

ifndef::git-pull[]
--submodule-prefix=<caminho>::
	Anexe o `<caminho>` para os caminhos impressos nas mensagens informativas como "Recolhendo o submódulo foo". Esta opção é utilizada internamente quando recorrer as submódulos.

--recurse-submodules-default=[yes|on-demand]::
	Esta opção é utilizada internamente para prover temporariamente um valor não negativo da forma predefinida para a opção `--recurse-submodules`. Todos os outros métodos de configurar a recursão do submódulo `fetch` (como as configurações em linkgit:gitmodules[5] e linkgit:git-config[1]) sobrescreva esta opção utilizando `--[no-]recurse-submodules` diretamente.

-u::
--update-head-ok::
	É predefinido que o 'git fetch' se recuse a atualizar o cabeçalho que corresponde ao ramo atual. Esta flag desativa esta verificação. Serve apenas para a utilização interna do 'git pull' para se comunicar com o 'git fetch', a menos que esteja implementando a sua própria porcelana, você não deve utilizá-la.
endif::git-pull[]

--upload-pack <pacote-para-envio>::
	Quando o repositório é informado para capturar e que seja manipulado por 'git fetch-pack', o `--exec=<upload-pack>` é passado para o comando utilizar um caminho alternativo para o comando executado na outra extremidade.

ifndef::git-pull[]
-q::
--quiet::
	Repasse a opção `--quiet` para o `git-fetch-pack` e silencie qualquer outro comando git utilizado internamente. O progresso não é relatado para o fluxo de erro predefinido.

-v::
--verbose::
	Seja loquaz.
endif::git-pull[]

--progress::
	É predefinido que a condição geral do progresso seja relatada no fluxo de erros quando estiver conectado em um terminal, a menos que `-q` seja utilizado. Esta opção impõem a condição geral do progresso, mesmo que o fluxo de erro predefinido não seja direcionado para um terminal.

-o <opção>::
--server-option=<opção>::
	Transmita a sequência usada para o servidor ao se comunicar utilizando o protocolo versão 2. A sequência informada não deve conter um caractere `NUL` ou `LF`. O tratamento das opções do servidor, incluindo os desconhecidos, é específico do servidor. Quando a opção `--server-option=<opção>` forem utilizadas várias vezes, todos serão enviados para o outro lado na ordem listada na linha de comando.

--show-forced-updates::
	É predefinido que o Git verifique se a atualização do ramo foi imposta durante uma captura. Pode ser desativado por meio de `fetch.showForcedUpdates`, porém a opção `--show-forced-updates garante que essa verificação ocorra. Consulte linkgit:git-config[1].

--no-show-forced-updates::
	É predefinido que o Git verifique se a atualização do ramo foi imposta durante uma captura. Utilize a opção `--no-show-forced-updates` ou defina `fetch.showForcedUpdates` como to `false` para ignorar esta verificação por questões de desempenho. Se utilizada durante o `git-pull`, a opção `--ff-only` ainda verificará quais as atualizações foram impostas antes de tentar uma atualização rápida. Consulte linkgit:git-config[1].

-4::
--ipv4::
	Utilize apenas os endereços IPv4, ignorando os endereços IPv6.

-6::
--ipv6::
	Utilize apenas os endereços IPv6, ignorando os endereços IPv4.
