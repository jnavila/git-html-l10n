DEFININDO AS REVISÕES
---------------------

Um parâmetro de revisão '<rev>' normalmente, mas não necessariamente, nomeia um objeto commit. Ele usa o que é chamado de sintaxe 'SHA-1 estendido'. Aqui estão várias maneiras de soletrar os nomes dos objetos. Os listados perto do final desta lista nomeiam as árvores e as bolhas contidas num commit.

NOTE: Este documento demonstra a sintaxe "bruta" como vista pelo git. O shell e outras UIs podem exigir citações adicionais para proteger os caracteres especiais e evitar a divisão de palavras.

'<sha1>', exemplo. 'dae86e1950b1277e545cee180551750029cfe735', 'dae86e'::
  O nome completo do objeto SHA-1 (string hexadecimal com 40 bytes) ou uma substring principal que seja exclusiva no repositório. Por exemplo, 'dae86e1950b1277e545cee180551750029cfe735' e 'dae86e' nomeiam o mesmo objeto commit caso não haja nenhum outro objeto em seu repositório cujo nome do objeto também comece com 'dae86e'.

'<describeOutput>', exemplo. 'v1.7.4.2-679-g3bee7fb'::
  A saída do `git describe`; ou seja, um tag mais próximo opcionalmente seguido por um traço e um número do commit seguido por um traço, um 'g' e um nome abreviado do objeto.

'<refname>', exemplo. 'master', 'heads/master', 'refs/heads/master'::
  Um nome ref simbólico. Por exemplo, 'master' normalmente significa o objeto commit referenciado por 'refs/heads/master'. Caso tenha 'heads/master' e 'tags/master', poderá dizer explicitamente 'heads/master' para informar ao Git a que se refere. Quando ambíguo, um '<refname>' é desambiguado usando a primeira correspondência nas regras a seguir:
+
  . Se '$GIT_DIR/<refname>' existir, é isso que você quer dizer (isso geralmente é útil apenas para `HEAD`, `FETCH_HEAD`, `ORIG_HEAD`, `MERGE_HEAD`, `REBASE_HEAD`, `REVERT_HEAD`, `CHERRY_PICK_HEAD`, `BISECT_HEAD` e `AUTO_MERGE`);

  . caso contrário, utilize 'refs/<refname>' caso exista;

  . caso contrário, utilize 'refs/tags/<refname>' caso exista;

  . caso contrário, utilize 'refs/heads/<refname>' caso exista;

  . caso contrário, utilize 'refs/remotes/<refname>' caso exista;

  . caso contrário, utilize 'refs/remotes/<refname>/HEAD' caso exista.

+
  `HEAD`:::
    nomeia o commit no qual você baseou as alterações na árvore de trabalho.
  `FETCH_HEAD`:::
    registra o ramo que você obteve de um repositório remoto com
    a sua última invocação `git fetch`.
  `ORIG_HEAD`:::
    é criado por comandos que movem seu `HEAD` de forma drástica (`git
    am`, `git merge`, `git rebase`, `git reset`), para registrar a posição
    do `HEAD` antes de sua operação, para que você possa alterar
    facilmente o cume da ramificação de volta ao estado anterior à sua execução.
  `MERGE_HEAD`:::
    registra o(s) commit(s) que está(ão) sendo mesclado(s) no seu ramo quando você
    executar o `git merge`.
  `REBASE_HEAD`:::
    durante um rebase, registra o commit onde a operação está
    interrompida no momento, seja por causa de conflitos ou de um comando `edit`
    num rebase interativo.
  `REVERT_HEAD`:::
    registra o commit que está sendo revertido quando você executa o `git revert`.
  `CHERRY_PICK_HEAD`:::
    registra o commit que você está selecionando quando executa o `git
    cherry-pick`.
  `BISECT_HEAD`:::
    registra o commit atual a ser testado quando você executa `git bisect
    --no-checkout`.
  `AUTO_MERGE`:::
    registra um objeto da árvore correspondente ao estado da estratégia de mesclagem
    'ort' gravada na árvore de trabalho quando uma operação de mesclagem
    resultar em conflitos.

+
Observe que qualquer um dos casos 'refs/*' acima pode vir do diretório `$GIT_DIR/refs` ou do arquivo `$GIT_DIR/packed-refs`. Embora a codificação do nome da referência não seja especificada, é preferível usar o UTF-8, pois alguns processamentos de saída podem assumir nomes no padrão UTF-8 como referência.

'@'::
  O '@' sozinho é um atalho para `HEAD`.

'[<refname>]@{<data>}', exemplo. 'master@\{yesterday\}', 'HEAD@{5 minutos atrás}'::
  Uma ref seguida pelo sufixo '@' com uma especificação de data num par de chaves (por exemplo, '\{yesterday\}', '{1 month 2 weeks 3 days 1 hour 1 second ago}' ou '{1979-02-26 18:30:00}') especifica o valor da ref num momento anterior. Este sufixo só pode ser usado imediatamente após um nome de referência e a referência deve ter um registro existente ('$GIT_DIR/logs/<ref>'). Observe que isso procura pela condição da sua referência *local* num determinado momento; por exemplo, o que estava no seu ramo local 'master' na semana passada. Caso queira ver os commits feitos durante determinados períodos, consulte as opções `--since` e `--until`.

'<refname>@{<n>}', e.g. 'master@\{1\}'::
  Uma ref seguida pelo sufixo '@' com uma especificação ordinal num par de chaves (por exemplo, '\{1\}', '\{15\}') especifica o n-ésimo valor anterior dessa ref. Por exemplo, “master@\{1\}” é o valor anterior imediato de 'master', enquanto 'master@\{5\}' é o quinto valor anterior de 'master'. Este sufixo só pode ser usado imediatamente após um nome ref e a ref já deve ter um registro log existente ('$GIT_DIR/logs/<refname>').

'@{<n>}', exemplo. '@\{1\}'::
  Você pode usar a construção '@' com um `ref` vazio para obter uma entrada `reflog` do ramo atual. Por exemplo, caso esteja no ramo 'blabla' então '@\{1\}' significa o mesmo que 'blabla@\{1\}'.

'@{-<n>}', exemplo, '@{-1}'::
  O construtor '@{-<n>}' significa que <n> do ramo/commit foi verificado antes da atual.

'[<nome-do-ramo>]@\{upstream\}', exemplo, 'master@\{upstream\}', '@\{u\}'::
  Um ramo B pode ser configurado para construir em cima de um ramo X (configurado com `branch.<nome>.merge`) em um R remoto (configurado com `branch.<nome>.remote`). B@{u} refere-se ao ramo rastreado remotamente para o ramo X obtido a partir do R remoto, normalmente encontrado em `refs/remotes/R/X`.

'[<nome-do-ramo>]@\{push\}', exemplo, 'master@\{push\}', '@\{push\}'::
  O sufixo '@\{push}' relata ao ramo "para onde estaremos fazendo impulsionamento" caso `git push` seja executado enquanto `branchname` seja verificado (ou o `HEAD` atual, caso nenhum nome do ramo tenha sido especificado). Como é para '@\{upstream}', reportamos o ramo rastreado remotamente que corresponda aquela ramificação remotamente.
+
Aqui um exemplo para deixar mais claro:
+
------------------------------
$ git config push.default current
$ git config remote.pushdefault myfork
$ git switch -c mybranch origin/master

$ git rev-parse --symbolic-full-name @{upstream}
refs/remotes/origin/master

$ git rev-parse --symbolic-full-name @{push}
refs/remotes/myfork/mybranch
------------------------------
+
Observe no exemplo que configuramos um fluxo de trabalho triangular, onde fazemos o `pull` (obtenção) de um local e o `push` (impulsionamento) para outro. Em um fluxo de trabalho não triangular, o '@\{push}' é igual como o '@\{upstream}' que não é necessário.
+
Esse sufixo também é aceito quando escrito em maiúsculas e significa a mesma coisa, não importa o caso.

'<rev>{caret}[<n>]', exemplo, 'HEAD{caret}, v1.5.1{caret}0'::
  Um sufixo '{caret}' num parâmetro de revisão significa a primeira origem desse objeto commit. '{caret}<n>' significa o <n>ésimo ramo principal (ou seja, '<rev>{caret}' é equivalente a '<rev>{caret}1'). Como regra especial, '<rev>{caret}0' significa o próprio commit e é usado quando '<rev>' é o nome do objeto de um objeto de etiquetas que se refere a um objeto de commit.

'<rev>{tilde}[<n>]', exemplo, 'HEAD{tilde}, master{tilde}3'::
  Um sufixo '{tilde}' num parâmetro de revisão significa a primeira origem deste objeto commit. Um sufixo '{tilde}<n>' num parâmetro de revisão significa o objeto de commit que é o ancestral da <n>ésima geração do objeto de commit mencionado, seguindo apenas as primeiras origens. Ou seja, '<rev>{tilde}3' é equivalente a '<rev>{caret}{caret}{caret}{caret}', que é equivalente a '<rev>{caret}1{caret}1{caret}1'. Veja abaixo uma ilustração de uso desse formulário.

'<rev>{caret}{<type>}', exemplo, 'v0.99.8{caret}\{commit\}'::
  Um sufixo '{caret}' seguido por um nome de tipo do objeto entre um par de chaves significa remove a referência do objeto em '<rev>' recursivamente até que um objeto do tipo '<type>' seja encontrado ou o objeto não possa mais perder a referência (neste caso, barf). Por exemplo, se '<rev>' for um commit, '<rev>{caret}\{commit\}' descreverá o objeto correspondente do commit. Da mesma maneira, se '<rev>' for uma árvore, '<rev>{caret}\{tree\}' descreverá o objeto correspondente da árvore. '<rev>{caret}0' é um atalho para '<rev>{caret}\{commit\}'.
+
'<rev>{caret}\{object\}' pode ser utilizado para ter certeza que os nomes '<rev>' de um determinado objeto existam, sem requerer que '<rev>' seja uma tag e sem perder a referência com '<rev>'; pois `tag` já é um objeto, não a necessidade que seja perdido a referência nenhuma vez para chegar a um objeto.
+
'<rev>{caret}\{tag\}' pode ser utilizado para ter certeza que '<rev>' identifique um objeto `tag` já existente.

'<rev>{caret}{}', exemplo, 'v0.99.8{caret}{}'::
  Um sufixo '{caret}' seguido por um par de chaves vazias significa que o objeto pode ser uma tag e perder a referência de uma tag recursivamente, até que um objeto que não seja tag, seja encontrada.

'<rev>{caret}{/<texto>}', exemplo, 'HEAD^{/fix nasty bug}'::
  Um sufixo '{caret}' para um parâmetro de revisão, seguido por um par de chaves que contém um texto liderado por uma barra, é o mesmo que a sintaxe ':/fix nasty bug' abaixo, exceto que ele retorna o commit coincidente mais jovem que é acessível a partir de '<rev>' antes de '{caret}'.

':/<texto>', exemplo, ':/fix nasty bug'::
  Dois pontos, seguido de uma barra, seguido de um texto, nomeia um commit cuja mensagem de commit corresponde à expressão regular mencionada. Esse nome retorna o commit correspondente mais novo que pode ser acessado de qualquer ref, incluindo o `HEAD`. A expressão regular pode corresponder a qualquer parte da mensagem do commit. Para corresponder a mensagens que começam com uma string, é possível usar, por exemplo, ':/^foo'. A sequência especial ':/!' é reservada para modificadores do que é correspondido. ':/!-foo' executa uma correspondência negativa, enquanto ':/!!foo' corresponde a um caractere literal '!' seguido de 'foo'. Por enquanto, qualquer outra sequência que comece com ':/!' está reservada. Dependendo do texto informado, as regras de divisão das palavras do shell podem exigir citações adicionais.

'<rev>:<caminho>', exemplo, 'HEAD:README', 'master:./README'::
  Um sufixo ':' seguido de um caminho nomeia a bolha ou a árvore no caminho manecionado no objeto em forma de árvore nomeado pela parte antes dos dois-pontos. Um caminho que comece com './' ou '../' é relativo ao diretório de trabalho atual. O caminho informado será convertido para ser relativo ao diretório raiz da árvore de trabalho. Isso é mais útil para abordar uma bolha ou uma árvore de um commit ou uma árvore que tenha a mesma estrutura de árvore que a árvore de trabalho.

':[<n>:]<caminho>', exemplo, ':0:README', ':README'::
  Os dois pontos opcionalmente seguidos por um número de estágio (0 para 3) e dois pontos, seguidos por um caminho, informam um objeto bolha no índice no caminho especificado. Nomeia uma entrada de estágio quando o número estiver ausente (assim como dois pontos que o seguem). Durante uma mesclagem, o estágio 1 é o ancestral comum, o estágio 2 é a versão do ramo de destino (normalmente o ramo atual) e o estágio 3 é a versão do ramo que está sendo mesclado.

Aqui está uma ilustração, feita por Jon Loeliger. Os nós de commit B e C são origens do nó do commit A. Os commits principais são ordenados da esquerda para a direita.

........................................
G   H   I   J
 \ /     \ /
  D   E   F
   \  |  / \
    \ | /   |
     \|/    |
      B     C
       \   /
        \ /
         A
........................................

    A =      = A^0
    B = A^   = A^1     = A~1
    C =      = A^2
    D = A^^  = A^1^1   = A~2
    E = B^2  = A^^2
    F = B^3  = A^^3
    G = A^^^ = A^1^1^1 = A~3
    H = D^2  = B^^2    = A^^^2  = A~2^2
    I = F^   = B^3^    = A^^3^
    J = F^2  = B^3^2   = A^^3^2


DEFININDO OS INTERVALOS
-----------------------

O histórico que atravessa os comandos como o `git log` opera em um determinado conjunto de commits e não apenas em único commit.

Para estes comandos, defina uma única revisão utilizando a notação descrita na seção anterior, significa que o conjunto dos commits `acessíveis` a partir do commit informado.

Ao especificar várias revisões significa que o conjunto dos commits acessíveis a partir de qualquer um dos commits informados.

O conjunto acessível de um commit é o próprio commit e o commit em sua cadeia de ancestrais.

Existem várias notações para definir um conjunto de commits associados (chamado de "intervalo de revisão"), ilustrado abaixo.


Exclusões de Commits
~~~~~~~~~~~~~~~~~~~~

'{caret}<rev>' (caret) Notação::
 Para excluir commits acessíveis a partir de um commit, é usada a notação de prefixo '{caret}'. Por exemplo, '{caret}r1 r2' significa que os commits acessíveis a partir de 'r2', mas exclui os acessíveis a partir de 'r1' (ou seja, 'r1' e seus ancestrais).

Notações do Intervalo Pontilhado
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

A faixa de notação de intervalo '..' (dois pontos)::
 A operação de conjunto '{caret}r1 r2' aparece com tanta frequência que existe uma abreviação para ela. Quando você tem dois commits 'r1' e 'r2' (mencionados de acordo com a sintaxe explicada em ESPECIFICANDO REVISÕES acima), você pode solicitar os commits que são acessíveis a partir de 'r2' excluindo aqueles que são acessíveis a partir de 'r1' por '{caret}r1 r2' e isso pode ser escrito como 'r1..r2'.

A notação da diferença simétrica '\...' (três pontos)::
 Uma notação semelhante 'r1\...r2' é chamada de diferença simétrica entre 'r1' e 'r2' e é definida como 'r1 r2 --not $(git merge-base --all r1 r2)'. É o conjunto de commits que são acessíveis a partir de um dos 'r1' (lado esquerdo) ou 'r2' (lado direito), mas não de ambos.

Nestas duas notações abreviadas, você pode omitir uma extremidade e deixá-la como o `HEAD` predefinido. Por exemplo, 'origin...' é uma abreviação de 'origin..HEAD' e questiona "O que eu fiz desde que bifurquei do ramo de origem?" Da mesma maneira, '..origin' é uma abreviação de 'HEAD..origin' e questiona "O que a origem fez desde que eu a bifurquei?" Observe que '..' significaria 'HEAD..HEAD', que é um intervalo vazio que pode ser acessado, mas não pode ser acessado a partir de HEAD.

Existem comandos projetados especificamente para usar dois intervalos distintos ("git range-diff R1 R2" para comparar dois intervalos por exemplo), mas eles são exceções. Salvo indicação em contrário, todos os comandos "git" que operam num conjunto de commits funcionam num único intervalo de revisão. Em outras palavras, escrever duas "notações de intervalo de dois-pontos" uma ao lado da outra, por exemplo.

    $ git log A..B C..D

Não determina dois intervalos de revisão para a maioria dos comandos. Em vez disso, ele nomeará um único conjunto conectado de commits, ou seja, aqueles que são acessíveis a partir de B ou D, mas não são acessíveis a partir de A ou C. Num histórico linear como esse:

    ---A---B---o---o---C---D

porque A e B são alcançáveis a partir de C, o intervalo da faixa de revisão definido por estes dois intervalos pontilhados é um único commit D.


Outras <rev>{caret} Notações Abreviadas dos pais
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Existem três outras abreviações, particularmente úteis para a mesclagem dos commits, para nomear um conjunto formado por um commit e o seu pai principal.

A notação 'r1{caret}@' todos os pais do 'r1'.

A notação 'r1{caret}!' inclui o commit 'r1', mas exclui todos os seus pais. Por si só, essa notação denota o commit único 'r1'.

A notação '<rev>{caret}-[<n>]' incluí '<rev>' porém excluí o '<n>ésimo' pai (ou seja, é uma abreviação para '<rev>{caret}<n>..<rev>'), com '<n>' = 1 caso não seja informado. Geralmente é útil para a mesclagem dos commits onde é possível passar '<commit>{caret}-' para obter todos os commits do ramoq que foi mesclado na mesclagem do commit '<commit>' (incluindo o próprio '<commit>').

Embora '<rev>{caret}<n>' fosse sobre a especificação do pai de um único commit, estas três notações também consideram os seus pais. Como por exemplo, você pode dizer 'HEAD{caret}2{caret}@', contudo não poderá dizer 'HEAD{caret}@{caret}2'.

Resumo do Intervalo da Revisão
------------------------------

'<rev>'::
	Inclua os commits que são acessíveis através do <ref> (ou seja, <rev> e seus ancestrais).

'{caret}<rev>'::
	Exclua os commits que estejam acessíveis a partir de `<rev>` (<rev> e os seus ancestrais por exemplo).

'<rev1>..<rev2>'::
	Inclua os commits que podem ser acessados a partir de '<rev2>', mas exclua aqueles que podem ser acessados a partir de '<rev1>'. Quando '<rev1>' ou '<rev2>' é omitido, o padrão é `HEAD`.

'<rev1>\...<rev2>'::
	Inclua os commits que são acessíveis a partir de '<rev1>' ou '<rev2>', mas exclua aqueles que são acessíveis a partir de ambos. Quando '<rev1>' ou '<rev2>' é omitido, o padrão é `HEAD`.

'<rev>{caret}@', e.g. 'HEAD{caret}@'::
  Um sufixo '{caret}' seguido por um sinal de arroba é o mesmo que listar todas as origens de '<rev>' (ou seja, incluir qualquer coisa acessível das suas origens, mas não o próprio commit).

'<rev>{caret}!', e.g. 'HEAD{caret}!'::
  Um sufixo '{caret}' seguido de um ponto de exclamação é o mesmo que fazer um commit '<rev>' e todos os seus principais prefixam com '{caret}' para excluí-los (assim como seus ancestrais).

'<rev>{caret}-<n>', e.g. 'HEAD{caret}-, HEAD{caret}-2'::
	É o equivalente a '<rev>{caret}<n>..<rev>', with '<n>' = 1 caso nenhum seja informado.

Aqui estão alguns exemplos utilizando a ilustração Loeliger acima, com cada etapa da expansão e da seleção da notação cuidadosamente explicitada:

....
   Args   Expanded arguments    Selected commits
   D                            G H D
   D F                          G H I J D F
   ^G D                         H D
   ^D B                         E I J F B
   ^D B C                       E I J F B C
   C                            I J F C
   B..C   = ^B C                C
   B...C  = B ^F C              G H D E B C
   B^-    = B^..B
	  = ^B^1 B              E I J F B
   C^@    = C^1
	  = F                   I J F
   B^@    = B^1 B^2 B^3
	  = D E F               D G H E F I J
   C^!    = C ^C^@
	  = C ^C^1
	  = C ^F                C
   B^!    = B ^B^@
	  = B ^B^1 ^B^2 ^B^3
	  = B ^D ^E ^F          B
   F^! D  = F ^I ^J D           G H D F
....
