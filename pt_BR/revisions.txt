DEFININDO AS REVISÕES
---------------------

A revision parameter '<rev>' typically, but not necessarily, names a commit object. It uses what is called an 'extended SHA-1' syntax. Here are various ways to spell object names. The ones listed near the end of this list name trees and blobs contained in a commit.

NOTE: Este documento demonstra a sintaxe "bruta" como vista pelo git. O shell e outras UIs podem exigir citações adicionais para proteger os caracteres especiais e evitar a divisão de palavras.

'<sha1>', exemplo. 'dae86e1950b1277e545cee180551750029cfe735', 'dae86e'::
  The full SHA-1 object name (40-byte hexadecimal string), or a leading substring that is unique within the repository. E.g. dae86e1950b1277e545cee180551750029cfe735 and dae86e both name the same commit object if there is no other object in your repository whose object name starts with dae86e.

'<describeOutput>', exemplo. 'v1.7.4.2-679-g3bee7fb'::
  A saída do `git describe`; ou seja, um tag mais próximo opcionalmente seguido por um traço e um número do commit seguido por um traço, um 'g' e um nome abreviado do objeto.

'<refname>', exemplo. 'master', 'heads/master', 'refs/heads/master'::
  A symbolic ref name. E.g. 'master' typically means the commit object referenced by 'refs/heads/master'. If you happen to have both 'heads/master' and 'tags/master', you can explicitly say 'heads/master' to tell Git which one you mean. When ambiguous, a '<refname>' is disambiguated by taking the first match in the following rules:
+
  . Se '$GIT_DIR/<refname>' existir, é isso que você quer dizer (isso geralmente é útil apenas para `HEAD`, `FETCH_HEAD`, `ORIG_HEAD`, `MERGE_HEAD`, `REBASE_HEAD`, `REVERT_HEAD`, `CHERRY_PICK_HEAD`, `BISECT_HEAD` e `AUTO_MERGE`);

  . caso contrário, utilize 'refs/<refname>' caso exista;

  . caso contrário, utilize 'refs/tags/<refname>' caso exista;

  . caso contrário, utilize 'refs/heads/<refname>' caso exista;

  . caso contrário, utilize 'refs/remotes/<refname>' caso exista;

  . caso contrário, utilize 'refs/remotes/<refname>/HEAD' caso exista.

+
  `HEAD`:::
    nomeia o commit no qual você baseou as alterações na árvore de trabalho.
  `FETCH_HEAD`:::
    registra o ramo que você obteve de um repositório remoto com
    a sua última invocação `git fetch`.
  `ORIG_HEAD`:::
    é criado por comandos que movem seu `HEAD` de forma drástica (`git
    am`, `git merge`, `git rebase`, `git reset`), para registrar a posição
    do `HEAD` antes de sua operação, para que você possa alterar
    facilmente o cume da ramificação de volta ao estado anterior à sua execução.
  `MERGE_HEAD`:::
    registra o(s) commit(s) que está(ão) sendo mesclado(s) no seu ramo quando você
    executar o `git merge`.
  `REBASE_HEAD`:::
    durante um rebase, registra o commit onde a operação está
    interrompida no momento, seja por causa de conflitos ou de um comando `edit`
    num rebase interativo.
  `REVERT_HEAD`:::
    registra o commit que está sendo revertido quando você executa o `git revert`.
  `CHERRY_PICK_HEAD`:::
    registra o commit que você está selecionando quando executa o `git
    cherry-pick`.
  `BISECT_HEAD`:::
    registra o commit atual a ser testado quando você executa `git bisect
    --no-checkout`.
  `AUTO_MERGE`:::
    registra um objeto da árvore correspondente ao estado da estratégia de mesclagem
    'ort' gravada na árvore de trabalho quando uma operação de mesclagem
    resultar em conflitos.

+
Note that any of the 'refs/*' cases above may come either from the `$GIT_DIR/refs` directory or from the `$GIT_DIR/packed-refs` file. While the ref name encoding is unspecified, UTF-8 is preferred as some output processing may assume ref names in UTF-8.

'@'::
  O '@' sozinho é um atalho para `HEAD`.

'[<refname>]@{<data>}', exemplo. 'master@\{yesterday\}', 'HEAD@{5 minutos atrás}'::
  A ref followed by the suffix '@' with a date specification enclosed in a brace pair (e.g. '\{yesterday\}', '{1 month 2 weeks 3 days 1 hour 1 second ago}' or '{1979-02-26 18:30:00}') specifies the value of the ref at a prior point in time. This suffix may only be used immediately following a ref name and the ref must have an existing log ('$GIT_DIR/logs/<ref>'). Note that this looks up the state of your *local* ref at a given time; e.g., what was in your local 'master' branch last week. If you want to look at commits made during certain times, see `--since` and `--until`.

'<refname>@{<n>}', e.g. 'master@\{1\}'::
  A ref followed by the suffix '@' with an ordinal specification enclosed in a brace pair (e.g. '\{1\}', '\{15\}') specifies the n-th prior value of that ref. For example 'master@\{1\}' is the immediate prior value of 'master' while 'master@\{5\}' is the 5th prior value of 'master'. This suffix may only be used immediately following a ref name and the ref must have an existing log ('$GIT_DIR/logs/<refname>').

'@{<n>}', exemplo. '@\{1\}'::
  Você pode usar a construção '@' com um `ref` vazio para obter uma entrada `reflog` do ramo atual. Por exemplo, caso esteja no ramo 'blabla' então '@\{1\}' significa o mesmo que 'blabla@\{1\}'.

'@{-<n>}', exemplo, '@{-1}'::
  O construtor '@{-<n>}' significa que <n> do ramo/commit foi verificado antes da atual.

'[<nome-do-ramo>]@\{upstream\}', exemplo, 'master@\{upstream\}', '@\{u\}'::
  Um ramo B pode ser configurado para construir em cima de um ramo X (configurado com `branch.<nome>.merge`) em um R remoto (configurado com `branch.<nome>.remote`). B@{u} refere-se ao ramo rastreado remotamente para o ramo X obtido a partir do R remoto, normalmente encontrado em `refs/remotes/R/X`.

'[<nome-do-ramo>]@\{push\}', exemplo, 'master@\{push\}', '@\{push\}'::
  O sufixo '@\{push}' relata ao ramo "para onde estaremos fazendo impulsionamento" caso `git push` seja executado enquanto `branchname` seja verificado (ou o `HEAD` atual, caso nenhum nome do ramo tenha sido especificado). Como é para '@\{upstream}', reportamos o ramo rastreado remotamente que corresponda aquela ramificação remotamente.
+
Aqui um exemplo para deixar mais claro:
+
------------------------------
$ git config push.default current
$ git config remote.pushdefault myfork
$ git switch -c mybranch origin/master

$ git rev-parse --symbolic-full-name @{upstream}
refs/remotes/origin/master

$ git rev-parse --symbolic-full-name @{push}
refs/remotes/myfork/mybranch
------------------------------
+
Observe no exemplo que configuramos um fluxo de trabalho triangular, onde fazemos o `pull` (obtenção) de um local e o `push` (impulsionamento) para outro. Em um fluxo de trabalho não triangular, o '@\{push}' é igual como o '@\{upstream}' que não é necessário.
+
Esse sufixo também é aceito quando escrito em maiúsculas e significa a mesma coisa, não importa o caso.

'<rev>{caret}[<n>]', exemplo, 'HEAD{caret}, v1.5.1{caret}0'::
  A suffix '{caret}' to a revision parameter means the first parent of that commit object. '{caret}<n>' means the <n>th parent (i.e. '<rev>{caret}' is equivalent to '<rev>{caret}1'). As a special rule, '<rev>{caret}0' means the commit itself and is used when '<rev>' is the object name of a tag object that refers to a commit object.

'<rev>{tilde}[<n>]', exemplo, 'HEAD{tilde}, master{tilde}3'::
  A suffix '{tilde}' to a revision parameter means the first parent of that commit object. A suffix '{tilde}<n>' to a revision parameter means the commit object that is the <n>th generation ancestor of the named commit object, following only the first parents. I.e. '<rev>{tilde}3' is equivalent to '<rev>{caret}{caret}{caret}' which is equivalent to '<rev>{caret}1{caret}1{caret}1'. See below for an illustration of the usage of this form.

'<rev>{caret}{<type>}', exemplo, 'v0.99.8{caret}\{commit\}'::
  A suffix '{caret}' followed by an object type name enclosed in brace pair means dereference the object at '<rev>' recursively until an object of type '<type>' is found or the object cannot be dereferenced anymore (in which case, barf). For example, if '<rev>' is a commit-ish, '<rev>{caret}\{commit\}' describes the corresponding commit object. Similarly, if '<rev>' is a tree-ish, '<rev>{caret}\{tree\}' describes the corresponding tree object. '<rev>{caret}0' is a short-hand for '<rev>{caret}\{commit\}'.
+
'<rev>{caret}\{object\}' pode ser utilizado para ter certeza que os nomes '<rev>' de um determinado objeto existam, sem requerer que '<rev>' seja uma tag e sem perder a referência com '<rev>'; pois `tag` já é um objeto, não a necessidade que seja perdido a referência nenhuma vez para chegar a um objeto.
+
'<rev>{caret}\{tag\}' pode ser utilizado para ter certeza que '<rev>' identifique um objeto `tag` já existente.

'<rev>{caret}{}', exemplo, 'v0.99.8{caret}{}'::
  Um sufixo '{caret}' seguido por um par de chaves vazias significa que o objeto pode ser uma tag e perder a referência de uma tag recursivamente, até que um objeto que não seja tag, seja encontrada.

'<rev>{caret}{/<texto>}', exemplo, 'HEAD^{/fix nasty bug}'::
  Um sufixo '{caret}' para um parâmetro de revisão, seguido por um par de chaves que contém um texto liderado por uma barra, é o mesmo que a sintaxe ':/fix nasty bug' abaixo, exceto que ele retorna o commit coincidente mais jovem que é acessível a partir de '<rev>' antes de '{caret}'.

':/<texto>', exemplo, ':/fix nasty bug'::
  A colon, followed by a slash, followed by a text, names a commit whose commit message matches the specified regular expression. This name returns the youngest matching commit which is reachable from any ref, including HEAD. The regular expression can match any part of the commit message. To match messages starting with a string, one can use e.g. ':/^foo'. The special sequence ':/!' is reserved for modifiers to what is matched. ':/!-foo' performs a negative match, while ':/!!foo' matches a literal '!' character, followed by 'foo'. Any other sequence beginning with ':/!' is reserved for now. Depending on the given text, the shell's word splitting rules might require additional quoting.

'<rev>:<caminho>', exemplo, 'HEAD:README', 'master:./README'::
  A suffix ':' followed by a path names the blob or tree at the given path in the tree-ish object named by the part before the colon. A path starting with './' or '../' is relative to the current working directory. The given path will be converted to be relative to the working tree's root directory. This is most useful to address a blob or tree from a commit or tree that has the same tree structure as the working tree.

':[<n>:]<caminho>', exemplo, ':0:README', ':README'::
  Os dois pontos opcionalmente seguidos por um número de estágio (0 para 3) e dois pontos, seguidos por um caminho, informam um objeto bolha no índice no caminho especificado. Nomeia uma entrada de estágio quando o número estiver ausente (assim como dois pontos que o seguem). Durante uma mesclagem, o estágio 1 é o ancestral comum, o estágio 2 é a versão do ramo de destino (normalmente o ramo atual) e o estágio 3 é a versão do ramo que está sendo mesclado.

Here is an illustration, by Jon Loeliger. Both commit nodes B and C are parents of commit node A. Parent commits are ordered left-to-right.

........................................
G   H   I   J
 \ /     \ /
  D   E   F
   \  |  / \
    \ | /   |
     \|/    |
      B     C
       \   /
        \ /
         A
........................................

    A =      = A^0
    B = A^   = A^1     = A~1
    C =      = A^2
    D = A^^  = A^1^1   = A~2
    E = B^2  = A^^2
    F = B^3  = A^^3
    G = A^^^ = A^1^1^1 = A~3
    H = D^2  = B^^2    = A^^^2  = A~2^2
    I = F^   = B^3^    = A^^3^
    J = F^2  = B^3^2   = A^^3^2


DEFININDO OS INTERVALOS
-----------------------

O histórico que atravessa os comandos como o `git log` opera em um determinado conjunto de commits e não apenas em único commit.

Para estes comandos, defina uma única revisão utilizando a notação descrita na seção anterior, significa que o conjunto dos commits `acessíveis` a partir do commit informado.

Ao especificar várias revisões significa que o conjunto dos commits acessíveis a partir de qualquer um dos commits informados.

O conjunto acessível de um commit é o próprio commit e o commit em sua cadeia de ancestrais.

Existem várias notações para definir um conjunto de commits associados (chamado de "intervalo de revisão"), ilustrado abaixo.


Exclusões de Commits
~~~~~~~~~~~~~~~~~~~~

'{caret}<rev>' (caret) Notação::
 To exclude commits reachable from a commit, a prefix '{caret}' notation is used. E.g. '{caret}r1 r2' means commits reachable from 'r2' but exclude the ones reachable from 'r1' (i.e. 'r1' and its ancestors).

Notações do Intervalo Pontilhado
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

A faixa de notação de intervalo '..' (dois pontos)::
 The '{caret}r1 r2' set operation appears so often that there is a shorthand for it. When you have two commits 'r1' and 'r2' (named according to the syntax explained in SPECIFYING REVISIONS above), you can ask for commits that are reachable from r2 excluding those that are reachable from r1 by '{caret}r1 r2' and it can be written as 'r1..r2'.

A notação da diferença simétrica '\...' (três pontos)::
 A similar notation 'r1\...r2' is called symmetric difference of 'r1' and 'r2' and is defined as 'r1 r2 --not $(git merge-base --all r1 r2)'. It is the set of commits that are reachable from either one of 'r1' (left side) or 'r2' (right side) but not from both.

In these two shorthand notations, you can omit one end and let it default to HEAD. For example, 'origin..' is a shorthand for 'origin..HEAD' and asks "What did I do since I forked from the origin branch?" Similarly, '..origin' is a shorthand for 'HEAD..origin' and asks "What did the origin do since I forked from them?" Note that '..' would mean 'HEAD..HEAD' which is an empty range that is both reachable and unreachable from HEAD.

Commands that are specifically designed to take two distinct ranges (e.g. "git range-diff R1 R2" to compare two ranges) do exist, but they are exceptions. Unless otherwise noted, all "git" commands that operate on a set of commits work on a single revision range. In other words, writing two "two-dot range notation" next to each other, e.g.

    $ git log A..B C..D

does *not* specify two revision ranges for most commands. Instead it will name a single connected set of commits, i.e. those that are reachable from either B or D but are reachable from neither A or C. In a linear history like this:

    ---A---B---o---o---C---D

porque A e B são alcançáveis a partir de C, o intervalo da faixa de revisão definido por estes dois intervalos pontilhados é um único commit D.


Outras <rev>{caret} Notações Abreviadas dos pais
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Existem três outras abreviações, particularmente úteis para a mesclagem dos commits, para nomear um conjunto formado por um commit e o seu pai principal.

A notação 'r1{caret}@' todos os pais do 'r1'.

The 'r1{caret}!' notation includes commit 'r1' but excludes all of its parents. By itself, this notation denotes the single commit 'r1'.

A notação '<rev>{caret}-[<n>]' incluí '<rev>' porém excluí o '<n>ésimo' pai (ou seja, é uma abreviação para '<rev>{caret}<n>..<rev>'), com '<n>' = 1 caso não seja informado. Geralmente é útil para a mesclagem dos commits onde é possível passar '<commit>{caret}-' para obter todos os commits do ramoq que foi mesclado na mesclagem do commit '<commit>' (incluindo o próprio '<commit>').

Embora '<rev>{caret}<n>' fosse sobre a especificação do pai de um único commit, estas três notações também consideram os seus pais. Como por exemplo, você pode dizer 'HEAD{caret}2{caret}@', contudo não poderá dizer 'HEAD{caret}@{caret}2'.

Resumo do Intervalo da Revisão
------------------------------

'<rev>'::
	Inclua os commits que são acessíveis através do <ref> (ou seja, <rev> e seus ancestrais).

'{caret}<rev>'::
	Exclua os commits que estejam acessíveis a partir de `<rev>` (<rev> e os seus ancestrais por exemplo).

'<rev1>..<rev2>'::
	Include commits that are reachable from <rev2> but exclude those that are reachable from <rev1>. When either <rev1> or <rev2> is omitted, it defaults to `HEAD`.

'<rev1>\...<rev2>'::
	Include commits that are reachable from either <rev1> or <rev2> but exclude those that are reachable from both. When either <rev1> or <rev2> is omitted, it defaults to `HEAD`.

'<rev>{caret}@', e.g. 'HEAD{caret}@'::
  Um sufixo '{caret}' seguido por um sinal de arroba é o mesmo que listar todas as origens de '<rev>' (ou seja, incluir qualquer coisa acessível das suas origens, mas não o próprio commit).

'<rev>{caret}!', e.g. 'HEAD{caret}!'::
  Um sufixo '{caret}' seguido de um ponto de exclamação é o mesmo que fazer um commit '<rev>' e todos os seus principais prefixam com '{caret}' para excluí-los (assim como seus ancestrais).

'<rev>{caret}-<n>', e.g. 'HEAD{caret}-, HEAD{caret}-2'::
	É o equivalente a '<rev>{caret}<n>..<rev>', with '<n>' = 1 caso nenhum seja informado.

Aqui estão alguns exemplos utilizando a ilustração Loeliger acima, com cada etapa da expansão e da seleção da notação cuidadosamente explicitada:

....
   Args   Expanded arguments    Selected commits
   D                            G H D
   D F                          G H I J D F
   ^G D                         H D
   ^D B                         E I J F B
   ^D B C                       E I J F B C
   C                            I J F C
   B..C   = ^B C                C
   B...C  = B ^F C              G H D E B C
   B^-    = B^..B
	  = ^B^1 B              E I J F B
   C^@    = C^1
	  = F                   I J F
   B^@    = B^1 B^2 B^3
	  = D E F               D G H E F I J
   C^!    = C ^C^@
	  = C ^C^1
	  = C ^F                C
   B^!    = B ^B^@
	  = B ^B^1 ^B^2 ^B^3
	  = B ^D ^E ^F          B
   F^! D  = F ^I ^J D           G H D F
....
