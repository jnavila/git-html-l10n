DEFININDO AS REVISÕES
---------------------

Um parâmetro de revisão '<rev>' normalmente, mas não necessariamente, dá nome a um objeto commit. Utiliza o que é chamado de uma sintaxe 'extended SHA-1'. Aqui estão as várias maneiras de soletrar os nomes dos objetos. Os listados próximos do final desta lista informam árvores e as bolhas existentes em um commit.

NOTE: Este documento demonstra a sintaxe "bruta" como vista pelo git. O shell e outras UIs podem exigir citações adicionais para proteger os caracteres especiais e evitar a divisão de palavras.

'<sha1>', exemplo. 'dae86e1950b1277e545cee180551750029cfe735', 'dae86e'::
  O nome completo do objeto SHA-1 (a sequência hexadecimal com 40-bytes) ou uma carreira de caracteres que é exclusiva e única no repositório. Por exemplo, dae86e1950b1277e545cee180551750029cfe735 e dae86e informam o mesmo objeto commit caso não haja um outro objeto em seu repositório cujo nome comece com daee.

'<describeOutput>', exemplo. 'v1.7.4.2-679-g3bee7fb'::
  A saída do `git describe`; ou seja, um tag mais próximo opcionalmente seguido por um traço e um número do commit seguido por um traço, um 'g' e um nome abreviado do objeto.

'<refname>', exemplo. 'master', 'heads/master', 'refs/heads/master'::
  Um nome simbólico `ref`. 'master' por exemplo, significa que o objeto de commit tem referência com 'refs/heads/master'. Caso aconteça de haver ambos os 'heads/master' ou 'tags/master', você pode explicitamente usar 'heads/master' para informar o Git qual deles quer. Quando ambíguo, um '<refname>' que desperte dúvidas é interpretado através da primeira coincidência de acordo com as seguintes regras:

  . Caso '$GIT_DIR/<refname>' exista, quando é isso o que você quer dizer (geralmente é apenas útil para `HEAD`, `FETCH_HEAD`, `ORIG_HEAD`, `MERGE_HEAD` e `CHERRY_PICK_HEAD`);

  . caso contrário, utilize 'refs/<refname>' caso exista;

  . caso contrário, utilize 'refs/tags/<refname>' caso exista;

  . caso contrário, utilize 'refs/heads/<refname>' caso exista;

  . caso contrário, utilize 'refs/remotes/<refname>' caso exista;

  . caso contrário, utilize 'refs/remotes/<refname>/HEAD' caso exista.
+
`HEAD` informa o commit no qual você teve como base as alterações na árvore de trabalho. `FETCH_HEAD` registra em qual ramo você buscou no repositório remoto com a sua última invocação `git fetch`. `ORIG_HEAD` é criado por comandos que movem seu` HEAD` de uma maneira drástica, para registrar a posição do `HEAD` antes da sua operação, para que você possa facilmente mudar a ponta do ramo de volta ao estado anterior a sua execução. `MERGE_HEAD` registra os commits que você está mesclando no seu ramo quando você executa o comando `git merge`. `CHERRY_PICK_HEAD` registra o commit que você está escolhendo quando executa o comando `git cherry-pick`.
+
Observe que em qualquer um dos casos o 'refs/*' acima pode vir do diretório `$GIT_DIR/refs` ou do arquivo`$GIT_DIR/packed-refs`. Embora a codificação do nome de referência não seja especificado, o UTF-8 é o predefinido pois algum processamento de saída pode assumir nomes `ref` em UTF-8.

'@'::
  O '@' sozinho é um atalho para `HEAD`.

'[<refname>]@{<data>}', exemplo. 'master@\{yesterday\}', 'HEAD@{5 minutos atrás}'::
  Uma "ref" seguida por um sufixo '@' com uma especificação ordinal incluída em um par de chaves (exemplo. '\{ontem\}', '{1 mês 2 semanas 3 dias 1 hora 1 segundo atrás}' ou '{1979-02-26 18:30:00}') determina o valor da "ref" em um momento anterior. Esse sufixo pode ser utilizado imediatamente após um nome "ref" e a "ref" deve ter um registro log que já exista ('$GIT_DIR/logs/<ref>'). Observe que em um determinado momento a condição geral da sua "ref" *local* será consultada ; o que estava no seu ramo 'master' na semana passada por exemplo. Caso queira ver quais os commits foram feitos durante determinados períodos de tempo, consulte `--since` e `--until`.

'<refname>@{<n>}', e.g. 'master@\{1\}'::
  Uma "ref" seguida pelo sufixo '@' com uma especificação ordinal incluída em um par de chaves (exemplo, '\{1\}', '\{15\}') especifica o enésimo valor anterior desta "ref". Por exemplo, 'master@\{1\}' é o valor anterior imediato de 'master', enquanto 'master@\{5\}' é o quinto valor anterior do 'master'. Este sufixo poderá ser utilizado imediatamente após um nome "ref" e o mesmo deve ter um registro log já existente em ('$GIT_DIR/logs/<refname>').

'@{<n>}', exemplo. '@\{1\}'::
  Você pode usar a construção '@' com um `ref` vazio para obter uma entrada `reflog` do ramo atual. Por exemplo, caso esteja no ramo 'blabla' então '@\{1\}' significa o mesmo que 'blabla@\{1\}'.

'@{-<n>}', exemplo, '@{-1}'::
  O construtor '@{-<n>}' significa que <n> do ramo/commit foi verificado antes da atual.

'[<nome-do-ramo>]@\{upstream\}', exemplo, 'master@\{upstream\}', '@\{u\}'::
  Um ramo B pode ser configurado para construir em cima de um ramo X (configurado com `branch.<nome>.merge`) em um R remoto (configurado com `branch.<nome>.remote`). B@{u} refere-se ao ramo rastreado remotamente para o ramo X obtido a partir do R remoto, normalmente encontrado em `refs/remotes/R/X`.

'[<nome-do-ramo>]@\{push\}', exemplo, 'master@\{push\}', '@\{push\}'::
  O sufixo '@\{push}' relata ao ramo "para onde estaremos fazendo impulsionamento" caso `git push` seja executado enquanto `branchname` seja verificado (ou o `HEAD` atual, caso nenhum nome do ramo tenha sido especificado). Como é para '@\{upstream}', reportamos o ramo rastreado remotamente que corresponda aquela ramificação remotamente.
+
Aqui um exemplo para deixar mais claro:
+
------------------------------
$ git config push.default current
$ git config remote.pushdefault myfork
$ git switch -c mybranch origin/master

$ git rev-parse --symbolic-full-name @{upstream}
refs/remotes/origin/master

$ git rev-parse --symbolic-full-name @{push}
refs/remotes/myfork/mybranch
------------------------------
+
Observe no exemplo que configuramos um fluxo de trabalho triangular, onde fazemos o `pull` (obtenção) de um local e o `push` (impulsionamento) para outro. Em um fluxo de trabalho não triangular, o '@\{push}' é igual como o '@\{upstream}' que não é necessário.
+
Esse sufixo também é aceito quando escrito em maiúsculas e significa a mesma coisa, não importa o caso.

'<rev>{caret}[<n>]', exemplo, 'HEAD{caret}, v1.5.1{caret}0'::
  Um sufixo '{caret}' para um parâmetro de revisão significa que a primeira origem deste objeto commit. '{caret}<n>' significa que é a quantidade <n> da origem (ou seja, '<rev>{caret}' é equivamente a '<rev>{caret}1'). Como regra especial, '<rev>{caret}0' significa o commit em si e é utilizado quando '<rev>' for o nome do objeto de um objeto `tag` que tenha referência a um objeto de commit.

'<rev>{tilde}[<n>]', exemplo, 'HEAD{tilde}, master{tilde}3'::
  Um sufixo '{tilde}' para um parâmetro de revisão significa o que a primeira origem deste objeto commit. Um sufixo '{tilde}<n>' para um parâmetro de revisão significa que o objeto commit é o <n> do ancestral da geração do objeto commit informado, seguindo apenas os primeiras origens. Ou seja, '<rev>{tilde}3' é equivalente a '<rev>{caret}{caret}{caret}' que é equivalente a '<rev>{caret}1{caret}1{caret}1'. Veja abaixo uma ilustração do uso deste formato.

'<rev>{caret}{<type>}', exemplo, 'v0.99.8{caret}\{commit\}'::
  Um sufixo '{caret}' seguido por um tipo de objeto com nome fechado entre chaves significa remover a referência do objeto em '<ref>' recursivamente até que um objeto do tipo '<type>' seja encontrado ou não seja mais possível remover a referência do (nesse caso, `barf`). Por exemplo, caso '<ref>' seja um commit ish, '<rev>{caret}\{commit\}' descreve o objeto commit correspondente. Da mesma forma caso '<re>' seja um ish da árvore '<rev>{caret}\{tree\}', descreve o objeto da árvore correspondente. '<rev>{caret}0' é um atalho para '<rev>{caret}\{commit\}'.
+
'<rev>{caret}\{object\}' pode ser utilizado para ter certeza que os nomes '<rev>' de um determinado objeto existam, sem requerer que '<rev>' seja uma tag e sem perder a referência com '<rev>'; pois `tag` já é um objeto, não a necessidade que seja perdido a referência nenhuma vez para chegar a um objeto.
+
'<rev>{caret}\{tag\}' pode ser utilizado para ter certeza que '<rev>' identifique um objeto `tag` já existente.

'<rev>{caret}{}', exemplo, 'v0.99.8{caret}{}'::
  Um sufixo '{caret}' seguido por um par de chaves vazias significa que o objeto pode ser uma tag e perder a referência de uma tag recursivamente, até que um objeto que não seja tag, seja encontrada.

'<rev>{caret}{/<texto>}', exemplo, 'HEAD^{/fix nasty bug}'::
  Um sufixo '{caret}' para um parâmetro de revisão, seguido por um par de chaves que contém um texto liderado por uma barra, é o mesmo que a sintaxe ':/fix nasty bug' abaixo, exceto que ele retorna o commit coincidente mais jovem que é acessível a partir de '<rev>' antes de '{caret}'.

':/<texto>', exemplo, ':/fix nasty bug'::
  Da nome a um commit aqueles que forem seguidos por um traço e por um texto, e a mensagem de commit coincidir à expressão regular usada. Esse nome retorna o commit coincidente mais jovem, acessível a partir de qualquer referência, incluindo `HEAD`. A expressão regular pode corresponder a qualquer parte da mensagem do commit. Para coincidir mensagens que comecem com uma string, pode-se utilizar ':/^foo' por exemplo. A sequência especial ': /!' está reservada para modificadores que tenham coincidências. ':/!-foo' executa uma coincidência negativa, enquanto ':/!!foo' coincide com um caractere literal '!', seguido por 'foo'. No momento, qualquer outra sequência começando com ':/!' está reservada. Dependendo do texto informado, as regras de divisão de palavras do shell podem exigir citações adicionais.

'<rev>:<caminho>', exemplo, 'HEAD:README', 'master:./README'::
  Um sufixo ':' seguido de um caminho nomeia a bolha ou a árvore no caminho especificado no objeto da árvore "ish" informado pela parte antes dos dois pontos. Um caminho começando com './' ou '../' é relativo ao diretório de trabalho atual. O caminho especificado será convertido para ser relativo ao diretório raiz da árvore de trabalho. Isso é mais útil para abordar uma bolha ou árvore de um commit ou uma árvore que tenha a mesma estrutura de árvore que uma árvore de trabalho.

':[<n>:]<caminho>', exemplo, ':0:README', ':README'::
  Os dois pontos opcionalmente seguidos por um número de estágio (0 para 3) e dois pontos, seguidos por um caminho, informam um objeto bolha no índice no caminho especificado. Nomeia uma entrada de estágio quando o número estiver ausente (assim como dois pontos que o seguem). Durante uma mesclagem, o estágio 1 é o ancestral comum, o estágio 2 é a versão do ramo de destino (normalmente o ramo atual) e o estágio 3 é a versão do ramo que está sendo mesclado.

Aqui está uma ilustração, de Jon Loeliger. Ambos os nós do commit B e C são as origens dos nós do commit A. Os commits da origem são ordenados da esquerda para a direita.

........................................
G   H   I   J
 \ /     \ /
  D   E   F
   \  |  / \
    \ | /   |
     \|/    |
      B     C
       \   /
        \ /
         A
........................................

    A =      = A^0
    B = A^   = A^1     = A~1
    C =      = A^2
    D = A^^  = A^1^1   = A~2
    E = B^2  = A^^2
    F = B^3  = A^^3
    G = A^^^ = A^1^1^1 = A~3
    H = D^2  = B^^2    = A^^^2  = A~2^2
    I = F^   = B^3^    = A^^3^
    J = F^2  = B^3^2   = A^^3^2


DEFININDO OS INTERVALOS
-----------------------

O histórico que atravessa os comandos como o `git log` opera em um determinado conjunto de commits e não apenas em único commit.

Para estes comandos, defina uma única revisão utilizando a notação descrita na seção anterior, significa que o conjunto dos commits `acessíveis` a partir do commit informado.

Ao especificar várias revisões significa que o conjunto dos commits acessíveis a partir de qualquer um dos commits informados.

O conjunto acessível de um commit é o próprio commit e o commit em sua cadeia de ancestrais.

Existem várias notações para definir um conjunto de commits associados (chamado de "intervalo de revisão"), ilustrado abaixo.


Exclusões de Commits
~~~~~~~~~~~~~~~~~~~~

'{caret}<rev>' (caret) Notação::
 Para excluir os commits acessíveis de um commit, é usada uma notação de prefixo '{caret}'. Por exemplo, '{caret}r1 r2' significa os commits acessíveis de 'r2' porém exclui aqueles acessíveis do 'r1' (por exemplo, 'r1' e os seus ancestrais).

Notações do Intervalo Pontilhado
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

A faixa de notação de intervalo '..' (dois pontos)::
 A operação do conjunto '{caret}r1 r2' aparece com tanta frequência que existe uma abreviação para isso. Quando você tem dois commits 'r1' e 'r2' (nomeados de acordo com a sintaxe explicada em ESPECIFICANDO REVISÕES acima), você pode solicitar os commits que sejam acessíveis atraés do 'r2' excluindo aqueles que podem ser acessados através do 'r1' pelo '{caret}r1 r2' e podem ser escritos como 'r1..r2'.

A notação da diferença simétrica '\...' (três pontos)::
 Uma notação semelhante 'r1\...r2' é chamada de uma diferença simétrica de 'r1' e 'r2' sendo definida como 'r1 r2 --not $(git merge-base --all r1 r2)'. É o conjunto dos commits que são acessíveis a partir do 'r1' (lado esquerdo) ou 'r2' (lado direito), porém, não de ambos.

Nestas duas notações abreviadas, é possível omitir uma extremidade e deixá-la como predefinido no `HEAD`. Como por exemplo, 'origin..' é uma abreviação de 'origin..HEAD' e pergunta "O que eu fiz desde que peguei a bifurcação no ramo de origem?" Da mesma forma, '..origin' é uma abreviação de 'HEAD..origin' e pergunta "O que a origem fez desde que eu as peguei?" Observe que '..' significaria 'HEAD..HEAD', que é um intervalo vazio acessível e inacessível a partir do `HEAD`.

Existem comandos que são concebidos de forma específica para tomar dois intervalos distintos (por exemplo, "git range-diff R1 R2" que compara dois intervalos), porém são exceções. A menos que seja observado o contrário, todos os comandos "git" que operam em um conjunto de commits funcionam em uma única faixa da revisão. Em outras palavras, escrever duas notações de "dois intervalos de pontos" um ao lado do outro, e.g.

    $ git log A..B C..D

*não* especifica dois intervalos de revisão para a maioria dos comandos. Em vez disso, ele nomeará um único conjunto de commits conectados, ou seja, aqueles que são acessíveis a partir de B ou D, mas que não são acessíveis a partir de A ou C. Em um histórico linear como este:

    ---A---B---o---o---C---D

porque A e B são alcançáveis a partir de C, o intervalo da faixa de revisão definido por estes dois intervalos pontilhados é um único commit D.


Outras <rev>{caret} Notações Abreviadas dos pais
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Existem três outras abreviações, particularmente úteis para a mesclagem dos commits, para nomear um conjunto formado por um commit e o seu pai principal.

A notação 'r1{caret}@' todos os pais do 'r1'.

A notação 'r1{caret}!' (cursor) inclui o commit 'r1', mas exclui todos as suas origens. Por si só, essa notação denota o único commit 'r1'.

A notação '<rev>{caret}-[<n>]' incluí '<rev>' porém excluí o '<n>ésimo' pai (ou seja, é uma abreviação para '<rev>{caret}<n>..<rev>'), com '<n>' = 1 caso não seja informado. Geralmente é útil para a mesclagem dos commits onde é possível passar '<commit>{caret}-' para obter todos os commits do ramoq que foi mesclado na mesclagem do commit '<commit>' (incluindo o próprio '<commit>').

Embora '<rev>{caret}<n>' fosse sobre a especificação do pai de um único commit, estas três notações também consideram os seus pais. Como por exemplo, você pode dizer 'HEAD{caret}2{caret}@', contudo não poderá dizer 'HEAD{caret}@{caret}2'.

Resumo do Intervalo da Revisão
------------------------------

'<rev>'::
	Inclua os commits que são acessíveis através do <ref> (ou seja, <rev> e seus ancestrais).

'{caret}<rev>'::
	Exclua os commits que estejam acessíveis a partir de `<rev>` (<rev> e os seus ancestrais por exemplo).

'<rev1>..<rev2>'::
	Inclua os commits acessíveis a partir do <rev2>, porém exclua aquelas acessíveis a partir do <rev1>. Quando <rev1> ou <rev2> for omitido, a predefinição retorna para `HEAD`.

'<rev1>\...<rev2>'::
	Incluí os commits que sejam acessíveis seja de <rev1> ou <rev2> porém exclua aqueles que sejam acessíveis de ambos. Quando <rev1> ou <rev2> for omitido, a predefinição retorna para `HEAD`.

'<rev>{caret}@', e.g. 'HEAD{caret}@'::
  Um sufixo '{caret}' seguido por um sinal de arroba é o mesmo que listar todas as origens de '<rev>' (ou seja, incluir qualquer coisa acessível das suas origens, mas não o próprio commit).

'<rev>{caret}!', e.g. 'HEAD{caret}!'::
  A suffix '{caret}' followed by an exclamation mark is the same as giving commit '<rev>' and all its parents prefixed with '{caret}' to exclude them (and their ancestors).

'<rev>{caret}-<n>', e.g. 'HEAD{caret}-, HEAD{caret}-2'::
	É o equivalente a '<rev>{caret}<n>..<rev>', with '<n>' = 1 caso nenhum seja informado.

Aqui estão alguns exemplos utilizando a ilustração Loeliger acima, com cada etapa da expansão e da seleção da notação cuidadosamente explicitada:

....
   Args   Expanded arguments    Selected commits
   D                            G H D
   D F                          G H I J D F
   ^G D                         H D
   ^D B                         E I J F B
   ^D B C                       E I J F B C
   C                            I J F C
   B..C   = ^B C                C
   B...C  = B ^F C              G H D E B C
   B^-    = B^..B
	  = ^B^1 B              E I J F B
   C^@    = C^1
	  = F                   I J F
   B^@    = B^1 B^2 B^3
	  = D E F               D G H E F I J
   C^!    = C ^C^@
	  = C ^C^1
	  = C ^F                C
   B^!    = B ^B^@
	  = B ^B^1 ^B^2 ^B^3
	  = B ^D ^E ^F          B
   F^! D  = F ^I ^J D           G H D F
....
