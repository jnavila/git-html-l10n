FORMATOS BONITOS
----------------

Se o commit for uma mesclagem e se o formato bonito não for 'oneline',
'email' ou 'raw', uma linha adicional será inserida antes da linha
'Author:'.  Esta linha começa com "Mesclar:" e os hashes dos commits
anteriores são exibidos, separados por espaços.  Observe que os commits
listados podem não ser necessariamente a lista *direta* dos commits
relacionados se você limitou sua visão do histórico: por exemplo, se você
estiver interessado apenas em alterações relacionadas a um determinado
diretório ou arquivo.

Existem vários formatos incorporados e você pode definir formatos adicionais
ao definir uma opção da configuração `pretty.<nome>` para um outro nome de
formato ou uma string 'format:', conforme descrito abaixo (consulte
linkgit:git-config[1]). Aqui estão os detalhes dos formatos incorporados:
Aqui estão os detalhes dos formatos incorporados:

* 'oneline'

	  <hash> <linha do título>
+
Isso foi desenvolvido para ser o mais compacto possível.

* 'short'

	  commit <hash>
	  Author: <autor>

	      <linha do título>

* 'medium'

	  commit <hash>
	  Author: <autor>
	  Date:   <data do autor>

	      <linha do título>

	      <mensagem completa do commit>

* 'full'

	  commit <hash>
	  Author: <autor>
	  Commit: <quem fez o commit>

	      <linha do título>

	      <mensagem completa do commit>

* 'fuller'

	  commit <hash>
	  Author:     <autor>
	  AuthorDate: <data do autor>
	  Commit:     <quem fez o commit>
	  CommitDate: <a data de quem fez o commit>

	       <linha do título>

	       <mensagem completa do commit>

* 'reference'

	  <abbrev hash> (<linha do título>, <data do autor abreviada>)
+
Este formato é utilizado para se referir a outro commit em uma mensagem de
commit e é o mesmo que o formato `--pretty='format:%C(auto)%h (%s, %ad)'`.
Por predefinição a data é formatada com `--date=short`, a menos que outra
opção `--date` seja utilizada de forma explicita.  Como em qualquer formato
`format:` com marcadores de formato, a sua saída não é afetada por outras
opções como `--decorate` e `--walk-reflogs`.

* 'email'

	  From <hash> <data>
	  From: <autor>
	  Date: <data do autor>
	  Subject: [PATCH] <linha do título>

	  <mensagem completa do commit>

* 'mboxrd'
+
Como 'e-mail', porém as linhas no commit da mensagem iniciando com "From"
(precedidas por zero ou mais ">") são citadas com ">" para que não sejam
confundidas ao iniciar um novo commit.

* 'raw'
+
O formato 'bruto' exibe todo o commit exatamente como foi armazenado no
objeto commit.  Notavelmente, os hashes são exibidos na íntegra
independentemente se a opção `--abbrev` ou `--no-abbrev` foram utilizadas,
as informações relacionadas as origens 'parents' demonstram quais os
verdadeiros commits da origem sem levar em consideração os enxertos ou a
simplificação do histórico. Observe que este formato afeta a maneira como os
commits são exibidos mas não a maneira como o "diff" é exibido com `git log
--raw` por exemplo. Para obter os nomes completos e sem abreviações dos
objetos em formato diff bruto, utilize `--no-abbrev`.

* 'format:<texto>'
+
O formato 'format:<texto>' permite especificar quais as informações que você
deseja exibir. Funciona um pouco como o formato "printf" com a exceção
notável de que você obtém uma nova linha com '%n' em vez de '\n'.
+
Por exemplo,'format:"O autor do %h foi %an, %ar%nO título era >>%s<<%n"'
exibirá algo como isso:
+
-------
O autor do fe6e0ee foi Junio C Hamano, 23 houras atrás
O título era >>t4119: test autocomputing -p<n> for traditional diff input.<<

-------
+
Os espaços reservados são:

- O Espaços reservados que se expandem para um único caractere literal:
'%n':: newline
'%%':: a raw '%'
'%x00':: imprime um byte de um código hexadecimal

- Espaços reservados que afetam a formatação de espaços reservados
  posteriores:
'%Cred':: mudar de cor para o vermelho
'%Cgreen':: mudar de cor para o verde
'%Cblue':: mudar de cor para o azul
'%Creset':: redefine a cor
'%C(...)':: definições das cores, conforme descrito em Valores no
	    "ARQUIVO DE CONFIGURAÇÃO" seção do linkgit:git-config[1].  É predefinido que
	    as cores sejam exibidas apenas quando ativadas para na saída do registro log
	    (em `color.diff`,` color.ui` ou `color`, e respeitando as configurações
	    `auto` da primeira se estivermos indo para um terminal). `%C(auto,...)` é
	    aceito como um sinônimo histórico do padrão (exemplo.,
	    `%C(auto,red)`). Especificar `%C(always,...)` exibirá as cores mesmo quando
	    a cor não estiver ativada (embora considere apenas usar `--color=always`
	    para sempre ativar a cor na saída incluindo este formato e qualquer outro
	    que o git possa colorir).  `auto` sozinho (ou seja,`%C(auto)`)  ativará a
	    coloração automática nos próximos espaços reservados até que a cor seja
	    trocada novamente.
'%m':: marca esquerda (`<`), direita (`>`) ou limite (`-`)
'%w([<w>[,<i1>[,<i2>]]])':: alterna a quebra de linha, como a opção `-w` de
			    linkgit:git-shortlog[1].
'%<(<N>[,trunc|ltrunc|mtrunc])':: faça com que o próximo espaço reservado leve em
				  menos N colunas, preenchendo espaços à direita, se necessário.
				  Opcionalmente, truncar no início (ltrunc), no meio (mtrunc) ou no final
				  (trunc) caso a saída seja maior que N colunas.  Observe que o truncamento
				  funciona corretamente com N >= 2.
'%<|(<N>)':: faça com que o próximo espaço reservado leve pelo menos até a enésima
	     colunas, preenchimento de espaços à direita se necessário
'%>(<N>)', '%>|(<N>)':: semelhante a '%<(<N>)', '%<|(<N>)' respectivamente,
			mas com espaços de preenchimento à esquerda
'%>>(<N>)', '%>>|(<N>)':: semelhante a '%>(<N>)', '%>|(<N>)'
			  respectivamente, exceto caso o próximo espaço reservado ocupe mais espaços
			  do que o informado e haja espaços à esquerda, utilize estes espaços
'%><(<N>)', '%><|(<N>)':: semelhante a '%<(<N>)', '%<|(<N>)'
			  respectivamente, mas preenchendo os dois lados (ou seja, o texto é
			  centralizado)

- Espaços reservados que se expandem para as informações extraídas do commit:
'%H':: hash do commit
'%h':: abreviação do hash do commit
'%T':: hash da árvore
'%t':: hash abreviado da árvore
'%P':: hash das origens
'%p':: hash abreviado das origens
'%an':: nome do autor
'%aN':: nome do autor (respeitando .mailmap, consulte linkgit:git-shortlog[1]
	ou linkgit:git-blame[1])
'%ae':: e-mail do autor
'%aE':: e-mail do autor (respeitando .mailmap, consulte linkgit:git-shortlog[1]
	ou linkgit:git-blame[1])
'%al':: parte local do e-mail do autor (a parte antes do sinal '@')
'%aL':: parte local do autor (consulte '%al') respeitando .mailmap, consulte
	linkgit:git-shortlog[1] ou linkgit:git-blame[1])
'%ad':: data do autor (o formato respeita a opção --date=)
'%aD':: data do autor, no padrão RFC2822
'%ar':: data do autor, relativa
'%at':: data do autor, com registro de data e hora em formato UNIX
'%ai':: data do autor, formato parecido com ISO 8601
'%aI':: data do autor, formato rigoroso ao padrão ISO 8601
'%as':: data do autor, formato curto (`AAAA-MM-DD`)
'%cn':: nome de quem fez o commit
'%cN':: nome de quem fez o commit (respeitando .mailmap, consulte
	linkgit:git-shortlog[1] ou linkgit:git-blame[1])
'%ce':: endereço do e-mail de quem fez o commit
'%cE':: e-mail de quem fez o commit (respeitando .mailmap, consulte
	linkgit:git-shortlog[1] ou linkgit:git-blame[1])
'%cl':: parte local do e-mail do autor (a parte antes do sinal '@')
'%cL':: parte local do autor (consulte '%cl') respeitando .mailmap, consulte
	linkgit:git-shortlog[1] ou linkgit:git-blame[1])
'%cd':: data do commit (o formato respeita a opção --date=)
'%cD':: data do commit, no padrão RFC2822
'%cr':: data do commit, relativa
'%ct':: data do commit, com registro de data e hora em formato UNIX
'%ci':: data do commit, formato parecido com ISO 8601
'%cI':: data do commit, formato rigoroso ao padrão ISO 8601
'%cs':: data do commit, formato curto (`AAAA-MM-DD`)
'%d':: nomes de referência "ref", como a opção --decorate do linkgit:git-log[1]
'%D':: nomes de referência "ref" sem quebra automática " (", ")".
'%S':: nomes "ref" dado na linha de comando pela qual o commit foi alcançado
       (como `git log --source`), só funciona com `git log`
'%e':: codificação
'%s':: assunto
'%f':: linha do assunto higienizado, adequado para um nome de arquivo
'%b':: corpo
'%B':: corpo bruto (assunto e corpo da mensagem desembrulhados)
ifndef::git-rev-list[]
'%N':: anotações de quem fez o commit
endif::git-rev-list[]
'%GG':: verificação bruta da mensagem vinda do GPG para um commit assinado
'%G?':: exibe "G" para obter uma boa assinatura (válida),
	"B" para uma assinatura ruim, "U" para uma boa assinatura com validade
	desconhecida, "X" para uma boa assinatura que expirou, "Y" para uma boa
	assinatura feita por uma chave expirada, "R" para uma boa assinatura feita
	por uma chave revogada, "E" caso a assinatura não possa ser verificada (por
	exemplo, uma chave ausente) e "N" sem assinatura
'%GS':: exibe o nome do assinante de um commit assinado
'%GK':: exibe a chave utilizada para assinar um commit assinado
'%GF':: exiba a impressão digital da chave utilizada para assinar um commit já
assinado
'%GP':: exiba a impressão digital da chave primária cuja subchave foi utilizada
	para assinar um commit assinado
'%GT':: exiba o nível de confiança da chave utilizada para assinar um commit
assinado
'%gD':: seletor do "reflog", por exemplo, `refs/stash@{1}` ou `refs/stash@{2
	minutos atrás} `; o formato segue as regras descritas para a opção `-g`. A
	parte antes ao `@` é o "refname", conforme indicado na linha de comando
	(portanto, `git log -g refs/heads/master` produziria
	`refs/heads/master@{0}`).
'%gd':: seletor do reflog encurtado; o mesmo que '%gD', menos o "refname"
	a parte é reduzida visando a legibilidade humana (assim, `refs/heads/master`
	se torna apenas `master`).
'%gn':: nome da identidade "reflog"
'%gN':: nome da identidade reflog (respeitando .mailmap, consulte
	linkgit:git-shortlog[1] ou linkgit:git-blame[1])
'%ge':: e-mail da identidade reflog
'%gE':: e-mail da identidade reflog (respeitando .mailmap, consulte
	linkgit:git-shortlog[1] ou linkgit:git-blame[1])
'%gs':: assunto reflog
'%(trailers[:options])':: exiba os sinais de resposta no corpo da mensagem como
			  interpretado por linkgit:git-interpret-trailers[1]. A carreira de caracteres
			  de resposta pode ser seguida por dois pontos e zero ou mais opções separadas
			  por vírgula:
** 'key=<K>': exibe apenas os caracteres de resposta com as chaves que forem
   definidas. A combinação é feita sem distinção entre maiúsculas e minúsculas,
   os dois pontos à direita são opcionais. Caso a opção seja utilizada várias
   vezes, os atributos das linhas coincidentes a qualquer uma das teclas serão
   exibidas. Esta opção ativa automaticamente a opção `only`, para que as
   linhas de bloqueio não sejam ocultadas. Caso não seja o efeito desejado,
   pode ser desativado com a opção `only=false`.  Por exemplo,
   `%(trailers:key=Revisado-por)` exibe as linhas com caracteres de resposta
   com a chave `Revisado-por`.
** 'only[=val]': seleciona se o atributo das linhas dos caracteres de resposta
   devem ser incluídos. A palavra-chave `only` pode opcionalmente ser seguido
   por um sinal de igual e uma das opções `true`, `on`, `yes` para omitir ou
   `false`, `off`, `no` para exibir as linhas que não sejam caracteres de
   resposta. Caso a opção seja usada sem qualquer valor, ela será ativada. Caso
   seja usado várias vezes, apenas o último valor será considerado.
** 'separator=<SEP>': defina um separador inserido entre as linhas dos
   caracteres de resposta. Quando esta opção não é utilizada, cada linha do
   caractere de resposta é finalizada com um caractere de avanço da linha. A
   sequência SEP poderá conter os códigos de formatação literal descritos
   acima. Para usar uma vírgula como separador, é necessário utilizar `%x2C`,
   pois caso contrário, seria analisado como fosse uma próxima opção. Caso a
   opção separadora seja utilizada várias vezes, apenas a última será levada em
   consideração. Como por exemplo, `%(trailers:key=Ticket,separator=%x2C )`
   mostra todas as linhas do caractere de resposta cuja chave é "Ticket"
   separada por vírgula e espaço.
** 'unfold[=val]': faça com que se comporte como se a opção do interpretador do
   caractere de resposta da opção `--unfold` tenha sido utilizada. Da mesma
   maneira que `only`, .que pode ser seguido através de um sinal de igual ou
   valores explícitos. Como por exemplo, `%(trailers:only,unfold=true)` revela
   e exibe todas as linhas dos caracteres de resposta.
** 'valueonly[=val]': ignore a parte principal da linha caractere de resposta e
   exiba apenas a parte do valor. Além disso, isto também permite que o valor
   seja explícito de maneira opcional.

NOTE: Alguns espaços reservados podem depender das outras opções passadas para o
motor percorrer a revisão. Por exemplo o opção `%g*` do reflog insere um
espaço vazio a menos que estejamos percorrendo as entradas do reflog
(exemplo, através do comando `git log -g`). Os espaços reservados `%d` e
`%D` usarão o formato de decoração "curta" caso a opção `--decorate` já não
esteja sendo utilizada na linha de comando.

Caso adicionemos um `+` (sinal de adição) após o '%' de um espaço reservado,
um feed de linha será inserido imediatamente antes da expansão, se e somente
se o espaço reservado se expandir para uma sequência de caracteres não
vazio.

Caso adicione um `-` (sinal de menos) após o '%' de um espaço reservado,
imediatamente todos os feeds consecutivos das linhas anteriores à expansão
serão excluídos caso e somente caso o espaço reservado se expanda para um
texto vazio.

Caso adicionemos um ` ` (espaço) após o '%' de um espaço reservado, um
espaço será inserido imediatamente antes da expansão, se e somente se o
espaço reservado se expandir para uma sequência de caracteres não vazios.

* 'tformat:'
+
O formato 'tformat:' funciona exatamente como 'format:', exceto que ele
provê a semântica "terminator" (terminador) em vez do "separator"
(separador). Em outras palavras, cada commit tem o caractere terminador da
mensagem (geralmente uma nova linha) adicionada em vez de um separador
colocado entre as entradas.  Significa que o final de cada entrada do
formato de uma linha única será terminada corretamente com uma nova linha,
assim como o formato com uma linha faz (oneline).  Por exemplo:
+
---------------------
$ git log -2 --pretty=format:%h 4da45bef \
  | perl -pe '$_ .= " -- NO NEWLINE\n" unless /\n/'
4da45be
7134973 -- NO NEWLINE

$ git log -2 --pretty=tformat:%h 4da45bef \
  | perl -pe '$_ .= " -- NO NEWLINE\n" unless /\n/'
4da45be
7134973
---------------------
+
Além disso, qualquer string não reconhecida que tenha um `%` nela, é
interpretada como se tivesse `tformat:` na frente.  Como por exemplo, estes
dois são equivalentes:
+
---------------------
$ git log -2 --pretty=tformat:%h 4da45bef
$ git log -2 --pretty=%h 4da45bef
---------------------
