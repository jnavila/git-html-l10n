FORMATOS BONITOS
----------------

Se o commit for uma mesclagem e se o formato bonito não for 'oneline', 'email' ou 'raw', uma linha adicional será inserida antes da linha 'Author:'. Esta linha começa com "Mesclar:" e os hashes dos commits anteriores são exibidos, separados por espaços. Observe que os commits listados podem não ser necessariamente a lista *direta* dos commits relacionados se você limitou sua visão do histórico: por exemplo, se você estiver interessado apenas em alterações relacionadas a um determinado diretório ou arquivo.

Existem vários formatos incorporados e você pode definir formatos adicionais ao definir uma opção da configuração `pretty.<nome>` para um outro nome de formato ou uma string 'format:', conforme descrito abaixo (consulte linkgit:git-config[1]). Aqui estão os detalhes dos formatos incorporados: Aqui estão os detalhes dos formatos incorporados:

* 'oneline'

	  <hash> <linha-do-título>
+
Isso foi desenvolvido para ser o mais compacto possível.

* 'short'

	  commit <hash>
	  Author: <autor>

	      <linha-do-título>

* 'medium'

	  commit <hash>
	  Author: <autor>
	  Date:   <data-do-autor>

	      <linha-do-título>

	      <mensagem-completa-do-commit>

* 'full'

	  commit <hash>
	  Author: <autor>
	  Commit: <quem fez o commit>

	      <linha-do-título>

	      <mensagem-completa-do-commit>

* 'fuller'

	  commit <hash>
	  Author:     <autor>
	  AuthorDate: <data-do-autor>
	  Commit:     <quem-fez-o-commit>
	  CommitDate: <a-data-de-quem-fez-o-commit>

	       <linha-do-título>

	       <mensagem-completa-do-commit>

* 'reference'

	  <abbrev-hash> (<linha-do-título>, <data-do-autor-abreviada>)
+
Este formato é utilizado para se referir a outro commit em uma mensagem de commit e é o mesmo que o formato `--pretty='format:%C(auto)%h (%s, %ad)'`. Por predefinição a data é formatada com `--date=short`, a menos que outra opção `--date` seja utilizada de forma explicita. Como em qualquer formato `format:` com marcadores de formato, a sua saída não é afetada por outras opções como `--decorate` e `--walk-reflogs`.

* 'email'

	  From <hash> <data>
	  From: <autor>
	  Date: <data-do-autor>
	  Subject: [PATCH] <linha-do-título>

	  <mensagem-completa-do-commit>

* 'mboxrd'
+
Como 'e-mail', porém as linhas no commit da mensagem iniciando com "From" (precedidas por zero ou mais ">") são citadas com ">" para que não sejam confundidas ao iniciar um novo commit.

* 'raw'
+
O formato 'bruto' exibe todo o commit exatamente como foi armazenado no objeto commit. Notavelmente, os hashes são exibidos na íntegra independentemente se a opção `--abbrev` ou `--no-abbrev` foram utilizadas, as informações relacionadas as origens 'parents' demonstram quais os verdadeiros commits da origem sem levar em consideração os enxertos ou a simplificação do histórico. Observe que este formato afeta a maneira como os commits são exibidos mas não a maneira como o "diff" é exibido com `git log --raw` por exemplo. Para obter os nomes completos e sem abreviações dos objetos em formato diff bruto, utilize `--no-abbrev`.

* 'format:<formato-do-texto>'
+
O formato 'format:<formato-do-texto>' permite especificar quais as informações que você deseja exibir. Funciona um pouco como o formato "printf" com a exceção notável de que você obtém uma nova linha com '%n' em vez de '\n'.
+
Por exemplo,'format:"O autor do %h foi %an, %ar%nO título era >>%s<<%n"' exibirá algo como isso:
+
-------
O autor do fe6e0ee foi Junio C Hamano, 23 houras atrás
O título era >>t4119: test autocomputing -p<n> for traditional diff input.<<

-------
+
Os espaços reservados são:

- O Espaços reservados que se expandem para um único caractere literal:
'%n':: newline
'%%':: a raw '%'
'%x00':: imprime um byte de um código hexadecimal

- Espaços reservados que afetam a formatação de espaços reservados posteriores:
'%Cred':: mudar de cor para o vermelho
'%Cgreen':: mudar de cor para o verde
'%Cblue':: mudar de cor para o azul
'%Creset':: redefine a cor
'%C(...)':: definição das cores, como descrito na parte de Valores no "ARQUIVO DE CONFIGURAÇÃO" seção do linkgit:git-config[1]. É predefinido que as cores sejam exibidas apenas quando ativadas para na saída do registro log (em `color.diff`,` color.ui` ou `color`, e respeitando as configurações `auto` da primeira se estivermos indo para um terminal). `%C(auto,...)` é aceito como um sinônimo histórico do padrão (exemplo., `%C(auto,red)`). Especificar `%C(always,...)` exibirá as cores mesmo quando a cor não estiver ativada (embora considere apenas usar `--color=always` para sempre ativar a cor na saída incluindo este formato e qualquer outro que o git possa colorir). `auto` sozinho (ou seja,`%C(auto)`) ativará a coloração automática nos próximos espaços reservados até que a cor seja trocada novamente.
'%m':: marca esquerda (`<`), direita (`>`) ou limite (`-`)
'%w([<w>[,<i1>[,<i2>]]])':: alterna a quebra da linha, como na opção `-w` do linkgit:git-shortlog[1].
'%<(<N>[,trunc|ltrunc|mtrunc])':: faz com que o próximo espaço ocupado ocupe ao menos N colunas, preenchendo espaços à direita, se necessário. Opcionalmente, truncar no início (ltrunc), no meio (mtrunc) ou no final (trunc) caso a saída seja maior que N colunas. Observe que o truncamento funciona corretamente com N >= 2.
'%<|(<N>)':: faça com que o próximo espaço reservado leve pelo menos até a enésima coluna, preenchendo os espaços à direita caso seja necessário
'%>(<N>)', '%>|(<N>)':: semelhante ao '%<(<N>)', '%<|(<N>)' respectivamente, mas preenchendo os espaços à esquerda
'%>>(<N>)', '%>>|(<N>)':: semelhante a '%>(<N>)', '%>|(<N>)' respectivamente, exceto caso o próximo espaço reservado ocupe mais espaços do que o informado e haja espaços à esquerda, utilize estes espaços
'%><(<N>)', '%><|(<N>)':: semelhante a '%<(<N>)', '%<|(<N>)' respectivamente, mas preenchendo ambos os lados (quando o texto for centralizado por exemplo)

- Espaços reservados que se expandem para as informações extraídas do commit:
'%H':: hash do commit
'%h':: abreviação do hash do commit
'%T':: hash da árvore
'%t':: hash abreviado da árvore
'%P':: hash das origens
'%p':: hash abreviado das origens
'%an':: nome do autor
'%aN':: o nome do autor (respeitando .mailmap, consulte linkgit:git-shortlog[1] ou linkgit:git-blame[1])
'%ae':: e-mail do autor
'%aE':: o e-mail do autor (respeitando .mailmap, consulte linkgit:git-shortlog[1] ou linkgit:git-blame[1])
'%al':: parte local do e-mail do autor (a parte antes do sinal '@')
'%aL':: parte do autor local (rconsulte '%al') espeitando o .mailmap, consulte linkgit:git-shortlog[1] ou linkgit:git-blame[1])
'%ad':: data do autor (o formato respeita a opção --date=)
'%aD':: data do autor, no padrão RFC2822
'%ar':: data do autor, relativa
'%at':: data do autor, com registro de data e hora em formato UNIX
'%ai':: data do autor, formato parecido com ISO 8601
'%aI':: data do autor, formato rigoroso ao padrão ISO 8601
'%as':: data do autor, formato curto (`AAAA-MM-DD`)
'%ah':: data da autoria, compreensível para pessoas (como a opção `--date=human` do linkgit:git-rev-list[1])
'%cn':: nome de quem fez o commit
'%cN':: o nome de quem fez o commit (respeitando .mailmap, consulte linkgit:git-shortlog[1] ou linkgit:git-blame[1])
'%ce':: endereço do e-mail de quem fez o commit
'%cE':: o e-mail de quem fez o commit (respeitando .mailmap, consulte linkgit:git-shortlog[1] ou linkgit:git-blame[1])
'%cl':: parte local do e-mail de quem fez o commit (a parte antes do sinal '@')
'%cL':: a parte local de quem fez o commit (consulte '%cl') respeitando o .mailmap, consulte see linkgit:git-shortlog[1] ou linkgit:git-blame[1])
'%cd':: data do commit (o formato respeita a opção --date=)
'%cD':: data do commit, no padrão RFC2822
'%cr':: data do commit, relativa
'%ct':: data do commit, com registro de data e hora em formato UNIX
'%ci':: data do commit, formato parecido com ISO 8601
'%cI':: data do commit, formato rigoroso ao padrão ISO 8601
'%cs':: data do commit, formato curto (`AAAA-MM-DD`)
'%ch':: a data de quem fez o commit, compreensível para pessoas (como a opção `--date=human` do linkgit:git-rev-list[1])
'%d':: nomes de referência "ref", como a opção --decorate do linkgit:git-log[1]
'%D':: nomes de referência "ref" sem quebra automática " (", ")".
'%(describe[:options])':: nome legível para as pessoas, como linkgit:git-describe[1]; uma expressão vazia para os commits sem descrição. A expressão `describe` pode ser seguida por dois pontos e zero ou mais opções separadas por vírgulas. As descrições podem ser inconsistentes quando as etiquetas são adicionadas ou removidas ao mesmo tempo.
+
** 'tags[=<bool-value>]': Em vez de considerar apenas as tags anotadas, considere também as lightweight tags.
** 'abbrev=<número>': Em vez de usar o número padrão com dígitos hexadecimais (que variam de acordo com a quantidade dos objetos no repositório com um padrão de 7) do nome abreviado do objeto, utilize `<número>` dígitos ou quantos dígitos forem necessários para formar um nome do objeto que seja único.
** 'match=<pattern>': Considere apenas as etiquetas que coincidam com o padrão `glob(7)` informado, excluindo o prefixo "refs/tags/".
** 'exclude=<pattern>': Desconsidere as etiquetas que coincidam com o padrão `glob(7)` informado, excluindo o prefixo "refs/tags/".

'%S':: os nomes "ref" dado na linha de comando pela qual o commit foi alcançado (como `git log --source`), só funciona com o comando `git log`
'%e':: codificação
'%s':: assunto
'%f':: linha do assunto higienizado, adequado para um nome de arquivo
'%b':: corpo
'%B':: corpo bruto (assunto e corpo da mensagem desembrulhados)
ifndef::git-rev-list[]
'%N':: anotações de quem fez o commit
endif::git-rev-list[]
'%GG':: verificação bruta da mensagem vinda do GPG para um commit assinado
'%G?':: exibe "G" quando uma assinatura for boa (válida), "B" para uma assinatura ruim, "U" para uma boa assinatura com validade desconhecida, "X" para uma boa assinatura que expirou, "Y" para uma boa assinatura feita por uma chave expirada, "R" para uma boa assinatura feita por uma chave revogada, "E" caso a assinatura não possa ser verificada (por exemplo, uma chave ausente) e "N" sem assinatura
'%GS':: exibe o nome do assinante de um commit assinado
'%GK':: exibe a chave utilizada para assinar um commit assinado
'%GF':: exiba a impressão digital da chave utilizada para assinar um commit já assinado
'%GP':: exiba a impressão digital da chave primária cuja subchave foi utilizada para assinar um commit assinado
'%GT':: exiba o nível de confiança da chave utilizada para assinar um commit assinado
'%gD':: seletor do reflog, como por exemplo, `refs/stash@{1}` or `refs/stash@{2 minutos atrás}`; o formato segue as regras descritas para a opção `-g`. A parte antes ao `@` é o "refname", conforme indicado na linha de comando (portanto, `git log -g refs/heads/master` produziria `refs/heads/master@{0}`).
'%gd':: o encurtamento do seletor do reflog; o mesmo que `%gD`, porém a parte do refname é reduzida visando a legibilidade humana (assim, o `refs/heads/master` se torna apenas `master`).
'%gn':: nome da identidade "reflog"
'%gN':: nome da identidade do reflog (respeitando .mailmap, consulte linkgit:git-shortlog[1] ou linkgit:git-blame[1])
'%ge':: e-mail da identidade reflog
'%gE':: e-mail da identidade do reflog (respeitando .mailmap, consulte linkgit:git-shortlog[1] ou linkgit:git-blame[1])
'%gs':: assunto reflog
'%(trailers[:options])':: exibe os trechos do corpo como interpretado através do linkgit:git-interpret-trailers[1]. Os trechos do texto da resposta podem ser seguidas por dois pontos, zero ou mais opções separadas por vírgula: Caso qualquer opção seja usada várias vezes, a última ocorrência ganha.
+
** 'key=<chave>': exibe apenas os caracteres de resposta com as <chaves> que forem definidas. A combinação é feita sem distinção entre maiúsculas e minúsculas, os dois pontos à direita são opcionais. Caso a opção seja utilizada várias vezes, os atributos das linhas coincidentes a qualquer uma das teclas serão exibidas. Esta opção ativa automaticamente a opção `only`, para que as linhas de bloqueio não sejam ocultadas. Caso não seja o efeito desejado, pode ser desativado com a opção `only=false`. Por exemplo, `%(trailers:key=Revisado-por)` exibe as linhas com caracteres de resposta com a chave `Revisado-por`.
** 'only[=<bool>]': selecione se as linhas não relacionadas à resposta a partir do bloco de resposta, devem ser incluídas ou não.
** 'separator=<sep>': defina um separador para ser inserido entre as linhas da resposta. Quando esta opção não é informada, cada linha de resposta é encerrada com um caractere de alimentação da linha. Uma string <sep> pode conter os códigos de formatação literal descritos acima. Para usar a vírgula como separador, deve-se usar `%x2C`, caso contrário, seria analisado como sendo a próxima opção. Por exemplo, `%(trailers:key=Ticket,separator=%x2C )` mostra todas as linhas de resposta cuja palavra principal seja "Ticket" separadas por uma vírgula e um espaço.
** 'unfold[=<bool>]': faça com que se comporte como se a opção `--unfold` do caracteres de resposta tenha sido passado. Por exemplo, `%(trailers:only,unfold=true)` desdobra e mostra todas as linhas de resposta.
** 'keyonly[=<bool>]': mostra apenas a parte principal da resposta.
** 'valueonly[=<bool>]': mostra apenas o valor da parte da resposta.
** 'key_value_separator=<sep>': define um separador inserido entre as linhas de resposta. Quando esta opção não é informada, cada par dos valores da palavra principal da resposta é separado por ": ". Caso contrário, ele compartilha a mesma semântica de 'separator=<sep>' acima.

NOTE: Alguns espaços reservados podem depender das outras opções passadas para o motor percorrer a revisão. Por exemplo o opção `%g*` do reflog insere um espaço vazio a menos que estejamos percorrendo as entradas do reflog (exemplo, através do comando `git log -g`). Os espaços reservados `%d` e `%D` usarão o formato de decoração "curta" caso a opção `--decorate` já não esteja sendo utilizada na linha de comando.

As opções booleanas aceitam um valor opcional `[=<bool>]`. Todos os valores `true`, `false`, `on`, `off` etc. são aceitos. Consulte a subseção "booleana" em "EXEMPLOS" em linkgit:git-config[1]. Caso uma opção booleana seja fornecida sem valor, ela será ativada.

Caso adicionemos um `+` (sinal de adição) após o '%' de um espaço reservado, um feed de linha será inserido imediatamente antes da expansão, se e somente se o espaço reservado se expandir para uma sequência de caracteres não vazio.

Caso adicione um `-` (sinal de menos) após o '%' de um espaço reservado, imediatamente todos os feeds consecutivos das linhas anteriores à expansão serão excluídos caso e somente caso o espaço reservado se expanda para um texto vazio.

Caso adicionemos um ` ` (espaço) após o '%' de um espaço reservado, um espaço será inserido imediatamente antes da expansão, se e somente se o espaço reservado se expandir para uma sequência de caracteres não vazios.

* 'tformat:'
+
O formato 'tformat:' funciona exatamente como 'format:', exceto que ele provê a semântica "terminator" (terminador) em vez do "separator" (separador). Em outras palavras, cada commit tem o caractere terminador da mensagem (geralmente uma nova linha) adicionada em vez de um separador colocado entre as entradas. Significa que o final de cada entrada do formato de uma linha única será terminada corretamente com uma nova linha, assim como o formato com uma linha faz (oneline). Por exemplo:
+
---------------------
$ git log -2 --pretty=format:%h 4da45bef \
  | perl -pe '$_ .= " -- NO NEWLINE\n" unless /\n/'
4da45be
7134973 -- NO NEWLINE

$ git log -2 --pretty=tformat:%h 4da45bef \
  | perl -pe '$_ .= " -- NO NEWLINE\n" unless /\n/'
4da45be
7134973
---------------------
+
Além disso, qualquer string não reconhecida que tenha um `%` nela, é interpretada como se tivesse `tformat:` na frente. Como por exemplo, estes dois são equivalentes:
+
---------------------
$ git log -2 --pretty=tformat:%h 4da45bef
$ git log -2 --pretty=%h 4da45bef
---------------------
