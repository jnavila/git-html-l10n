FORMATOS BONITOS
----------------

Se o commit for uma mesclagem e se o formato bonito não for 'oneline',
'email' ou 'raw', uma linha adicional será inserida antes da linha
'Author:'.  Esta linha começa com "Mesclar:" e os hashes dos commits
anteriores são exibidos, separados por espaços.  Observe que os commits
listados podem não ser necessariamente a lista *direta* dos commits
relacionados se você limitou sua visão do histórico: por exemplo, se você
estiver interessado apenas em alterações relacionadas a um determinado
diretório ou arquivo.

Existem vários formatos incorporados e você pode definir formatos adicionais
ao definir uma opção de configuração pretty.<name> para um outro nome de
formato ou uma string 'format:', conforme descrito abaixo (consulte
linkgit:git-config[1]). Aqui estão os detalhes dos formatos incorporados:

* 'oneline'

	  <hash> <title line>
+
Isso foi desenvolvido para ser o mais compacto possível.

* 'short'

	  commit <hash>
	  Author: <author>

	      <title line>

* 'medium'

	  commit <hash>
	  Author: <author>
	  Date:   <author date>

	      <title line>

	      <mensagem completa do commit>

* 'full'

	  commit <hash>
	  Author: <author>
	  Commit: <committer>

	      <title line>

	      <mensagem completa do commit>

* 'fuller'

	  commit <hash>
	  Author:     <author>
	  AuthorDate: <author date>
	  Commit:     <committer>
	  CommitDate: <committer date>

	       <title line>

	       <mensagem completa do commit>

* 'referência'

	  <abbrev hash> (<title line>, <short author date>)
+
Este formato é usado para se referir a outro commit em uma mensagem de
commit e é o mesmo que o formato `--pretty='format:%C(auto)%h (%s, %ad)'`.
Por predefinição a data é formatada com `--date=short`, a menos que outra
opção `--date` seja usada de forma explicita.  Como em qualquer formato
`format:` com marcadores de formato, a sua saída não é afetada por outras
opções como `--decorate` e `--walk-reflogs`.

* 'email'

	  From <hash> <date>
	  From: <author>
	  Date: <author date>
	  Subject: [PATCH] <title line>

	  <mensagem completa do commit>

* 'raw'
+
O formato 'bruto' (raw) exibe todo o commit exatamente da maneira como está
armazenado no objeto de commit.  Notavelmente, os hashes são exibidos na
íntegra independentemente de se --abbrev ou --no-abbrev foram usados, as
informações 'parents' mostram os verdadeiros commits da matriz sem levar em
consideração os enxertos ou a simplificação do histórico.  Observe que este
formato afeta a maneira como os commits são exibidos mas não a maneira como
o "diff" é exibido com `git log --raw` por exemplo. Para obter os nomes
completos e sem abreviações dos objetos em formato diff bruto, use
`--no-abbrev`.

* 'format:<string>'
+
O formato 'format:<string>' permite especificar quais as informações que
você deseja exibir. Funciona um pouco como o formato "printf" com a exceção
notável de que você obtém uma nova linha com '%n' em vez de '\n'.
+
Por exemplo,'format:"O autor do %h foi %an, %ar%nO título era >>%s<<%n"'
exibirá algo como isso:
+
-------
O autor do fe6e0ee foi Junio C Hamano, 23 houras atrás
O título era >>t4119: test autocomputing -p<n> for traditional diff input.<<

-------
+
Os espaços reservados são:

- O Espaços reservados que se expandem para um único caractere literal:
'%n':: uma nova linha
'%%':: a raw '%'
'%x00':: imprime um byte de um código hexadecimal

- Espaços reservados que afetam a formatação de espaços reservados
  posteriores:
'%Cred':: muda de cor para o vermelho
'%Cgreen':: muda de cor para o verde
'%Cblue':: mudar de cor para azul
'%Creset':: redefine a cor
'%C(...)':: especificação de cores conforme descrito em Valores no
	    "ARQUIVO DE CONFIGURAÇÃO" seção do linkgit:git-config[1].  É predefinido que
	    as cores sejam exibidas apenas quando ativadas para na saída do registro log
	    (em `color.diff`,` color.ui` ou `color`, e respeitando as configurações
	    `auto` da primeira se estivermos indo para um terminal).  `%C(auto,...)` é
	    aceito como um sinônimo histórico do padrão (exemplo., `%C(auto,red)`).
	    Especificar `%C(always,...)` exibirá as cores mesmo quando a cor não estiver
	    ativada (embora considere apenas usar `--color=always` para sempre ativar a
	    cor na saída incluindo este formato e qualquer outro que o git possa
	    colorir).  `auto` sozinho (ou seja,`%C(auto)`)  ativará a coloração
	    automática nos próximos espaços reservados até que a cor seja trocada
	    novamente.
'%m':: marca esquerda (`<`), direita (`>`) ou limite (`-`)
'%w([<w>[,<i1>[,<i2>]]])':: alterna a quebra de linha, como a opção `-w` de
			    linkgit:git-shortlog[1].
'%<(<N>[,trunc|ltrunc|mtrunc])':: faça com que o próximo espaço reservado leve em
				  menos N colunas, preenchendo espaços à direita, se necessário.
				  Opcionalmente, truncar no início (ltrunc), no meio (mtrunc) ou no final
				  (trunc) caso a saída seja maior que N colunas.  Observe que o truncamento
				  funciona corretamente com N >= 2.
'%<|(<N>)':: faça com que o próximo espaço reservado leve pelo menos até a enésima
	     colunas, preenchimento de espaços à direita se necessário
'%>(<N>)', '%>|(<N>)':: semelhante a '%<(<N>)', '%<|(<N>)' respectivamente,
			mas com espaços de preenchimento à esquerda
'%>>(<N>)', '%>>|(<N>)':: semelhante a '%>(<N>)', '%>|(<N>)'
			  respectivamente, exceto que caso o próximo espaço reservado ocupe mais
			  espaços do que o fornecido e houver espaços à esquerda, use estes espaços
'%><(<N>)', '%><|(<N>)':: semelhante a '%<(<N>)', '%<|(<N>)'
			  respectivamente, mas preenchendo os dois lados (ou seja, o texto é
			  centralizado)

- Espaços reservados que se expandem para as informações extraídas do commit:
'%H':: hash do commit
'%h':: abreviação do hash do commit
'%T':: hash da árvore
'%t':: hash abreviado da árvore
'%P':: hash das matrizes
'%p':: hash abreviado das matrizes
'%an':: nome do autor
'%aN':: nome do autor (respeitando o .mailmap, consulte linkgit:git-shortlog[1]
	ou linkgit:git-blame[1]
'%ae':: e-mail do autor
'%aE':: email do autor (respeitando .mailmap, consulte linkgit:git-shortlog[1]
	ou linkgit:git-blame[1]
'%al':: parte local do e-mail do autor (a parte antes do sinal '@')
'%aL':: parte local do autor (consulte '%al') respeitando .mailmap, consulte
	linkgit:git-shortlog[1] ou linkgit:git-blame[1])
'%ad':: data do autor (o formato respeita a opção --date=)
'%aD':: data do autor, no padrão RFC2822
'%ar':: data do autor, relativa
'%at':: data do autor, com registro de data e hora em formato UNIX
'%ai':: data do autor, formato parecido com ISO 8601
'%aI':: data do autor, formato rigoroso ao padrão ISO 8601
'%as':: data do autor, formato curto (`AAAA-MM-DD`)
'%cn':: nome de quem fez o commit
'%cN':: nome de quem fez o commit (respeitando .mailmap, consulte
	linkgit:git-shortlog[1] ou linkgit:git-blame[1])
'%ce':: endereço do e-mail de quem fez o commit
'%cE':: e-mail de quem fez o commit (respeitando .mailmap, consulte
	linkgit:git-shortlog[1] ou linkgit:git-blame[1])
'%cl':: parte local do e-mail do autor (a parte antes do sinal '@')
'%cL':: parte local do autor (consulte '%cl') respeitando .mailmap, consulte
	linkgit:git-shortlog[1] ou linkgit:git-blame[1])
'%cd':: data do commit (o formato respeita a opção --date=)
'%cD':: data do commit, no padrão RFC2822
'%cr':: data do commit, relativa
'%ct':: data do commit, com registro de data e hora em formato UNIX
'%ci':: data do commit, formato parecido com ISO 8601
'%cI':: data do commit, formato rigoroso ao padrão ISO 8601
'%cs':: data do commit, formato curto (`AAAA-MM-DD`)
'%d':: nomes de referência "ref", como a opção --decorate do linkgit:git-log[1]
'%D':: nomes de referência "ref" sem quebra automática " (", ")".
'%S':: nomes "ref" dado na linha de comando pela qual o commit foi alcançado
       (como `git log --source`), só funciona com `git log`
'%e':: codificação
'%s':: assunto
'%f':: linha do assunto higienizado, adequado para um nome de arquivo
'%b':: corpo
'%B':: corpo bruto (assunto e corpo da mensagem desembrulhados)
ifndef::git-rev-list[]
'%N':: anotações de quem fez o commit
endif::git-rev-list[]
'%GG':: verificação bruta da mensagem vinda do GPG para um commit assinado
'%G?':: exibe "G" para obter uma boa assinatura (válida),
	"B" para uma assinatura ruim, "U" para uma boa assinatura com validade
	desconhecida, "X" para uma boa assinatura que expirou, "Y" para uma boa
	assinatura feita por uma chave expirada, "R" para uma boa assinatura feita
	por uma chave revogada, "E" caso a assinatura não possa ser verificada (por
	exemplo, uma chave ausente) e "N" sem assinatura
'%GS':: exibe o nome do assinante de um commit assinado
'%GK':: exibe a chave usada para assinar um commit assinado
'%GF':: mostra a impressão digital da chave usada para assinar um commit assinado
'%GP':: mostra a impressão digital da chave primária cuja subchave foi usada
	para assinar um commit assinado
'%GT':: exiba o nível de confiança da chave usada para assinar um commit assinado
'%gD':: seletor do "reflog", por exemplo, `refs/stash@{1}` ou `refs/stash@{2
	minutos atrás} `; o formato segue as regras descritas para a opção `-g`. A
	parte antes ao `@` é o "refname", conforme indicado na linha de comando
	(portanto, `git log -g refs/heads/master` produziria
	`refs/heads/master@{0}`).
'%gd':: seletor do reflog encurtado; o mesmo que `%gD`, menos o "refname"
	a parte é reduzida visando a legibilidade humana (assim, `refs/heads/master`
	se torna apenas `master`).
'%gn':: nome da identidade "reflog"
'%gN':: nome da identidade "reflog" (respeitando .mailmap, consulte
	linkgit:git-shortlog[1] ou linkgit:git-blame[1])
'%ge':: e-mail da identidade reflog
'%gE':: e-mail da identidade reflog (respeitando .mailmap, consulte
	linkgit:git-shortlog[1] ou linkgit:git-blame[1])
'%gs':: reflog subject
'%(trailers[:options])':: exiba os sinais de resposta no corpo da mensagem como
			  interpretado por linkgit:git-interpret-trailers[1]. A carreira de caracteres
			  de resposta pode ser seguida por dois pontos e zero ou mais opções separadas
			  por vírgula:
** 'key=<K>': only show trailers with specified key. Matching is done
   case-insensitively and trailing colon is optional. If option is given
   multiple times trailer lines matching any of the keys are shown. This option
   automatically enables the `only` option so that non-trailer lines in the
   trailer block are hidden. If that is not desired it can be disabled with
   `only=false`.  E.g., `%(trailers:key=Reviewed-by)` shows trailer lines with
   key `Reviewed-by`.
** 'only[=val]': select whether non-trailer lines from the trailer block should
   be included. The `only` keyword may optionally be followed by an equal sign
   and one of `true`, `on`, `yes` to omit or `false`, `off`, `no` to show the
   non-trailer lines. If option is given without value it is enabled. If given
   multiple times the last value is used.
** 'separator=<SEP>': specify a separator inserted between trailer lines. When
   this option is not given each trailer line is terminated with a line feed
   character. The string SEP may contain the literal formatting codes described
   above. To use comma as separator one must use `%x2C` as it would otherwise
   be parsed as next option. If separator option is given multiple times only
   the last one is used. E.g., `%(trailers:key=Ticket,separator=%x2C )` shows
   all trailer lines whose key is "Ticket" separated by a comma and a space.
** 'unfold[=val]': make it behave as if interpret-trailer's `--unfold` option
   was given. In same way as to for `only` it can be followed by an equal sign
   and explicit value. E.g., `%(trailers:only,unfold=true)` unfolds and shows
   all trailer lines.
** 'valueonly[=val]': skip over the key part of the trailer line and only show
   the value part. Also this optionally allows explicit value.

NOTE: Some placeholders may depend on other options given to the revision
traversal engine. For example, the `%g*` reflog options will insert an empty
string unless we are traversing reflog entries (e.g., by `git log -g`). The
`%d` and `%D` placeholders will use the "short" decoration format if
`--decorate` was not already provided on the command line.

If you add a `+` (plus sign) after '%' of a placeholder, a line-feed is
inserted immediately before the expansion if and only if the placeholder
expands to a non-empty string.

If you add a `-` (minus sign) after '%' of a placeholder, all consecutive
line-feeds immediately preceding the expansion are deleted if and only if
the placeholder expands to an empty string.

If you add a ` ` (space) after '%' of a placeholder, a space is inserted
immediately before the expansion if and only if the placeholder expands to a
non-empty string.

* 'tformat:'
+
The 'tformat:' format works exactly like 'format:', except that it provides
"terminator" semantics instead of "separator" semantics. In other words,
each commit has the message terminator character (usually a newline)
appended, rather than a separator placed between entries.  This means that
the final entry of a single-line format will be properly terminated with a
new line, just as the "oneline" format does.  For example:
+
---------------------
$ git log -2 --pretty=format:%h 4da45bef \
  | perl -pe '$_ .= " -- NO NEWLINE\n" unless /\n/'
4da45be
7134973 -- NO NEWLINE

$ git log -2 --pretty=tformat:%h 4da45bef \
  | perl -pe '$_ .= " -- NO NEWLINE\n" unless /\n/'
4da45be
7134973
---------------------
+
In addition, any unrecognized string that has a `%` in it is interpreted as
if it has `tformat:` in front of it.  For example, these two are equivalent:
+
---------------------
$ git log -2 --pretty=tformat:%h 4da45bef
$ git log -2 --pretty=%h 4da45bef
---------------------
