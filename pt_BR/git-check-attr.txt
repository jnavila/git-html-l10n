git-check-attr(1)
=================

NOME
----
git-check-attr - Exiba as informações sobre os gitattributes


RESUMO
------
[verse]
'git check-attr' [--source <tree-ish>] [-a | --all | <attr>...] [--] <nome_do_caminho>...
'git check-attr' --stdin [-z] [--source <tree-ish>] [-a | --all | <attr>...]

DESCRIÇÃO
---------
Para cada nome do caminho, este comando listará se cada atributo é `unspecified` (não especificado), `set` (definido) ou `unset` (não definido) como um gitattribute neste nome do caminho.

OPÇÕES
------
-a, --all::
	Liste todos os atributos que estão associados com os caminhos definidos. Caso esra opção seja utilizada, os atributos 'unspecified' não serão inclusos na saída.

--cached::
	Considere o `.gitattributos` apenas no índice, ignorando a árvore de trabalho.

--stdin::
	Leia os nomes do caminho na entrada padrão, um por linha, em vez da linha de comando.

-z::
	O formato da saída é modificado para ser analisável por uma máquina. Caso o `--stdin` também seja informado, os caminhos da entrada serão separados por um caractere `NUL` em vez de um caractere de avanço de linha.

--source=<tree-ish>::
	Verifique os atributos em relação à árvore especificada. É comum especificar a árvore de origem nomeando um commit, um ramo ou uma tag associada com ela.

\--::
	Interprete todas as opções anteriores como atributos e todos as opções a seguir como nomes do caminho.

Caso nenhuma opção `--stdin`, `--all` ou `--` seja utilizado, a primeira será tratada como um atributo e o restante das opções como os nomes do caminho.

SAÍDA
-----

A saída assume a forma: <caminho> COLON SP <atributo> COLON SP <info> LF

a menos que `-z` esteja em vigor, no caso onde `NUL` é utilizado como um delimitador: <caminho> NUL <atributo> NUL <info> NUL


`<caminho>` é o caminho de um arquivo sendo consultado, `<attribute>` é um atributo sendo consultado e <info> pode ser:

'unspecified';; quando o atributo não esteja definido para o caminho.
'unset';;	quando o atributo é definido como falso.
'set';;		quando o atributo é definido como verdadeiro.
<valor>;;	quando um valor foi atribuído ao atributo.

A carga da memória intermédia (buffering) ocorre como foi documentada na opção `GIT_FLUSH` em linkgit:git[1]. O responsável pela chamada é aquele que evita que os bloqueios causados pelo preenchimento excessivo de uma memória intermédia na entrada ou pela leitura de uma memória intermédia vazia na saída.

EXEMPLOS
--------

Nos exemplos, o seguinte arquivo '.gitattributos' é utilizado:
---------------
*.java diff=java -crlf myAttr
NoMyAttr.java !myAttr
README caveat=unspecified
---------------

* Listando um único atributo:
---------------
$ git check-attr diff org/example/MyClass.java
org/example/MyClass.java: diff: java
---------------

* Listando vários atributos para um arquivo:
---------------
$ git check-attr crlf diff myAttr -- org/example/MyClass.java
org/example/MyClass.java: crlf: unset
org/example/MyClass.java: diff: java
org/example/MyClass.java: myAttr: set
---------------

* Listando todos os atributos de um arquivo:
---------------
$ git check-attr --all -- org/example/MyClass.java
org/example/MyClass.java: diff: java
org/example/MyClass.java: myAttr: set
---------------

* Listando um atributo para vários arquivos:
---------------
$ git check-attr myAttr -- org/example/MyClass.java org/example/NoMyAttr.java
org/example/MyClass.java: myAttr: set
org/example/NoMyAttr.java: myAttr: unspecified
---------------

* Nem todos os valores não ambíguos são iguais:
---------------
$ git check-attr caveat README
README: caveat: unspecified
---------------

VEJA TAMBÉM
-----------
linkgit:gitattributes[5].

GIT
---
Parte do conjunto linkgit:git[1]
