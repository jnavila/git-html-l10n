git-sh-setup(1)
===============

NOME
----
git-sh-setup - Código de configuração do shell script comum ao Git

RESUMO
------
[verse]
'. "$(git --exec-path)/git-sh-setup"'

DESCRIÇÃO
---------

Este não é um comando que o usuário final gostaria de executar. Nunca. This documentation is meant for people who are studying the Porcelain-ish scripts and/or are writing new ones.

O scriptlet 'git sh-setup' foi projetado para ser originado (usando `.`) através dos outros scripts shell para configurar algumas variáveis apontando para os diretórios normais do Git e algumas funções auxiliares do shell.

Antes de procurá-lo, o seu script deve configurar algumas variáveis; `USAGE` (e `LONG_USAGE`, caso haja) é utilizado para definir a mensagem informada através da função shell `use ()`. O `SUBDIRECTORY_OK` pode ser definido caso o script possa ser executado a partir de um subdiretório da árvore de trabalho (alguns comandos não podem).

O scriptlet define o `GIT_DIR` e as variáveis shell `GIT_OBJECT_DIRECTORY`, porém *não* as exporta no ambiente.

FUNÇÕES
-------

die::
	encerra após emitir a mensagem de erro informada no fluxo de erros predefinido.

usage::
	encerre com a mensagem do consumo.

set_reflog_action::
	Defina a variável de ambiente `GIT_REFLOG_ACTION` para um determinado texto (tipicamente o nome do programa) a menos que já esteja definido. Sempre que o script executa um comando `git` que atualiza as refs, um lançamento no reflog é criad usando o valor deste texto para deixar o registro onde comando atualizou a "ref".

git_editor::
	executa um editor selecionado pelo usuário (GIT_EDITOR, core.editor, VISUAL ou EDITOR) em um determinado arquivo, mas com erro caso nenhum editor seja definido e o terminal for burro.

is_bare_repository::
	gera `true` ou `false` no fluxo da saída padrão para indicar caso o repositório seja um repositório simples (ou seja, sem uma associação a qualquer árvore de trabalho).

cd_to_toplevel::
	executa o 'chdir' no nível mais alto da árvore de trabalho.

require_work_tree::
	verifica se o diretório atual está dentro da árvore de trabalho do repositório, ou de outra forma, encerre.

require_work_tree_exists::
	verifica se a árvore de trabalho associada ao repositório existe, ou de outra forma, encerre. Geralmente é feito antes de chamar o `cd_to_toplevel`, o que é impossível de fazer caso não haja uma árvore de trabalho em funcionamento.

require_clean_work_tree <ação> [<dica>]::
	verifica se a arvore de trabalho e o índice associados ao repositório possuam alterações nos commits que não foram feitos dos arquivos monitorados. Caso contrário, emita uma mensagem de erro no formato `Cannot <ação>: <motivo>. <dica>`, e encerre. Exemplo:
+
----------------
require_clean_work_tree rebase "Faça o commit ou armazene-os."
----------------

get_author_ident_from_commit::
	gera o código para uso com o 'eval' para definir as variáveis `GIT_AUTHOR_NAME`, `GIT_AUTHOR_EMAIL` e `GIT_AUTHOR_DATE` para um determinado commit.

create_virtual_base::
	modifica o primeiro arquivo para que apenas as linhas em comum com o segundo arquivo permaneçam. Caso haja um material comum insuficiente, o primeiro arquivo será deixado vazio. O resultado é adequado como uma entrada da base virtual para mesclagem de três vias.

GIT
---
Parte do conjunto linkgit:git[1]
