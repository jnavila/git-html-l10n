git-fetch-pack(1)
=================

NOME
----
git-fetch-pack - Recebe os objetos ausentes vindos de um outro repositório


RESUMO
------
[verse]
'git fetch-pack' [--all] [--quiet|-q] [--keep|-k] [--thin] [--include-tag]
	[--upload-pack=<git-upload-pack>]
	[--depth=<n>] [--no-progress]
	[-v] <repositório> [<refs>...]

DESCRIÇÃO
---------
No lugar utilize 'git fetch' que é um wrapper de maior hierarquia deste comando.

Invoca o comando 'git-upload-pack' num repositório possivelmente remoto e pede que ele envie os objetos que estão faltando nesse repositório para atualizar determinados cabeçalhos. A lista dos commits disponíveis localmente é encontrada através da varredura da hierarquia "refs/" local e enviada para o comando 'git-upload-pack' que esteja sendo executado na outra ponta.

Este comando deteriora durante o download de tudo para concluir os `refs` solicitados do lado remoto quando o lado local não possui um commit com um ancestral comum.


OPÇÕES
------
--all::
	Busque todas os `refs` remotos.

--stdin::
	Pegue a lista dos `refs` do stdin, um por linha. Caso haja `refs` utilizados na linha de comando, além desta opção, os `refs` do stdin serão processados após as da linha de comando.
+
Caso `--stateless-rpc` seja utilizado junto com esta opção, a lista de referências deverá estar no formato do pacote (linha-pkt). Cada `ref` deve estar num pacote separado e a lista deve terminar com um pacote liberado.

-q::
--quiet::
	Passe o flag `-q` para o 'git unpack-objects'; isso torna o processo de clonagem menos detalhado.

-k::
--keep::
	Não invoque o 'git unpack-objects' nos dados recebidos, porém crie um único arquivo do pacote a partir dele e armazene-o no banco de dados do objeto. Caso seja utilizado duas vezes, o pacote será bloqueado contra a reembalagem.

--thin::
	Busque um pacote "thin", que registra os objetos num formato "deltificado" com base nos objetos não inclusos no pacote para reduzir o tráfego de rede.

--include-tag::
	Se o lado remoto for compatível com isso, a anotação das etiquetas dos objetos serão baixadas na mesma conexão que os outros objetos se o objeto onde a etiqueta faz referência for baixada. Aquele que invoca deve determinar as etiquetas que esta opção disponibilizou.

--upload-pack=<git-upload-pack>::
	Use isso para especificar o caminho para o comando 'git-upload-pack' no lado remoto, caso ele não seja encontrado em seu $PATH. As instalações do sshd ignoram os scripts de configuração do ambiente do usuário para shells de login (.bash_profile por exemplo) e o seu git instalado de forma privada pode não possa ser encontrado na predefinição do $PATH do sistema. Outra solução alternativa sugerida é configurar o seu $PATH em ".bashrc", isso serve para pessoas que não querem pagar a sobrecarga dos shells não interativos por ter um arquivo .bashrc enxuto (elas configuram a maioria das coisas em .bash_profile).

--exec=<git-upload-pack>::
	O mesmo que --upload-pack=<git-upload-pack>.

--depth=<n>::
	Limite a busca de cadeias de ancestrais com comprimento não superior a `n`. O comando 'git-upload-pack' trata a profundidade especial 2147483647 como infinita, ainda que haja uma cadeia de ancestrais tão longa.

--shallow-since=<data>::
	Aprofunde ou encurte o histórico de um repositório raso para incluir todas os commits acessíveis após a <data>.

--shallow-exclude=<revisão>::
	Aprofunde ou reduza o histórico de um repositório superficial para excluir os commits acessíveis a partir de um ramo ou tag remoto informada. Esta opção pode ser utilizada várias vezes.

--deepen-relative::
	O argumento `--depth` determina a quantidade limite dos commits atual da superfície em vez do cume de cada histórico do ramo remoto.

--refetch::
	Ignora a negociação dos commits com o servidor, a fim de obter (fetch) todos os objetos correspondentes. Use para reaplicar uma nova clonagem parcial do filtro da bolha/árvore.

--no-progress::
	Não exiba o progresso.

--check-self-contained-and-connected::
	Exiba "connectivity-ok" caso o pacote recebido seja independente e conectado.

-v::
	Rode de forma loquaz.

<repositório>::
	A URL para o repositório remoto.

<refs>...::
	Os cabeçotes remotos que serão atualizados. Isso é relativo ao $GIT_DIR ("HEAD", "refs/heads/master" por exemplo). Quando não for especificado, atualiza a partir de todos os cabeçalhos que o lado remoto tiver.
+
Caso o lado remoto tenha as opções `uploadpack.allowTipSHA1InWant`, `uploadpack.allowReachableSHA1InWant`, ou `uploadpack.allowAnySHA1InWant` ativadas, eles poderão alternativamente ser sha1 com 40-hex.

VEJA TAMBÉM
-----------
linkgit:git-fetch[1]

GIT
---
Parte do conjunto linkgit:git[1]
