git-diff(1)
===========

NOME
----
git-diff - Exibe as mudanças entre os commits, o commit, a árvore de trabalho, etc


RESUMO
------
[verse]
'git diff' [<options>] [<commit>] [--] [<caminho>...]
'git diff' [<options>] --cached [--merge-base] [<commit>] [--] [<caminho>...]
'git diff' [<options>] [--merge-base] <commit> [<commit>...] <commit> [--] [<caminho>...]
'git diff' [<options>] <commit>...<commit> [--] [<caminho>...]
'git diff' [<options>] <blob> <blob>
'git diff' [<options>] --no-index [--] <caminho> <caminho>

DESCRIÇÃO
---------
Exibe as alterações entre a árvore de trabalho, o índice ou uma árvore, as alterações entre o índice e uma árvore, as alterações entre as duas árvores, nas alterações resultantes de uma mesclagem, nas alterações entre dois objetos bolha ou nas alterações entre dois arquivos no disco.

'git diff' [<opções>] [--] [<caminho>...]::

	Este formulário serve para exibir as alterações feitas em relação ao índice (área de preparação para o próximo commit). Em outras palavras, as diferenças são as que você _pode_ informar ao Git para adicionar ao índice, mas ainda não o fez. Você pode preparar essas alterações utilizando linkgit:git-add[1].

'git diff' [<opções>] --no-index [--] <caminho> <caminho>::

	Este formulário serve para comparar os dois caminhos utilizados no sistema de arquivos. Você pode omitir a opção `--no-index` durante a execução do comando em uma árvore de trabalho controlado pelo Git e pelo menos um dos pontos dos caminhos fora da árvore de trabalho ou ao executar o comando fora de uma árvore de trabalho que é controlado pelo Git. Este formulário implica no uso da opção `--exit-code`.

'git diff' [<opções>] --cached [--merge-base] [<commit>] [--] [<caminho>...]::

	Este formulário serve para exibir as alterações feitas em relação ao próximo commit relativo ao `<commit>` informado. Geralmente você vai querer uma comparação com o commit mais recente, portanto, se não fizer o `<commit>` a predefinição retorna para `HEAD`. Caso `HEAD` não exista (por exemplo, os galhos que ainda vão aparecer) e um `<commit>` não tenha sido feito, exibe todas as alterações em etapas. `--staged` é um sinônimo da opção `--cached`.
+
Caso a opção --merge-base seja usada, em vez de usar <commit>, use a base mesclada do <commit> e HEAD. `git diff --cached --merge-base A` é o mesmo que `git diff --cached $(git merge-base A HEAD)`.

'git diff' [<opções>] [--merge-base] <commit> [--] [<caminho>...]::

	Este formulário exibe as modificações feitas por você na sua árvore de trabalho relativo ao nome do `<commit>`. É possível utilizar o `HEAD` para compará-lo com o commit mais recente ou para comparar com o cume de um ramo diferente.
+
Caso a opção --merge-base seja usada, em vez de usar <commit>, use a base mesclada do <commit> e HEAD. `git diff --merge-base A` é o mesmo que `git diff $(git merge-base A HEAD)`.

'git diff' [<opções>] [--merge-base] <commit> <commit> [--] [<caminho>...]::

	Isso é para exibir as alterações entre os dois `<commits>` arbitrários.
+
Caso a opção --merge-base seja usada, use a base mesclada dos dois commits do lado "anterior". O comando `git diff --merge-base A B` é o mesmo que `git diff $(git merge-base A B) B`.

'git diff' [<opções>] <commit> <commit>... <commit> [--] [<caminho>...]::

	This form is to view the results of a merge commit. The first listed <commit> must be the merge itself; the remaining two or more commits should be its parents. Convenient ways to produce the desired set of revisions are to use the suffixes `^@` and `^!`. If A is a merge commit, then `git diff A A^@`, `git diff A^!` and `git show A` all give the same combined diff.

'git diff' [<opções>] <commit>..<commit> [--] [<caminho>...]::

	Isso é um sinônimo do formulário anterior (sem o `..`) para visualizar as alterações entre dois <commit> arbitrários. Caso o <commitir> de um lado seja omitido, ele terá o mesmo efeito que usar `HEAD`.

'git diff' [<opções>] <commit>\...<commit> [--] [<caminho>...]::

	Este formulário é para exibir as alterações no ramo que contenha até o segundo `<commit>`, iniciando com um ancestral comum de ambos os `<commit>`. `git diff A...B` é o equivalente a um `git diff $(git merge-base A B) B`. Você pode omitir qualquer um dos `<commit>` que tem o mesmo efeito que usar `HEAD`.

No caso de você estar fazendo algo exótico, deve-se notar que todos os `<commit>` na descrição acima, exceto no caso da opção `--merge-base` nas duas últimas formas que usam as notações `..`, podem ser qualquer `<árvore>`.

Para obter uma lista mais completa de maneiras de soletrar um `<commit>`, consulte a seção "DEFININDO AS REVISÕES" em linkgit:gitrevisions[7]. No entanto, `diff` é sobre comparar dois _endpoints_, e não os intervalos, as notações de intervalo (`<commit>.. <commit>` e `<commit>... <commit>`) não significam um intervalo definido na seção "DEFININDO AS REVISÕES" em linkgit:gitrevisions[7].

'git diff' [<opções>] <blob> <blob>::

	Este formulário serve para exibir as alterações feitas entre o conteúdo bruto de dois objetos bolha.

OPÇÕES
------
:git-diff: 1
include::diff-options.txt[]

-1 --base::
-2 --ours::
-3 --theirs::
	Compare a árvore de trabalho com a versão "base" (stage #1), "o nosso ramo" (stage #2) "o ramo deles" (stage #3). O índice contém estas etapas apenas para as entradas que não foram não mescladas enquanto estiver resolvendo os conflitos. Para obter informações mais detalhadas, consulte a seção "3-Way Merge" linkgit:git-read-tree[1].

-0::
	Omita a saída diff para as entradas que não tenham sido mescladas e exiba "Unmergedd". Só pode ser utilizado quando comparamos a árvore de trabalho com o índice.

<caminho>...::
	Os parâmetros `<paths>`, quando utilizados, são para limitar o `diff` quanto aos nomes dos caminhos (você pode dar nomes de diretórios e obter um `diff` para todos os arquivos sob eles).


include::diff-format.txt[]

EXEMPLOS
--------

Várias maneiras para verificar a sua árvore de trabalho::
+
------------
$ git diff            <1>
$ git diff --cached   <2>
$ git diff HEAD       <3>
------------
+
<1> As mudanças na árvore de trabalho ainda não preparadas para o próximo commit.
<2> As alterações entre o índice e o seu último commit; o que você estaria fazendo no commit caso você executasse o comando `git commit` sem a opção `-a`.
<3> As alterações na árvore de trabalho desde o seu último commit; o que você estaria fazendo no commit caso executasse o comando `git commit -a`

Comparando com commits arbitrários::
+
------------
$ git diff test            <1>
$ git diff HEAD -- ./test  <2>
$ git diff HEAD^ HEAD      <3>
------------
+
<1> Em vez de utilizar o cume do ramo atual, compare com o cume do ramo "teste".
<2> Em vez de comparar com o cume do ramo "teste", compare com o cume do ramo atual, limitando-se a comparação com o arquivo "teste".
<3> Compare a versão antes do último commit e o último commit.

Comparando os ramos::
+
------------
$ git diff topic master    <1>
$ git diff topic..master   <2>
$ git diff topic...master  <3>
------------
+
<1> As alterações entre as dicas do tópico e as ramificações principais.
<2> O mesmo que acima.
<3> As alterações que ocorreram na ramificação master (mestre) desde quando a ramificação do tópico foi iniciada.

Limitando a saída diff::
+
------------
$ git diff --diff-filter=MRC            <1>
$ git diff --name-status                <2>
$ git diff arch/i386 include/asm-i386   <3>
------------
+
<1> Exibe apenas as modificações, renomeações e cópias, mas não a adição ou exclusão.
<2> Exibe apenas os nomes e a natureza da alteração, mas não a saída diff real.
<3> Limite a saída diff aos nomes das subárvores.

Arruinando a saída diff::
+
------------
$ git diff --find-copies-harder -B -C  <1>
$ git diff -R                          <2>
------------
+
<1> Gaste alguns ciclos extras para encontrar renomeações, cópias e reescritas completas (muito custoso ao sistema).
<2> Saída do diff em reverso.

CONFIGURAÇÃO
------------

include::includes/cmd-config-section-all.txt[]

include::config/diff.txt[]

VEJA TAMBÉM
-----------
diff(1), linkgit:git-difftool[1], linkgit:git-log[1], linkgit:gitdiffcore[7], linkgit:git-format-patch[1], linkgit:git-apply[1], linkgit:git-show[1]

GIT
---
Parte do conjunto linkgit:git[1]
