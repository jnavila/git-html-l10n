git-shortlog(1)
===============

NOME
----
git-shortlog - Resume a saída do comando 'git log'

RESUMO
------
[verse]
'git shortlog' [<opções>] [<intervalo-das-revisões>] [[--] <caminho>...]
git log --pretty=short | 'git shortlog' [<opções>]

DESCRIÇÃO
---------
Resume a saída 'git log' em um formato adequado para inclusão nos anúncios
de lançamento. Cada commit será agrupada por autor e título.

Além disso, o "[PATCH]" será retirado da descrição do commit.

Caso nenhuma revisão seja aprovada na linha de comando e a entrada padrão
não seja um terminal ou não houver uma ramificação atual, o `git shortlog`
exibirá um resumo do registro log lido da entrada padrão, sem referência ao
repositório atual.

OPÇÕES
------

-n::
--numbered::
	Classifique a saída de acordo com a quantidade de commits feitas pelo autor,
	em vez da ordem alfabética do autor.

-s::
--summary::
	Suprima a descrição do commit e forneça apenas um resumo da contagem dos
	commits.

-e::
--email::
	Exibir o endereço de email de cada autor.

--format[=<formato>]::
	Em vez do assunto do commit, utilize outras informações para descrever cada
	commit.  O '<formato>' pode ser qualquer texto aceito pela opção `--format`
	do comando 'git log', assim como '* [%h] %s'.  (Consulte a seção "FORMATOS
	BONITOS" do linkgit:git-log[1].)

	Cada commit bem impresso será reorganizado antes de ser exibido.

-c::
--committer::
	Colete e exiba as identidades de quem realizou os commits em vez dos
	autores.

-w[<largura>[,<recuo1>[,<recuo2>]]]::
	Limite o tamanho das linhas geradas, quebrando a linha através da sua
	`largura`.  A primeira linha de cada entrada é recuada pelos espaços
	`recuo1`, assim como a segunda linha junto com as próximas, são recuadas
	pelos espaços `recuo2`. A `largura`, `recuo1`, e `recuo2` estão predefinidos
	para 76, 6 e 9 caracteres, respectivamente.
+
Caso a largura seja `0` (zero), recue as linhas da saída sem quebrá-las.

<intervalo da revisão>::
	Exibe apenas os commits no intervalo definido das revisões.  Quando um
	<intervalo de revisão> não é definido, a predefinição retorna para `HEAD`
	(ou seja, todo o histórico que leva ao commit atual).  O `origin..HEAD`
	define todos os commits acessíveis a partir do commit atual (ou seja,
	`HEAD`), porém não a partir do `origin`. Para uma lista mais completa das
	maneiras de escrever os nomes dos objetos, consulte a seção "DEFININDO AS
	REVISÕES" no linkgit:gitrevisions[7].

[--] <caminho>...::
	Considere apenas os commits que são suficientes para explicar como os
	arquivos que coincidam com determinados caminhos foram criados.
+
Os caminhos podem precisar ser prefixados com um `--` para separá-los das
opções ou do intervalo de revisões, quando um conflito surgir.

:git-shortlog: 1
include::rev-list-options.txt[]

MAPEANDO AUTORES
----------------

O recurso `.mailmap` é utilizado para agrupar os commits da mesma pessoa no
"shortlog", onde o seu nome ou endereço de email foram escritos de maneiras
diferentes.

include::mailmap.txt[]

GIT
---
Parte do conjunto linkgit:git[1]
