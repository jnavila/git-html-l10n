Generarea textului patch-ului cu -p
-----------------------------------

Rularea linkgit:git-diff[1], linkgit:git-log[1], linkgit:git-show[1], linkgit:git-diff-index[1], linkgit:git-diff-tree[1], sau linkgit:git-diff-files[1] cu opțiunea `-p` produce un text de patch. Puteți personaliza crearea textului de patch-uri prin intermediul variabilelor de mediu `GIT_EXTERNAL_DIFF` și `GIT_DIFF_OPTS` (a se vedea linkgit:git[1]), precum și prin atributul `diff` (a se vedea linkgit:gitattributes[5]).

Ceea ce produce opțiunea -p este ușor diferit de formatul diff tradițional:

1.   Acesta este precedat de un antet "git diff" care arată astfel:

       diff --git un/fișier1 b/fișier2
+
Numele fișierelor `a/` și `b/` sunt identice, cu excepția cazului în care este vorba de redenumire/copiere. În special, chiar și pentru o creare sau o ștergere, `/dev/null` este _nu_ utilizat în locul numelor de fișiere `a/` sau `b/`.
+
Atunci când este vorba de redenumire/copiere, `fișier1` și `fișier2` arată numele fișierului sursă al redenumirii/copierii și, respectiv, numele fișierului pe care îl produce redenumirea/copierea.

2.   Acesta este urmat de una sau mai multe linii de antet extinse:

       modul vechi <modul>
       modul nou <modul>
       mod fișier șters <mode>
       noul mod de fișier <mode>
       copie din <path>
       copie din <path>
       redenumire din <path>
       redenumește în <path>
       indice de similaritate <număr>
       indice de disimilaritate <număr>
       index <hash>..<hash> <mode>
+
Modurile de fișier sunt tipărite ca numere octale din 6 cifre, inclusiv tipul de fișier și biții de permisiune ai fișierului.
+
Numele căilor de acces din antetele extinse nu includ prefixele `a/` și `b/`.
+
Indicele de similaritate reprezintă procentul de linii neschimbate, iar indicele de disimilaritate reprezintă procentul de linii modificate. Este un număr întreg rotunjit în jos, urmat de un semn de procent. Astfel, indicele de similitudine de 100% este rezervat pentru două fișiere egale, în timp ce o valoare de disimilaritate de 100% înseamnă că nicio linie din vechiul fișier nu a fost inclusă în cel nou.
+
Linia indexului include numele obiectelor blob înainte și după modificare. <mode> este inclus dacă modul de fișier nu se schimbă; în caz contrar, linii separate indică vechiul și noul mod.

3.  Numele de drum cu caractere "neobișnuite" sunt citate așa cum se explică pentru variabila de configurare `core.quotePath` (vezi linkgit:git-config[1]).

4.  Toate fișierele `file1` din ieșire se referă la fișierele dinainte de confirmare, iar toate fișierele `file2` se referă la fișierele de după confirmare. Nu este corect să se aplice fiecare modificare fiecărui fișier în mod secvențial. De exemplu, acest patch va schimba a și b:

      diff --git a/a b/b
      redenumiți din a
      redenumește în b
      diff --git a/b b/a
      redenumire din b
      redenumire în a

5.  În antetul hunk-ului se menționează numele funcției la care se aplică hunk-ul. Consultați "Definirea unui hunk-header personalizat" în linkgit:gitattributes[5] pentru detalii despre cum să adaptați acest lucru la anumite limbaje.


Formatul dif combinat
---------------------

Orice comandă care generează diferențe poate folosi opțiunea `-c` sau `--cc` pentru a produce o "diferență combinată" atunci când arată o fuziune. Acesta este formatul implicit atunci când se afișează fuziunile cu linkgit:git-diff[1] sau linkgit:git-show[1]. Rețineți, de asemenea, că puteți da opțiunea `--diff-merges` adecvată oricăreia dintre aceste comenzi pentru a forța generarea de diferențe într-un format specific.

Un format "combined diff" arată în felul următor:

------------
diff --combined describe.c
index fabadb8,cc95eb0..4866510
--- a/describe.c
+++ b/describe.c
@@@ -98,20 -98,12 +98,20 @@@
	return (a_date > b_date) ? -1 : (a_date == b_date) ? 0 : 1;
  }

- static void describe(char *arg)
 -static void describe(struct commit *cmit, int last_one)
++static void describe(char *arg, int last_one)
  {
 +	unsigned char sha1[20];
 +	struct commit *cmit;
	struct commit_list *list;
	static int initialized = 0;
	struct commit_name *n;

 +	if (get_sha1(arg, sha1) < 0)
 +		usage(describe_usage);
 +	cmit = lookup_commit_reference(sha1);
 +	if (!cmit)
 +		usage(describe_usage);
 +
	if (!initialized) {
		initialized = 1;
		for_each_ref(get_name);
------------

1.   Acesta este precedat de un antet "git diff", care arată astfel (atunci când este utilizată opțiunea `-c`):

       diff --fișier combinat
+
sau în felul următor (atunci când se utilizează opțiunea `--cc`):

       diff --cc fișier

2.   Acesta este urmat de una sau mai multe linii de antet extinse (acest exemplu arată o fuziune cu doi ascendenți):

       index <hash>,<hash>..<hash>
       mode <mode>,<mode>..<mode>
       noul mod de fișier <mode>
       mod fișier șters <mode>,<mode>,<mode>
+
Linia `mode <mode>,<mode>..<mode>` apare numai dacă cel puțin unul dintre <mode> este diferit de restul. Antetele extinse cu informații despre mișcările de conținut detectate (redenumiri și detectarea copierii) sunt concepute pentru a funcționa cu diff de două <tree-ish> și nu sunt utilizate de formatul diff combinat.

3.   Acesta este urmat de un antet de două rânduri de la fișier/la fișier

       --- a/fișier
       +++ b/fișier
+
Similar cu antetul de două linii pentru formatul tradițional "unificat" diff, `/dev/null` este utilizat pentru a semnala fișierele create sau șterse.
+
Cu toate acestea, dacă este furnizată opțiunea --combined-all-paths, în loc de un antet de două linii from-file/to-file veți obține un antet de N+1 linii from-file/to-file, unde N este numărul de surse din comisionul de fuziune

       --- a/fișier
       --- a/fișier
       --- a/fișier
       +++ b/fișier
+
Acest format extins poate fi util în cazul în care detectarea redenumirii sau a copierii este activă, pentru a vă permite să vedeți numele original al fișierului în diferiți ascendenți.

4.   Formatul antetului Chunk este modificat pentru a preveni ca oamenii să nu-l introducă accidental în `patch -p1`. Formatul Combined diff a fost creat pentru revizuirea modificărilor de comisionare a fuziunii și nu a fost conceput pentru a fi aplicat. Modificarea este similară cu cea din antetul extins "index":

       @@@ <de la-fila-range> <de la-fila-range> <de la-fila-range> @@@
+
Există (numărul de autori + 1) caractere `@` în antetul chunk pentru formatul de diferență combinat.

Spre deosebire de formatul tradițional "unificat" diff, care prezintă două fișiere A și B cu o singură coloană care are prefixul `-` (minus -- apare în A, dar este eliminat în B), `+` (plus -- lipsește în A, dar este adăugat în B) sau `""` (spațiu -- neschimbat), acest format compară două sau mai multe fișiere file1, file2,... cu un singur fișier X și arată în ce fel diferă X de fiecare din fileN. O coloană pentru fiecare dintre fișiereleN este adăugată la linia de ieșire pentru a nota modul în care linia lui X este diferită de aceasta.

Un caracter `-` în coloana N înseamnă că linia apare în fișierulN, dar nu apare în rezultat. Un caracter `+` în coloana N înseamnă că linia apare în rezultat, iar fișierulN nu are acea linie (cu alte cuvinte, linia a fost adăugată, din punctul de vedere al ascendentului respectiv).

În exemplul de ieșire de mai sus, semnătura funcției a fost modificată în ambele fișiere (de aici două eliminări `-` atât din fișierul1, cât și din fișierul2, plus `++` pentru a însemna că o linie care a fost adăugată nu apare nici în fișierul1, nici în fișierul2). De asemenea, alte opt linii sunt aceleași din fișierul1, dar nu apar în fișierul2 (de unde și prefixarea cu `+`).

Atunci când este afișat de `git diff-tree -c`, acesta compară părinții unei comenzi de fuziune cu rezultatul fuziunii (de exemplu, fișierul1..fișierulN sunt părinții). Atunci când este afișat de `git diff-files -c`, acesta compară cei doi părinți nerezolvați ai fuziunii cu fișierul din arborele de lucru (de exemplu, fișierul1 este stadiul 2, adică "versiunea noastră", iar fișierul2 este stadiul 3, adică "versiunea lor").
