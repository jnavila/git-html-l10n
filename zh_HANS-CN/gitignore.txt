gitignore(5)
============

名称
--
gitignore - 指定有意不跟踪的文件

概述
--
$XDG_CONFIG_HOME/git/ignore, $GIT_DIR/info/exclude, .gitignore

描述
--

A `gitignore` file specifies intentionally untracked files that Git should ignore. Files already tracked by Git are not affected; see the NOTES below for details.

Each line in a `gitignore` file specifies a pattern. When deciding whether to ignore a path, Git normally checks `gitignore` patterns from multiple sources, with the following order of precedence, from highest to lowest (within one level of precedence, the last matching pattern decides the outcome):

 * 从支持这些模式的命令行中读取的模式。

 * Patterns read from a `.gitignore` file in the same directory as the path, or in any parent directory (up to the top-level of the working tree), with patterns in the higher level files being overridden by those in lower level files down to the directory containing the file. These patterns match relative to the location of the `.gitignore` file. A project normally includes such `.gitignore` files in its repository, containing patterns for files generated as part of the project build.

 * 从 `$GIT_DIR/info/exclude` 中读取的模式。

 * 从配置变量 `core.excludesFile` 指定的文件中读取的模式。

将模式放入哪个文件取决于模式的使用方式。

 * 应受版本控制并通过克隆分发到其他仓库的模式（即所有开发人员都想忽略的文件）应放入 `.gitignore` 文件。

 * 特定于某个仓库但无需与其他相关仓库共享的模式（例如，存在于仓库内部但特定于某个用户工作流程的辅助文件）应放入 `$GIT_DIR/info/exclude` 文件。

 * 用户希望 Git 在任何情况下都忽略的模式（例如，由用户选择的编辑器生成的备份或临时文件），一般会放入用户的 `~/.gitconfig` 中由 `core.excludesFile` 指定的文件。它的默认值是 $XDG_CONFIG_HOME/git/ignore。如果 $XDG_CONFIG_HOME 未设置或为空，则使用 $HOME/.config/git/ignore 代替。

The underlying Git plumbing tools, such as 'git ls-files' and 'git read-tree', read `gitignore` patterns specified by command-line options, or from files specified by command-line options. Higher-level Git tools, such as 'git status' and 'git add', use patterns from the sources specified above.

日期格式
----

 - 空行不匹配任何文件，因此可以作为分隔符，以提高可读性。

 - A line starting with # serves as a comment. Put a backslash ("`\`") in front of the first hash for patterns that begin with a hash.

 - 除非使用反斜线（"`\`"）引号，否则尾部空格将被忽略。

 - An optional prefix "`!`" which negates the pattern; any matching file excluded by a previous pattern will become included again. It is not possible to re-include a file if a parent directory of that file is excluded. Git doesn't list excluded directories for performance reasons, so any patterns on contained files have no effect, no matter where they are defined. Put a backslash ("`\`") in front of the first "`!`" for patterns that begin with a literal "`!`", for example, "`\!important!.txt`".

 - 斜线 "`/`" 用作目录分隔符。分隔符可以出现在 `.gitignore` 搜索模式的开头、中间或结尾。

 - 如果在模式的开头或中间（或两者都有）有分隔符，则该模式是相对于特定 `.gitignore` 文件本身的目录层级而言的。否则，该模式也可能匹配 `.gitignore` 层级以下的任何层级。

 - 如果模式末尾有分隔符，则模式只能匹配目录，否则模式既可以匹配文件，也可以匹配目录。

 - 例如，模式 `doc/frotz/` 匹配 `doc/frotz` 目录，但不匹配 `a/doc/frotz` 目录；而 `frotz/` 则匹配 `frotz` 和 `a/frotz` 这两个目录（所有路径都是从 `.gitignore` 文件开始的相对路径）。

 - An asterisk "`*`" matches anything except a slash. The character "`?`" matches any one character except "`/`". The range notation, e.g. `[a-zA-Z]`, can be used to match one of the characters in a range. See fnmatch(3) and the FNM_PATHNAME flag for a more detailed description.

在与全路径名匹配的模式中，两个连续的星号（"`**`"）可能有特殊含义：

 - "`**`"在带斜杠目录之前，表示在所有目录中匹配。例如，"`**/foo`"匹配任何文件或目录的"`foo`"，与模式"`foo`"相同。"`**/foo/bar`"匹配任何文件或目录中直接位于目录"`foo`"之下的"`bar`"。

 - 路径后跟有 "`/**`" 表示匹配这个目录里面的所有文件。例如，"`abc/**`" 匹配相对于 `.gitignore` 文件的位置中目录 "`abc`" 内的所有文件，深度无限。

 - 一个斜杠后面是两个连续的星号再接上一个斜杠，匹配零个或多个目录。例如，"`a/**/b`" 匹配 "`a/b`"、"`a/x/b`"、"`a/x/y/b`"，等等，依此类推。

 - 其他连续星号被视为普通星号，将根据前面的规则进行匹配。

配置
--

The optional configuration variable `core.excludesFile` indicates a path to a file containing patterns of file names to exclude, similar to `$GIT_DIR/info/exclude`. Patterns in the exclude file are used in addition to those in `$GIT_DIR/info/exclude`.

注释
--

使用 gitignore 文件的目的是确保某些不被 Git 追踪的文件不被追踪。

要停止跟踪当前已被跟踪的文件，可使用 'git rm --cached' 从索引中移除该文件。文件名随后会被添加到 `.gitignore` 文件中，以防止该文件在以后的提交中被重新引入。

访问工作树中的 `.gitignore` 文件时，Git 不会跟踪符号链接。这样，当从索引或工作树访问文件时，与从文件系统访问文件时的行为保持一致。

实例
--

 - 模式 `hello.*` 匹配名称以 `hello.` 开头的任何文件或目录。如果只想将其限制在目录中，而不限制在其子目录中，则可以在模式前加上斜线，即 `/hello.*`；现在该模式可匹配 `hello.txt` 和 `hello.c` 但不匹配 `a/hello.java`。

 - 模式 `foo/` 将匹配目录 `foo` 及其下的路径，但不会匹配常规文件或符号链接 `foo`（这与 Git 中 pathspec 的一般工作方式一致）

 - `doc/frotz` 和 `/doc/frotz` 模式在任何 `.gitignore` 文件中都有同样的效果。换句话说，如果模式中已经有中间斜线，那么前导斜线就无关紧要了。

 - 模式 `foo/*` 匹配 `foo/test.json`（一个正则文件）和 `foo/bar`（一个目录），但不匹配 `foo/bar/hello.c`（一个正则文件），因为模式中的星号不匹配 `bar/hello.c`，因为 `bar/hello.c` 中含有斜线。

--------------------------------------------------------------
    $ git status
    [...]
    # 未追踪的文件:
    [...]
    #       Documentation/foo.html
    #       Documentation/gitignore.html
    #       file.o
    #       lib.a
    #       src/internal.o
    [...]
    $ cat .git/info/exclude
    # 忽略在目录树中的所有对象和存档文件
    *.[oa]
    $ cat Documentation/.gitignore
    # 忽略 html 文件,
    *.html
    # 但追踪自己写的 foo.html
    !foo.html
    $ git status
    [...]
    # 未追踪的文件:
    [...]
    #       Documentation/foo.html
    [...]
--------------------------------------------------------------

再举一个例子：

--------------------------------------------------------------
    $ cat .gitignore
    vmlinux*
    $ ls arch/foo/kernel/vm*
    arch/foo/kernel/vmlinux.lds.S
    $ echo '!/vmlinux*' >arch/foo/kernel/.gitignore
--------------------------------------------------------------

第二个 .gitignore 阻止 Git 忽略 `arch/foo/kernel/vmlinux.lds.S`。

示例排除除特定目录 `foo/bar` 以外的所有内容（注意 `/*` - 如果没有斜线，通配符也会排除 `foo/bar` 中的所有内容）：

--------------------------------------------------------------
    $ cat .gitignore
    # 排除 foo/bar 以外的所有内容
    /*
    !/foo
    /foo/*
    !/foo/bar
--------------------------------------------------------------

参见
--
linkgit:git-rm[1], linkgit:gitrepository-layout[5], linkgit:git-check-ignore[1]

GIT
---
属于 linkgit:git[1] 文档
