--[no-]all::
	获取所有远程控制。这将覆盖配置变量 `fetch.all`。

-a::
--append::
	在 `.git/FETCH_HEAD` 的现有内容中添加获取的引用名称和对象名称。 如果没有这个选项，`.git/FETCH_HEAD` 中的旧数据将被覆盖。

--atomic::
	使用一个原子事务来更新本地索引。要么所有的引用都被更新，要么在出错时，没有引用被更新。

--depth=<深度>::
	限制从每个远程分支历史的顶端获取指定数量的提交。如果获取的是由 `git clone` 创建的 '浅层' 仓库，并使用 `--depth=<depth>` 选项（见 linkgit:git-clone[1]），则加深或缩短历史，达到指定数量的提交。深化后的提交的标签不会被获取。

--deepen=<深度>::
	与--depth类似，只是它指定了从当前浅层边界开始的提交数量，而不是从每个远程分支历史的顶端开始。

--shallow-since=<日期>::
	加深或缩短浅层仓库的历史，包括<日期>之后所有可触及的提交。

--shallow-exclude=<修订版本>::
	深化或缩短浅层版本库的历史，以排除从指定的远程分支或标记中可以到达的提交。 这个选项可以指定多次。

--unshallow::
	如果源仓库是完整的，将浅层资源库转换为完整的仓库，消除浅层仓库带来的所有限制。
+
如果源仓库是浅层的，尽可能多的获取，使当前仓库的历史与源仓库相同。

--update-shallow::
	默认情况下，当从浅层仓库获取时，`git fetch` 会拒绝需要更新 .git/shallow 的引用。这个选项更新了 .git/shallow 并接受这样的引用。

--negotiation-tip=<提交|通配符>::
	默认情况下，Git 会向服务器报告从所有本地引用中可触及的提交，以寻找共同的提交，试图减少待接收的打包文件的大小。如果指定的话，Git将只报告从给定提示中的可达提交。 当用户知道哪个本地引用可能与被获取的上游引用有共同的提交时，这会加快抓取文件的速度。
+
这个选项可以指定多次；如果是这样，Git将报告从任何一个给定的提交中可达提交。
+
这个选项的参数可以是一个引用名称的通配符，一个引用，或者一个提交的SHA-1（可能是缩写的）。指定一个通配符相当于多次指定这个选项，为每个匹配的引用名称指定该选项。
+
参见 linkgit:git-config[1] 中记录的 `fetch.negotiationAlgorithm` 和 `push.negotiate` 配置变量，以及下面的 `--negotiate-only` 选项。

--negotiate-only::
	不从服务器获取任何东西，而是打印所提供的 `--negotiation-tip=*` 参数与服务器上的共同祖先。
+
这与 `--recurse-submodules=[yes|on-demand]` 不兼容。 在内部，这被用来实现 `push.negotiate` 选项，见linkgit:git-config[1]。

--dry-run::
	显示会做什么，而不做任何改变。

--porcelain::
	将输出结果以易于解析的格式打印到标准输出，供脚本使用。详情见 linkgit:git-fetch[1] 中的输出部分。
+
这与 `--recurse-submodules=[yes|on-demand]` 选项不兼容，并且优先于 `fetch.output` 配置选项。

ifndef::git-pull[]
--[no-]write-fetch-head::
	直接在`$GIT_DIR`下的`FETCH_HEAD`文件中写入获取的远程引用列表。 这是默认的。 从命令行传递`--no-write-fetch-head`，告诉Git不要写入该文件。 在`--dry-run`选项下，该文件永远不会被写入。
endif::git-pull[]

-f::
--force::
	正如讨论的那样，当 'git fetch' 与 `<源>:<目标>` 引用规范一起使用时，它可能会拒绝更新本地分支
ifdef::git-pull[]
	在linkgit:git-fetch[1]的`<引用规范>`部分。
	文档中。
endif::git-pull[]
ifndef::git-pull[]
	在下面的 `<引用规范>` 部分。
endif::git-pull[]
	这个选项覆盖了这个检查。

-k::
--keep::
	保存下载的包。

ifndef::git-pull[]
--multiple::
	允许指定几个 <仓库> 和 <group> 参数。不可以指定 <引用规范>。

--[no-]auto-maintenance::
--[no-]auto-gc::
	在最后运行 `git maintenance run --auto`，以在需要时执行自动仓库维护。（与 "--[no-]auto-gc" 选项效果一样。）这个功能默认启用。

--[no-]write-commit-graph::
	在获取后写一个提交图。这会覆盖 `fetch.writeCommitGraph` 配置选项。
endif::git-pull[]

--prefetch::
	修改配置的引用规范，将所有引用放到 `refs/prefetch/` 命名空间中。参见 linkgit:git-maintenance[1] 中的 `prefetch` 任务。

-p::
--prune::
	在获取之前，删除任何不再存在于远程的远程跟踪引用。 如果只是因为默认的标签自动跟踪或者因为 --tags 选项而获取标签，则不需要剪枝。 然而，如果标签是由于明确的引用规范（无论是在命令行还是在远程配置中，例如，如果远程是用 --mirror 选项克隆的）而被获取的，那么它们也会被剪除。提供 `--prune-tags` 是提供标签引用规范的速记方法。
ifndef::git-pull[]
+
更多细节见下面的 剪枝 部分。

-P::
--prune-tags::
	在获取之前，如果 `--prune` 被启用，则删除任何不再存在于远程的本地标签。这个选项应该更谨慎使用，与`--prune`不同，它将删除任何已经创建的本地引用（本地标签）。这个选项是与`--prune`一起提供明确的标签引用规范的速记形式，见其文档中关于这个的讨论。
+
更多细节见下面的 剪枝 部分。

endif::git-pull[]

ifndef::git-pull[]
-n::
endif::git-pull[]
--no-tags::
	默认情况下，指向从远程仓库下载的对象的标签会被获取并存储到本地。 这个选项禁用了这种自动标记跟踪。远程的默认行为可以通过 remote.<远程名称>.tagOpt 设置来指定。参见 linkgit:git-config[1]。

ifndef::git-pull[]
--refetch::
	这个选项不是与服务器协商以避免传输本地已经存在的提交和相关对象，而是像一个新的克隆那样获取所有对象。当过滤器定义发生变化时，使用此选项重新应用配置中的部分克隆过滤器或使用 `--filter=`。自动获取后的维护将执行对象数据库包的整合，以删除任何重复的对象。
endif::git-pull[]

--refmap=<引用规范>::
	当获取命令行上列出的引用时，使用指定的引用规范（可以是多个）来映射引用到远程跟踪分支，而不是远程仓库的 `remote.*.fetch` 配置变量的值。 为 `--refmap` 选项提供一个空的 `<引用规范>` 会导致Git忽略配置的引用规范，而完全依赖作为命令行参数提供的引用规范。详见 "配置的远程跟踪分支" 一节。

-t::
--tags::
	从远程获取所有标签（即，将远程标签 `refs/tags/*` 获取为同名的本地标签），除此之外，还可以获取其他东西。 单独使用这个选项，即使使用了 --prune，也不会对标签进行修剪（尽管标签是一个明确了无论如何也要删除的引用规范目标，见 `--prune` 选项）。

ifndef::git-pull[]
--recurse-submodules[=(yes|on-demand|no)]::
	这个选项控制是否以及在什么条件下，子模块的新提交也应该被获取。当遍历子模块时，`git fetch` 总是试图获取 "改变的" 子模块，也就是说，一个子模块的提交被新获取的父项目提交所引用，但在本地的子模块克隆中却没有。一个改变了的子模块可以被获取，只要它在本地存在，例如在`$GIT_DIR/modules/`（见linkgit:gitsubmodules[7]）；如果上游添加了一个新的子模块，该子模块不能被获取，直到它被克隆，例如通过`git submodule update`。
+
当设置为 'on-demand' 时，只取回已改变的子模块。当设置为 'yes' 时，所有已填充的子模块都被获取，同时未填充和已改变的子模块也被获取。当设置为 'no' 时，子模块永远不会被获取。
+
当未指定时，如果设置了 `fetch.recurseSubmodules`，则使用该值（见linkgit:git-config[1]），如果未设置则默认为 'on-demand'。 当这个选项被使用而没有任何值时，它默认为 'yes'。
endif::git-pull[]

-j::
--jobs=<n>::
	用于所有形式的获取的并行子进程的数量。
+
如果指定了 `--multiple` 选项，不同的远程将被并行获取。如果多个子模块被取走，它们将并行获取。要独立控制它们，使用配置 `fetch.parallel` 和 `submodule.fetchJobs`（见linkgit:git-config[1]）。
+
通常情况下，并行的递归和多远程的提取会更快。默认情况下，检索是按顺序进行的，而不是并行的。

ifndef::git-pull[]
--no-recurse-submodules::
	禁用子模块的递归获取（这与使用 `--recurse-submodules=no` 选项的效果相同）。
endif::git-pull[]

--set-upstream::
	如果远程被成功获取，添加上游（跟踪）引用，由无参数的 linkgit:git-pull[1] 和其他命令使用。更多信息，见 linkgit:git-config[1] 中的 `branch.<名称>.merge` 和 `branch.<名称>.remote`。

ifndef::git-pull[]
--submodule-prefix=<路径>::
	将 <路径> 添加到信息性消息中打印的路径，例如“获取子模块 foo”。递归子模块时在内部使用此选项。

--recurse-submodules-default=[yes|on-demand]::
	这个选项在内部被用来为 --recurse-submodules 选项暂时提供一个非负的默认值。 所有其他配置获取子模块递归的方法（比如 linkgit:gitmodules[5] 和 linkgit:git-config[1] 中的设置）都覆盖这个选项，直接指定 --[no-]recurse-submodules 也是如此。

-u::
--update-head-ok::
	默认情况下，"git fetch" 拒绝更新与当前分支相对应的头部。 这个标志禁用了这种检查。 这纯粹是为了让 'git pull' 与 'git fetch' 沟通的内部使用，除非你正在实现你自己的上层命令，否则你不应该使用它。
endif::git-pull[]

--upload-pack <upload-pack>::
	当给出时，并且要获取的仓库是由 'git fetch-pack' 处理的，`--exec=<upload-pack>` 被传递到命令中，为另一端运行的命令指定非默认路径。

ifndef::git-pull[]
-q::
--quiet::
	将 --quiet 传递给 git-fetch-pack，并使任何其他内部使用的 git 命令保持沉默。进度不会报告给标准错误流。

-v::
--verbose::
	详细日志。
endif::git-pull[]

--progress::
	当标准错误流连接到终端时，除非指定了 -q，否则默认情况下会在标准错误流上报告进展状态。即使标准错误流没有指向终端，这个标志也会强制显示进度状态。

-o <选项>::
--server-option=<选项>::
	使用协议版本2进行通信时，将给定的字符串传输到服务器。给定的字符串不得包含NUL或LF字符。服务器对服务器选项（包括未知选项）的处理是取决于服务器。当给出多个`--server-option=<option>`时，它们都按照命令行中列出的顺序发送到另一端。

--show-forced-updates::
	默认情况下，git 在获取过程中会检查一个分支是否被强制更新了。这可以通过 fetch.showForcedUpdates 禁用，但 --show-forced-updates 选项保证了这种检查的发生。 参见 linkgit:git-config[1]。

--no-show-forced-updates::
	默认情况下，git 会在获取过程中检查一个分支是否被强制更新了。通过 --no-show-forced-updates 或将 fetch.showForcedUpdates 设置为 false 来跳过这个检查，以保证性能。如果在 'git-pull' 中使用 --ff-only 选项，在尝试快速更新前仍会检查强制更新。见 linkgit:git-config[1]。

-4::
--ipv4::
	仅使用 IPv4 地址，忽略 IPv6 地址。

-6::
--ipv6::
	仅使用 IPv6 地址，忽略 IPv4 地址。
