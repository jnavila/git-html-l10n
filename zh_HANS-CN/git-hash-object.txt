git-hash-object(1)
==================

名称
--
git-hash-object - 计算对象 ID 并选择性地从文件创建对象


概述
--
[verse]
'git hash-object' [-t <类型>] [-w] [--path=<文件> | --no-filters]
		[--stdin [--literally]] [--] <文件>...
'git hash-object' [-t <类型>] [-w] --stdin-paths [--no-filters]

描述
--
Computes the object ID value for an object with specified type with the contents of the named file (which can be outside of the work tree), and optionally writes the resulting object into the object database. Reports its object ID to its standard output. When <type> is not specified, it defaults to "blob".

选项
--

-t <类型>::
	指定要创建的对象类型（默认："blob"）。可能的值有：`commit` 、 `tree` 、 `blob` 和 `tag`。

-w::
	将对象实际写入对象数据库。

--stdin::
	从标准输入而不是文件中读取对象。

--stdin-paths::
	从标准输入端读取文件名，每行一个，而不是从命令行读取。

--path::
	Hash object as if it were located at the given path. The location of the file does not directly influence the hash value, but the path is used to determine which Git filters should be applied to the object before it can be placed in the object database. As a result of applying filters, the actual blob put into the object database may differ from the given file. This option is mainly useful for hashing temporary files located outside of the working directory or files read from stdin.

--no-filters::
	按原样散列文件内容，忽略属性机制选择的任何输入过滤器，包括行尾转换。如果文件是从标准输入读取的，那么除非给出了 `--path` 选项，否则这总是隐含的。

--literally::
	允许 `--stdin` 将任何垃圾散列到一个松散的对象中，否则该对象可能无法通过标准对象解析或 git-fsck 检查。这对于 Git 本身的压力测试或重现野外遇到的损坏或假对象的特征非常有用。

GIT
---
属于 linkgit:git[1] 文档
