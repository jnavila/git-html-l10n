git-checkout(1)
===============

名称
--
git-checkout - 切换分支或恢复工作目录树文件

概述
--
[verse]
'git checkout' [-q] [-f] [-m] [<分支>]
'git checkout' [-q] [-f] [-m] --detach [<分支>]
'git checkout' [-q] [-f] [-m] [--detach] <提交>
'git checkout' [-q] [-f] [-m] [[-b|-B|--orphan] <新分支>] [<起始点>]
'git checkout' [-f] <目录树对象> [--] <路径规范>...
'git checkout' [-f] <目录树对象> --pathspec-from-file=<文件> [--pathspec-file-nul]
'git checkout' [-f|--ours|--theirs|-m|--conflict=<样式>] [--] <路径规范>...
'git checkout' [-f|--ours|--theirs|-m|--conflict=<样式>] --pathspec-from-file=<文件> [--pathspec-file-nul]
'git checkout' (-p|--patch) [<目录树对象>] [--] [<路径规范>...]

描述
--
Updates files in the working tree to match the version in the index or the specified tree. If no pathspec was given, 'git checkout' will also update `HEAD` to set the specified branch as the current branch.

'git checkout' [<分支>]::
	要准备在`<分支>`上工作，需要更新索引和工作区中的文件，以及将`HEAD`指向该分支来切换到该分支。对工作区中文件的本地修改会被保留，以便修改可以被提交到`<分支>`。
+
如果没有找到该`<分支>`，但正好一个远程（称其为`<远程仓库>`）中确实存在一个名称相匹配的已跟踪分支，并且没有指定`--no-guess`，则视为等同于
+
------------
$ git checkout -b <分支> --track <远程仓库>/<分支>
------------
+
你可以省略 `<分支>`，在这种情况下，该命令会退化为 “检出当前分支”，这是一个美化的无操作，具有非常大的副作用，如果存在当前分支的话，只显示当前分支的跟踪信息。

'git checkout' -b|-B <新分支> [<起始点>]::

	Specifying `-b` causes a new branch to be created as if linkgit:git-branch[1] were called and then checked out. In this case you can use the `--track` or `--no-track` options, which will be passed to 'git branch'. As a convenience, `--track` without `-b` implies branch creation; see the description of `--track` below.
+
如果给定了`-B'，如果不存在`<新分支>`，就会创建；否则，就会重置。这在事务上等同于
+
------------
$ git branch -f <分支> [<起始点>]
$ git checkout <分支>
------------
+
that is to say, the branch is not reset/created unless "git checkout" is successful (e.g., when the branch is in use in another worktree, not just the current branch stays the same, but the branch is not reset to the start-point, either).

'git checkout' --detach [<分支>]::
'git checkout' [--detach] <提交>::

	Prepare to work on top of `<commit>`, by detaching `HEAD` at it (see "DETACHED HEAD" section), and updating the index and the files in the working tree. Local modifications to the files in the working tree are kept, so that the resulting working tree will be the state recorded in the commit plus the local modifications.
+
当`<提交>`参数是一个分支名称时，`--detach`选项可以用来分离分支顶端的`HEAD`（`git checkout <分支>`会签出该分支而不分离`HEAD`）。
+
省略`<分支>`会在当前分支的顶端分离`HEAD`。

'git checkout' [-f|--ours|--theirs|-m|--conflict=<样式>] [<目录树对象>] [--] <路径规范>...::
'git checkout' [-f|--ours|--theirs|-m|--conflict=<样式>] [<树状对象>] --pathspec-from-file=<文件> [--pathspec-file-nul]::

	Overwrite the contents of the files that match the pathspec. When the `<tree-ish>` (most often a commit) is not given, overwrite working tree with the contents in the index. When the `<tree-ish>` is given, overwrite both the index and the working tree with the contents at the `<tree-ish>`.
+
The index may contain unmerged entries because of a previous failed merge. By default, if you try to check out such an entry from the index, the checkout operation will fail and nothing will be checked out. Using `-f` will ignore these unmerged entries. The contents from a specific side of the merge can be checked out of the index by using `--ours` or `--theirs`. With `-m`, changes made to the working tree file can be discarded to re-create the original conflicted merge result.

'git checkout' (-p|--patch) [<树状对象>] [--] [<路径规范>...]::
	This is similar to the previous mode, but lets you use the interactive interface to show the "diff" output and choose which hunks to use in the result. See below for the description of `--patch` option.

选项
--
-q::
--quiet::
	静默，压制反馈信息。

--progress::
--no-progress::
	当它附加到终端时，除非指定 `--quiet`，否则默认情况下会在标准错误流中报告进度状态。这个标志可以启用进度报告，即使没有附在到终端，而不管 `--quiet`。

-f::
--force::
	When switching branches, proceed even if the index or the working tree differs from `HEAD`, and even if there are untracked files in the way. This is used to throw away local changes and any untracked files or directories that are in the way.
+
当从索引中检查出路径时，不将未合并条目视为失败；相反，忽略未合并条目。

--ours::
--theirs::
	当从索引中检查出路径时，要检查第二阶段（'ours'）或第三阶段（'theirs'）的未合并路径。
+
注意在 "git rebase "和 "git pull --rebase "过程中，"ours"和 "theirs"可能会互换；"--ours "给出了分支变基后的版本，而"--theirs"则给出你即将变基的分支版本。
+
This is because `rebase` is used in a workflow that treats the history at the remote as the shared canonical one, and treats the work done on the branch you are rebasing as the third-party work to be integrated, and you are temporarily assuming the role of the keeper of the canonical history during the rebase. As the keeper of the canonical history, you need to view the history from the remote as `ours` (i.e. "our shared canonical history"), while what you did on your side branch as `theirs` (i.e. "one contributor's work on top of it").

-b <新分支>::
	创建一个名为"<新分支>"的新分支，从"<起点>"开始，并检出产生的分支；详情见 linkgit:git-branch[1]。

-B <新分支>::
	Creates the branch `<new-branch>`, start it at `<start-point>`; if it already exists, then reset it to `<start-point>`. And then check the resulting branch out. This is equivalent to running "git branch" with "-f" followed by "git checkout" of that branch; see linkgit:git-branch[1] for details.

-t::
--track[=(direct|inherit)]::
	创建新分支时，要设置 "上游"配置。详情见 linkgit:git-branch[1] 中的 "--track"。
+
If no `-b` option is given, the name of the new branch will be derived from the remote-tracking branch, by looking at the local part of the refspec configured for the corresponding remote, and then stripping the initial part up to the "*". This would tell us to use `hack` as the local branch when branching off of `origin/hack` (or `remotes/origin/hack`, or even `refs/remotes/origin/hack`). If the given name has no slash, or the above guessing results in an empty name, the guessing is aborted. You can explicitly give a name with `-b` in such a case.

--no-track::
	不设置 "上游 "配置，即使`branch.autoSetupMerge`配置变量为true。

--guess::
--no-guess::
	如果没有找到`<分支>`，但确实有一个远程分支（称为`<远程分支>`）的跟踪分支存在，且名称匹配，则视为等同于
+
------------
$ git checkout -b <分支> --track <远程仓库>/<分支>
------------
+
如果该分支存在于多个远程，并且其中一个是由`checkout.defaultRemote`配置变量命名的，为了消除歧义，我们将使用该变量，即使`<分支>`在所有远程中并不唯一。将其设置为例如 `checkout.defaultRemote=origin`，以便在`<分支>`不明确但存在于'origin'远程时，总是从那里签出远程分支。参见 linkgit:git-config[1] 中的 `checkout.defaultRemote`。
+
`--guess`是默认行为。使用`--no-guess`来禁用它。
+
默认行为可以通过`checkout.guess`配置变量设置。

-l::
	创建新分支的引用日志；详见 linkgit:git-branch[1]。

-d::
--detach::
	Rather than checking out a branch to work on it, check out a commit for inspection and discardable experiments. This is the default behavior of `git checkout <commit>` when `<commit>` is not a branch name. See the "DETACHED HEAD" section below for details.

--orphan <新分支>::
	Create a new unborn branch, named `<new-branch>`, started from `<start-point>` and switch to it. The first commit made on this new branch will have no parents and it will be the root of a new history totally disconnected from all the other branches and commits.
+
The index and the working tree are adjusted as if you had previously run `git checkout <start-point>`. This allows you to start a new history that records a set of paths similar to `<start-point>` by easily running `git commit -a` to make the root commit.
+
当你想发布一个提交树而不暴露其完整的历史时，这就很有用。你可能想这样做来发布一个项目的开源分支，这个分支的当前树是 "干净的"，但其完整的历史包含了专有的或其他一些代码。
+
If you want to start a disconnected history that records a set of paths that is totally different from the one of `<start-point>`, then you should clear the index and the working tree right after creating the orphan branch by running `git rm -rf .` from the top level of the working tree. Afterwards you will be ready to prepare your new files, repopulating the working tree, by copying them from elsewhere, extracting a tarball, etc.

--ignore-skip-worktree-bits::
	在稀疏签出模式下，`git checkout -- <路径>`将只更新由`<路径>`和`$GIT_DIR/info/sparse-checkout`中的稀疏模式匹配的条目。这个选项忽略了稀疏模式，并添加回`<路径>`中的任何文件。

-m::
--merge::
	When switching branches, if you have local modifications to one or more files that are different between the current branch and the branch to which you are switching, the command refuses to switch branches in order to preserve your modifications in context. However, with this option, a three-way merge between the current branch, your working tree contents, and the new branch is done, and you will be on the new branch.
+
当合并冲突发生时，冲突路径的索引条目会被留下，你需要解决冲突，并用`git add`标记已解决的路径（如果合并应导致删除路径，则用`git rm`）。
+
When checking out paths from the index, this option lets you recreate the conflicted merge in the specified paths. This option cannot be used when checking out paths from a tree-ish.
+
当用`--merge`切换分支时，可能会丢失阶段性修改。

--conflict=<样式>::
	The same as `--merge` option above, but changes the way the conflicting hunks are presented, overriding the `merge.conflictStyle` configuration variable. Possible values are "merge" (default), "diff3", and "zdiff3".

-p::
--patch::
	Interactively select hunks in the difference between the `<tree-ish>` (or the index, if unspecified) and the working tree. The chosen hunks are then applied in reverse to the working tree (and if a `<tree-ish>` was specified, the index).
+
这意味着你可以使用 `git checkout -p` 来有选择地丢弃当前工作区上的编辑内容。参见 linkgit:git-add[1] 的 "互动模式''部分，了解`--patch`模式如何操作。
+
注意，这个选项默认使用无覆盖模式（另见`--overlay`），目前不支持覆盖模式。

--ignore-other-worktrees::
	`git checkout`在想要的引用已经被另一个工作区签出时拒绝。这个选项让它无论如何都要签出这个引用。换句话说，这个引用可能被多个工作区持有。

--overwrite-ignore::
--no-overwrite-ignore::
	在切换分支时静默地覆盖被忽略的文件。这是默认行为。使用 `--no-overwrite-ignore` 可以在新的分支包含被忽略的文件时中止操作。

--recurse-submodules::
--no-recurse-submodules::
	Using `--recurse-submodules` will update the content of all active submodules according to the commit recorded in the superproject. If local modifications in a submodule would be overwritten the checkout will fail unless `-f` is used. If nothing (or `--no-recurse-submodules`) is used, submodules working trees will not be updated. Just like linkgit:git-submodule[1], this will detach `HEAD` of the submodule.

--overlay::
--no-overlay::
	In the default overlay mode, `git checkout` never removes files from the index or the working tree. When specifying `--no-overlay`, files that appear in the index and working tree, but not in `<tree-ish>` are removed, to make them match `<tree-ish>` exactly.

--pathspec-from-file=<file>::
	Pathspec在 `<文件>` 中传递，而不是在命令行参数中传递。如果 `<文件>` 正好是 `-`，则使用标准输入。路径规范元素由 LF 或 CR/LF 分隔。可以引用配置变量 `core.quotePath` 的路径规范元素（请参见 linkgit:git-config[1]）。另请参见 `--pathspec-file-nul` 和全局 `--literal-pathspecs`。

--pathspec-file-nul::
	只有在使用 `--pathspec-from-file` 选项时才有意义。指定路径元素用 NUL 字符分隔，所有其他字符都按字面意思（包括换行符和引号）表示。

<分支>::
	签出的分支；如果它指的是一个分支（即一个名字，在前面加上 "refs/heads/"时，是一个有效的 引用），那么这个分支就被签出。否则，如果它指的是一个有效的提交，你的`HEAD`就会"分离"，此时，你就不再在任何一个分支上了（详见下文）。
+
你可以使用`@{-N}`语法来指代使用 "git checkout "操作检查出来的第N个最后的分支或是提交。你也可以指定`-`，它与`@{-1}`同义。
+
作为一种特殊情况，如果正好有一个合并基础，你可以使用`A...B`作为`A`和`B`的合并基础的快捷方式。你最多可以省略在`A`和`B`中默认为`HEAD`的一个分支。

<新分支>::
	新分支的名称。

<start-point>::
	启动新分支的提交名称；详见 linkgit:git-branch[1]。默认为 `HEAD`。
+
作为一种特殊情况，如果正好有一个合并基数，你可以使用`"A...B "作为`A`和`B`的合并基数的快捷方式。你最多可以漏掉`A`和`B`中的一个，在这种情况下，它默认为`HEAD`。

<tree-ish>::
	签出的树（当路径给定时）。如果没有指定，将使用索引。
+
作为一种特殊情况，如果正好有一个合并基数，你可以使用`"A...B "作为`A`和`B`的合并基数的快捷方式。你最多可以漏掉`A`和`B`中的一个，在这种情况下，它默认为`HEAD`。

\--::
	不将之后的参数解释为选项。

<pathspec>...::
	限制受操作影响的路径。
+
更多细节请参见 linkgit:gitglossary[7] 中的 '路径规范' 条目。

游离状态（DETACHED HEAD）
-------------------
`HEAD`通常指的是一个分支的引用（例如`master`）。同时，每个分支指的是一个特定的提交。让我们看看一个有三个提交的仓库，其中一个被标记了，并且分支`master`被检出：

------------
           HEAD（'master'分支的引用）
            |
            v
a---b---c  branch 'master'（'c' 提交的引用）
    ^
    |
  tag 'v2.0' （'b' 提交的引用）
------------

当在这种状态下创建一个提交时，分支会被更新以引用新的提交。具体来说，'git commit'创建了一个新的提交`d`，其父级是提交`c`，然后更新分支`master`以引用新的提交`d`。`HEAD'仍指向`master'，所以现在间接地指向提交`d`：

------------
$ edit; git add; git commit

               HEAD （指向'master'分支）
                |
                v
a---b---c---d  分支'master' （指向提交'd'）
    ^
    |
  tag 'v2.0' (指向提交'b')
------------

有时能够签出一个不在任何命名分支顶端的提交，甚至创建一个不被命名分支引用的新提交，是很有用的。让我们来看看当我们签出提交 `b`时会发生什么（这里我们展示了两种方法）：

------------
$ git checkout v2.0  # 或
$ git checkout master^^

   HEAD （指向提交'b'）
    |
    v
a---b---c---d  分支'master'（指向提交'd'）
    ^
    |
  tag 'v2.0' (指向提交'b')
------------

Notice that regardless of which checkout command we use, `HEAD` now refers directly to commit `b`. This is known as being in detached `HEAD` state. It means simply that `HEAD` refers to a specific commit, as opposed to referring to a named branch. Let's see what happens when we create a commit:

------------
$ edit; git add; git commit

     HEAD （指向提交'e'）
      |
      v
      e
     /
a---b---c---d  branch 'master' （指向提交'd'）
    ^
    |
  tag 'v2.0' （指向提交'b'）
------------

现在有一个新的提交`e`，但它只被`HEAD`所引用。当然，我们可以在这个状态下再增加一个提交：

------------
$ edit; git add; git commit

	 HEAD（指向提交'f'）。
	  |
	  v
      e---f
     /
a---b---c---d 分支"master"（指向提交'd'）。
    ^
    |
  tag 'v2.0'（指向提交'b'）。
------------

事实上，我们可以执行所有正常的 Git 操作。但是，让我们看看当我们签出`master`时会发生什么：

------------
$ git checkout master

               HEAD（指向分支 'master'）
      e---f     |
     /          v
a---b---c---d  branch 'master' （指向提交 'd'）
    ^
    |
  tag 'v2.0' (指向提交 'b')
------------

重要的是要意识到，在这一点上，没有任何引用是指向提交`f`的。最终，提交 `f`（以及提交 `e`）会被 Git 的例行垃圾回收程序删除，除非我们在这之前创建一个引用。如果我们还没有离开提交 `f`，以下任何一个操作都会创建一个对它的引用：

------------
$ git checkout -b foo   <1>
$ git branch foo        <2>
$ git tag foo           <3>
------------
<1> 创建一个新的分支`foo`，指向提交`f`，然后更新`HEAD`，指向分支`foo`。换句话说，这条命令之后，我们将不再处于分离的`HEAD`状态。
<2> 类似的，创建一个新的分支`foo`，它指向提交`f`，但将`HEAD`分离出来。
<3> 创建一个新的标签`foo`，指向提交`f`，让`HEAD`处于分离状态。

如果我们已经离开了`f'的提交，那么我们必须首先恢复它的对象名称（通常使用git reflog），然后我们可以创建一个对它的引用。例如，要查看`HEAD`指向的最后两个提交，我们可以使用以下任一命令：

------------
$ git reflog -2 HEAD # 或
$ git log -g -2 HEAD
------------

参数消歧义
-----

When there is only one argument given and it is not `--` (e.g. `git checkout abc`), and when the argument is both a valid `<tree-ish>` (e.g. a branch `abc` exists) and a valid `<pathspec>` (e.g. a file or a directory whose name is "abc" exists), Git would usually ask you to disambiguate. Because checking out a branch is so common an operation, however, `git checkout abc` takes "abc" as a `<tree-ish>` in such a situation. Use `git checkout -- <pathspec>` if you want to checkout these paths out of the index.

实例
--

=== 1.路径

下面的序列检查了 "master "分支，将 "Makefile "恢复到两个修订版，错误地删除了 "hello.c"，并从索引中取回它。

------------
$ git checkout master             <1>
$ git checkout master~2 Makefile  <2>
$ rm -f hello.c
$ git checkout hello.c            <3>
------------
<1> 选择分支
<2> 将一个文件从另一个提交中取出
<3> 从索引中恢复`hello.c`

如果你想从索引中检出_所有_的C源文件，你可以这样

------------
$ git checkout -- '*.c'
------------

Note the quotes around `*.c`. The file `hello.c` will also be checked out, even though it is no longer in the working tree, because the file globbing is used to match entries in the index (not in the working tree by the shell).

If you have an unfortunate branch that is named `hello.c`, this step would be confused as an instruction to switch to that branch. You should instead write:

------------
$ git checkout -- hello.c
------------

=== 2. Merge

在错误的分支工作后，切换到正确的分支将使用：

------------
$ git checkout mytopic
------------

然而，你的 "错误"分支和正确的`mytopic`分支可能在你本地修改的文件中存在差异，在这种情况下，上述检出会失败，像这样：

------------
$ git checkout mytopic
错误：您对 'footz' 有本地更改；未切换分支。
------------

你可以给命令加上 `-m`标志，这样就可以尝试三方合并了：

------------
$ git checkout -m mytopic
自动合并 frotz 分支
------------

在这个三方合并之后，本地的修改并「没有」登记在你的索引文件中，所以`git diff`会显示你在新分支的提示下做了哪些修改。

=== 3. Merge 冲突

当使用`-m`选项切换分支时发生合并冲突，你会看到类似这样的情况：

------------
$ git checkout -m mytopic
自动合并 frotz 分支
错误：对 frotz 分支的合并冲突
失败：merge 程序终止
------------

At this point, `git diff` shows the changes cleanly merged as in the previous example, as well as the changes in the conflicted files. Edit and resolve the conflict and mark it resolved with `git add` as usual:

------------
$ 编辑 frotz
$ git add frotz
------------

配置
--

include::includes/cmd-config-section-all.txt[]

include::config/checkout.txt[]

参见
--
linkgit:git-switch[1], linkgit:git-restore[1]

GIT
---
属于 linkgit:git[1] 文档
