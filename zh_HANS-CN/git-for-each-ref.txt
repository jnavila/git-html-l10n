git-for-each-ref(1)
===================

名称
--
git-for-each-ref - 输出每个引用的信息

概述
--
[verse]
'git for-each-ref' [--count=<数量>] [--shell|--perl|--python|--tcl]
		   [(--sort=<键>)...] [--format=<格式>]
		   [ --stdin | <模式>... ]
		   [--points-at=<对象>]
		   [--merged[=<对象>]] [--no-merged[=<对象>]]
		   [--contains[=<对象>]] [--no-contains[=<对象>]]
		   [--exclude=<模式> ...]

描述
--

Iterate over all refs that match `<pattern>` and show them according to the given `<format>`, after sorting them according to the given set of `<key>`. If `<count>` is given, stop after showing that many refs. The interpolated values in `<format>` can optionally be quoted as string literals in the specified host language allowing their direct evaluation in that language.

选项
--
<模式>...::
	如果给出一个或多个模式，则只显示至少与一个模式匹配的 refs，匹配方式可以是使用 fnmatch(3) 或字面匹配，在后一种情况下，完全匹配或从头匹配到斜线。

--stdin::
	如果提供了 `--stdin`，则会从标准输入而不是参数列表中读取模式列表。

--count=<数量>::
	By default the command shows all refs that match `<pattern>`. This option makes it stop after showing that many refs.

--sort=<键>::
	A field name to sort on. Prefix `-` to sort in descending order of the value. When unspecified, `refname` is used. You may use the --sort=<key> option multiple times, in which case the last key becomes the primary key.

--format=<格式>::
	A string that interpolates `%(fieldname)` from a ref being shown and the object it points at. In addition, the string literal `%%` renders as `%` and `%xx` - where `xx` are hex digits - renders as the character with hex code `xx`. For example, `%00` interpolates to `\0` (NUL), `%09` to `\t` (TAB), and `%0a` to `\n` (LF).
+
When unspecified, `<format>` defaults to `%(objectname) SPC %(objecttype) TAB %(refname)`.

--color[=<when>]::
	尊重`--format`选项中指定的任何颜色。`<什么时候>`字段必须是`always`、`never`或`auto`之一（如果没有`<什么时候>`，则表现为`always`）。

--shell::
--perl::
--python::
--tcl::
	If given, strings that substitute `%(fieldname)` placeholders are quoted as string literals suitable for the specified host language. This is meant to produce a scriptlet that can directly be `eval`ed.

--points-at=<对象>::
	只列出指向给定对象的引用。

--merged[=<对象>]::
	仅列出提示可从指定提交（如未指定，则为 HEAD）到达的引用。

--no-merged[=<对象>]::
	仅列出提示无法从指定提交（如未指定，则为 HEAD）到达的引用。

--contains[=<对象>]::
	仅列出包含指定提交（如未指定，则为 HEAD）的引用。

--no-contains[=<对象>]::
	仅列出不包含指定提交的引用（如未指定，则为 HEAD）。

--ignore-case::
	排序和筛选引用不区分大小写。

--omit-empty::
	在格式化的引用后不打印换行，因为格式化的引用会扩展为空字符串。

--exclude=<模式>::
	如果给出一个或多个模式，则只显示不匹配任何排除模式的参考文件。匹配规则与上文的 `<模式>` 相同。

字段名
---

引用对象中结构化字段的各种值可用于插值到输出结果中，或用作排序键。

所有对象都可以使用以下名称：

引用名::
	The name of the ref (the part after $GIT_DIR/). For a non-ambiguous short name of the ref append `:short`. The option core.warnAmbiguousRefs is used to select the strict abbreviation mode. If `lstrip=<N>` (`rstrip=<N>`) is appended, strips `<N>` slash-separated path components from the front (back) of the refname (e.g. `%(refname:lstrip=2)` turns `refs/tags/foo` into `foo` and `%(refname:rstrip=2)` turns `refs/tags/foo` into `refs`). If `<N>` is a negative number, strip as many path components as necessary from the specified end to leave `-<N>` path components (e.g. `%(refname:lstrip=-2)` turns `refs/tags/foo` into `tags/foo` and `%(refname:rstrip=-1)` turns `refs/tags/foo` into `refs`). When the ref does not have enough components, the result becomes an empty string if stripping with positive <N>, or it becomes the full refname if stripping with negative <N>. Neither is an error.
+
`strip` 可作为 `lstrip` 的同义词使用。

objecttype::
	对象的类型（ `blob` ， `tree` ， `commit` ， `tag` ）。

objectsize::
	The size of the object (the same as 'git cat-file -s' reports). Append `:disk` to get the size, in bytes, that the object takes up on disk. See the note about on-disk sizes in the `CAVEATS` section below.
objectname::
	The object name (aka SHA-1). For a non-ambiguous abbreviation of the object name append `:short`. For an abbreviation of the object name with desired length append `:short=<length>`, where the minimum length is MINIMUM_ABBREV. The length may be exceeded to ensure unique object names.
deltabase::
	This expands to the object name of the delta base for the given object, if it is stored as a delta. Otherwise it expands to the null object name (all zeroes).

上有仓库::
	The name of a local ref which can be considered ``upstream'' from the displayed ref. Respects `:short`, `:lstrip` and `:rstrip` in the same way as `refname` above. Additionally respects `:track` to show "[ahead N, behind M]" and `:trackshort` to show the terse version: ">" (ahead), "<" (behind), "<>" (ahead and behind), or "=" (in sync). `:track` also prints "[gone]" whenever unknown upstream ref is encountered. Append `:track,nobracket` to show tracking information without brackets (i.e "ahead N, behind M").
+
对于任何远程跟踪分支 `%(upstream)`，`%(upstream:remotename)` 和 `%(upstream:remoteref)`分别指远程的名称和被跟踪的远程引用名称。换句话说，远程跟踪分支可以通过使用引用规范 `%(upstream:remoteref):%(upstream)` 从 `%(upstream:remotename)` 抓取来明确地单独更新。
+
Has no effect if the ref does not have tracking information associated with it. All the options apart from `nobracket` are mutually exclusive, but if used together the last option is selected.

push::
	本地引用的名称，代表显示引用的 `@{push}`位置。与 `upstream` 相同，尊重 `:short`、`:lstrip`、`:rstrip`、`:track`、`:trackshort`、`:remotename` 和 `:remoteref`选项。如果没有配置 `@{push}` ref，则产生空字符串。

HEAD::
	如果 HEAD 与当前引用（已签出分支）匹配，则为 '*'，否则为 ''。

color::
	Change output color. Followed by `:<colorname>`, where color names are described under Values in the "CONFIGURATION FILE" section of linkgit:git-config[1]. For example, `%(color:bold red)`.

对齐::
	Left-, middle-, or right-align the content between %(align:...) and %(end). The "align:" is followed by `width=<width>` and `position=<position>` in any order separated by a comma, where the `<position>` is either left, right or middle, default being left and `<width>` is the total length of the content with alignment. For brevity, the "width=" and/or "position=" prefixes may be omitted, and bare <width> and <position> used instead. For instance, `%(align:<width>,<position>)`. If the contents length is more than the width then no alignment is performed. If used with `--quote` everything in between %(align:...) and %(end) is quoted, but if nested then only the topmost level performs quoting.

如果::
	Used as %(if)...%(then)...%(end) or %(if)...%(then)...%(else)...%(end). If there is an atom with value or string literal after the %(if) then everything after the %(then) is printed, else if the %(else) atom is used, then everything after %(else) is printed. We ignore space when evaluating the string before %(then), this is useful when we use the %(HEAD) atom which prints either "*" or " " and we want to apply the 'if' condition only on the 'HEAD' ref. Append ":equals=<string>" or ":notequals=<string>" to compare the value between the %(if:...) and %(then) atoms with the given string.

symref::
	所给符号引用指向的引用。如果不是符号引用，则不会打印任何内容。与上文的 `引用名` 相同，遵从 `:short`、`:lstrip` 和 `:rstrip` 选项。

signature::
	检查提交的 GPG 签名。

signature:grade::
	显示 "G" 代表一个好的（有效的）签名，"B" 代表一个坏的签名，"U" 代表一个有效性未知的好的签名，"X" 代表一个已经过期的好的签名，"Y" 代表一个由过期的钥匙制作的好的签名，"R" 代表一个由撤销的密钥制作的好的签名，"E" 如果不能检查签名（如缺少密钥），"N" 代表没有签名。

signature:signer::
	提交的 GPG 签名的签名者。

signature:key::
	提交的 GPG 签名密钥。

signature:fingerprint::
	提交的 GPG 签名指纹。

signature:primarykeyfingerprint::
	提交的 GPG 签名的主键指纹。

signature:trustlevel::
	提交的 GPG 签名的信任级别。可能的输出包括 `ultimate` ， `fully` ， `marginal` ， `never` 和 `undifined`。

工作目录树路径::
	如果引用在任何链接的工作树中签出，则该引用签出所在工作目录的绝对路径。否则为空字符串。

ahead-behind:<提交对象>::
	用空格分隔的两个整数，分别表示将输出引用与格式中指定的 `<提交对象>` 进行比较时，超前和滞后提交的次数。

describe[:options]::
	人类可读的名字，像 linkgit:git-describe[1]；空字符串表示不可描述的提交。 `describe` 字符串后面可以有冒号和零个或多个逗号分隔的选项。 当标签同时被添加或删除时，描述可能不一致。
+
--
tags=<布尔值>;;
	详细内容请参见 linkgit:git-describe[1] 中的相应选项。
abbrev=<数字>;;
	至少使用 <数字> 十六进制数字；详见 linkgit:git-describe[1] 中的相应选项。
match=<模式>;;
	只考虑与给定的 `glob(7)` 模式匹配的标签，不包括 "refs/tags/" 前缀；详见 linkgit:git-describe[1] 中的相应选项。
exclude=<模式>;;
	不考虑与给定的 `glob(7)` 模式（不包括 "refs/tags/" 前缀）匹配的标签；详情参见 linkgit:git-describe[1] 中的相应选项。
--

In addition to the above, for commit and tag objects, the header field names (`tree`, `parent`, `object`, `type`, and `tag`) can be used to specify the value in the header field. Fields `tree` and `parent` can also be used with modifier `:short` and `:short=<length>` just like `objectname`.

For commit and tag objects, the special `creatordate` and `creator` fields will correspond to the appropriate date or name-email-date tuple from the `committer` or `tagger` fields depending on the object type. These are intended for working on a mix of annotated and lightweight tags.

For tag objects, a `fieldname` prefixed with an asterisk (`*`) expands to the `fieldname` value of the peeled object, rather than that of the tag object itself.

Fields that have name-email-date tuple as its value (`author`, `committer`, and `tagger`) can be suffixed with `name`, `email`, and `date` to extract the named component. For email fields (`authoremail`, `committeremail` and `taggeremail`), `:trim` can be appended to get the email without angle brackets, and `:localpart` to get the part before the `@` symbol out of the trimmed email. In addition to these, the `:mailmap` option and the corresponding `:mailmap,trim` and `:mailmap,localpart` can be used (order does not matter) to get values of the name and email according to the .mailmap file or according to the file set in the mailmap.file or mailmap.blob configuration variable (see linkgit:gitmailmap[5]).

对象中的原始数据是 `raw`。

raw:size::
	对象的原始数据大小。

请注意，`--format=%(raw)` 不能与 `--python` ， `--shell` 和 `--tcl` 一起使用，因为这些语言的字符串变量类型可能不支持任意二进制数据。

提交或标记对象中的信息是 `contents`，从中可使用 `contents:<部分>` 提取不同部分：

contents:size::
	提交或标记信息的大小（字节）。

contents:subject::
	The first paragraph of the message, which typically is a single line, is taken as the "subject" of the commit or the tag message. Instead of `contents:subject`, field `subject` can also be used to obtain same results. `:sanitize` can be appended to `subject` for subject line suitable for filename.

contents:body::
	"subject" 后的其余提交内容或标记信息。

contents:signature::
	tag的可选GPG签名。

contents:lines=N::
	信息的前 `N` 行。

此外，linkgit:git-interpret-trailers[1] 中提到的的尾注可作为 `trailers[:options]` 获取（或使用历史别名 `contents:trailers[:options]`）。有关有效的 [:option] 值，请参阅 linkgit:git-log[1] 的 `trailers` 部分。

For sorting purposes, fields with numeric values sort in numeric order (`objectsize`, `authordate`, `committerdate`, `creatordate`, `taggerdate`). All other fields are used to sort in their byte-value order.

还有一个按版本排序的选项，可以通过使用字段名 `version:refname` 或其别名 `v:refname` 来实现。

In any case, a field name that refers to a field inapplicable to the object referred by the ref does not cause an error. It returns an empty string instead.

作为日期类型字段的一种特殊情况，您可以在日期格式名称后添加 `:` 来指定日期的格式（参见 linkgit:git-rev-list[1] 的 `--date` 选项的取值）。

Some atoms like %(align) and %(if) always require a matching %(end). We call them "opening atoms" and sometimes denote them as %($open).

当脚本语言的特定引用生效时，顶层起始原子和与其匹配的 %(end) 之间的所有内容都会根据起始原子的语义进行评估，只有其从顶层得到的结果才会被引用。


实例
--

An example directly producing formatted text. Show the most recent 3 tagged commits:

------------
#!/bin/sh

git for-each-ref --count=3 --sort='-*authordate' \
--format='From: %(*作者名) %(*作者邮箱)
Subject: %(*主题)
Date: %(*authordate)
Ref: %(*引用名)

%(*body)
' 'refs/tags'
------------


A simple example showing the use of shell eval on the output, demonstrating the use of --shell. List the prefixes of all heads:
------------
#!/bin/sh

git for-each-ref --shell --format="ref=%(refname)" refs/heads | \
while read entry
do
	eval "$entry"
	echo `dirname $ref`
done
------------


关于标签的报告更详细一些，表明格式可能是整个脚本：
------------
#!/bin/sh

fmt='
	r=%(引用名)
	t=%(*对象类型)
	T=${r#refs/tags/}

	o=%(*objectname)
	n=%(*authorname)
	e=%(*authoremail)
	s=%(*subject)
	d=%(*authordate)
	b=%(*body)

	kind=Tag
	if test "z$t" = z
	then
		# could be a lightweight tag
		t=%(对象类型)
		kind="Lightweight tag"
		o=%(对象名)
		n=%(作者名)
		e=%(作者邮箱)
		s=%(主题)
		d=%(authordate)
		b=%(主体)
	fi
	echo "$kind $T points at a $t object $o"
	if test "z$t" = zcommit
	then
		echo "The commit was authored by $n $e
at $d, and titled

    $s

其信息如下：
"
		echo "$b" | sed -e "s/^/    /"
		echo
	fi
'

eval=`git for-each-ref --shell --format="$fmt" \
	--sort='*对象类型' \
	--sort=-taggerdate \
	refs/tags`
eval "$eval"
------------


An example to show the usage of %(if)...%(then)...%(else)...%(end). This prefixes the current branch with a star.

------------
git for-each-ref --format="%(if)%(HEAD)%(then)* %(else)  %(end)%(refname:short)" refs/heads/
------------


An example to show the usage of %(if)...%(then)...%(end). This prints the authorname, if present.

------------
git for-each-ref --format="%(refname)%(if)%(authorname)%(then) Authored by: %(authorname)%(end)"
------------

注意事项
----

需要注意的是，磁盘上对象的大小会被准确地报告出来，但在得出哪些记录或对象造成了磁盘使用量的结论时应小心谨慎。打包的非 delta 对象的大小可能远大于与之相对的 delta 对象的大小，但选择哪个对象为基准对象，哪个对象为 delta 对象是任意的，在重新打包时可能会发生变化。

还请注意，对象数据库中可能存在一个对象的多个副本；在这种情况下，无法确定将报告哪个副本的大小或 delta 基数。

注释
--

include::ref-reachability-filters.txt[]

参见
--
linkgit:git-show-ref[1]

GIT
---
属于 linkgit:git[1] 文档
