漂亮的格式
-----

如果提交是一个合并，并且如果pretty-format不是 "oneline"、"email "或 "raw"，那么在 "Author: "一行之前会插入一个附加行。 这一行的开头是 "Merge:这一行以 "Merge: "开头，并打印出祖先提交的哈希值，用空格分隔。 请注意，如果你限制了你的历史视图，那么列出的提交不一定是*直接*父级提交的列表：例如，如果你只对与某个目录或文件有关的修改感兴趣。

有几种内置的格式，你可以通过将 pretty.<名称> 配置选项设置为另一种格式名称或 'format:' 字符串来定义额外的格式，如下所述（见 linkgit:git-config[1] ）。下面是内置格式的细节：

* 'oneline'

	  <哈希值> <标题行>
+
这个设计是为了尽可能的紧凑。

* 'short'

	  承诺<hash>
	  作者。<作者>的情况

	      <标题行>

* 'medium'

	  commit <哈希值>
	  Author: <作者>
	  Date:   <提交日期>

	      <标题行>

	      <完整的提交信息

* 'full'

	  承诺<hash>
	  作者。< Author>
	  承诺。<committer>（提交者）。

	      <标题行>

	      <完整的提交信息

* 'fuller'

	  commit <哈希值>
	  Author:     <作者>
	  AuthorDate: <作者提交日期>
	  Commit:     <提交者>
	  CommitDate: <提交者提交日期>

	       <标题行>

	       <完整的提交信息

* ‘引用’

	  <缩写哈希值>（<标题行>，<简短的作者日期>）
+
这种格式用于在提交信息中引用另一个提交，与`--pretty='format:%C(auto)%h (%s, %ad)'相同。 默认情况下，日期的格式为`--date=short`，除非明确指定其他`--date`选项。 与任何带有格式占位符的`format:`一样，其输出不受其他选项的影响，如`--decorate`和`--walk-reflogs`。

* 'email'

	  From <哈希> <日期>
	  From: <作者>
	  Date: <作者提交日期>
	  Subject: [PATCH] <标题行>

	  <完整的提交信息

* 'mboxrd'
+
和 "email "一样，但提交信息中以 "From "开头的行（前面有零个或多个">"）用">"引出，这样就不会被混淆为开始了一个新的提交。

* 'raw'
+
原始 "格式显示的是整个提交对象中存储的内容。 值得注意的是，无论是否使用了 --abbrev 或 --no-abbrev，哈希值都会被完整地显示出来，而'parent'信息会显示真正的父级提交，不会考虑移花接木或历史简化。注意，这种格式会影响提交的显示方式，但不会影响diff的显示方式，比如用`git log --raw`来显示。要获得原始差异格式的完整对象名称，请使用`--no-abbrev`。

* 'format:<格式字符串>'
+
'format:<格式字符串' 格式允许你指定要显示的信息。它的工作原理有点像 printf 格式，但有一个明显的例外，那就是换行符是 '%n' 而不是 '\n'。
+
例如，'format: "The author of %h was %an, %ar%nThe title was >>%s<<%n"' 会显示这样的内容：
+
-------
fe6e0ee的作者是Junio C Hamano, 23小时前
标题是 >>t4119: 测试传统diff输入的自动计算-p<n>。

-------
+
占位符是：

- 占位符，可扩展为一个字面字符：
'%n':: 换行
'%%':: 一个原始的'%'
'%x00':: '%x' 后跟两个十六进制数字，会被一个包含十六进制数字值的字节替换（在本文档的其余部分，我们称之为 “字面格式化代码”）。

- 影响后面占位符的格式化的占位符：
'%Cred':: 切换颜色为红色
'%Cgreen':: 切换颜色为绿色
'%Cblue':: 将颜色改为蓝色
'%Creset':: 重置颜色
'%C(...)':: 颜色规范，如linkgit:git-config[1]的 "配置文件 "部分中的数值描述。 默认情况下，只有在启用日志输出时才会显示颜色（通过 `color.diff`, `color.ui`, 或 `--color`, 如果我们要去终端，要尊重前者的`auto`设置）。`%C(auto,...)`被接受为默认的历史同义词（例如，`%C(auto,red)`）。指定`%C(always,...)`将显示颜色，即使没有启用颜色（尽管考虑使用`--color=always`来启用整个输出的颜色，包括这个格式和其他任何git可能的颜色）。 `auto`单独使用（即`%C(auto)`）将在下一个占位符上开启自动着色，直到再次切换颜色。
'%m':: 左（`<`）、右（`>`）或边界（`-`）标记
'%w([<w>[,<i1>[,<i2>]]])':: 开关包行，就像 linkgit:git-shortlog[1] 的 -w 选项。
'%<(<N>[,trunc|ltrunc|mtrunc])':: 使下一个占位符至少占用 N 列宽，必要时在右侧填充空格。 如果输出超过 N 列，可选择在左侧（ltrunc）`..ft`、中间（mtrunc）`mi..le` 或末尾（trunc）`rig..` 截断（用省略号 '..' ）。 注意 1：截断只在 N >= 2 时有效。 注 2：N 和 M（见下文）值周围的空格为可选项。 注 3：表情符号和其他宽字符将占用两个显示列，可能会超出列边界。 注 4：分解字符组合标记可能会在填充边界处错位。
'%<|(<M>)':: 使下一个占位符至少显示到第 M 列，必要时在右侧填充空格。 从终端窗口右侧边缘测量的列位置使用负 M 值。
'%>(<N>)', '%>|(<M>)':: 分别类似于 '%<( <N> )' 、'%<|( <M> )'，但在左侧填充空格
'%>>(<N>)', '%>>|(<M>)':: 分别类似于'%>(<N>)'、'%>|(<M>)'，只是如果下一个占位符占用的空间比给定的多，并且其左侧有空格，则使用这些空格
'%><(<N>)', '%><|(<M>)':: 分别类似于'%<( <N> )' 和 '%<|( <M> )'，但两边都有填充（即文本居中）

- 占位符，扩展到从提交中提取的信息：
'%H':: 提交的哈希值
'%h':: 简称提交哈希
'%T':: 目录树哈希值
'%t':: 简称树形哈希
'%P':: 父类哈希值
'%p':: 缩写的父母哈希值
'%an':: 作者名
'%aN':: 作者名（关于 .mailmap，请参见 linkgit:git-shortlog[1] 或 linkgit:git-blame[1]
'%ae':: 作者电子邮箱
'%aE':: 作者电子邮件（关于 .mailmap，请参见 linkgit:git-shortlog[1] 或 linkgit:git-blame[1]
'%al':: 作者电子邮件的本地部分（'@' 符号之前的部分）
'%aL':: 尊重 .mailmap 作者的本地部分（参见 '%al' ），参见 linkgit:git-shortlog[1] 或 linkgit:git-blame[1])
'%ad':: 作者日期（格式尊重--date=选项
'%aD':: 作者日期，RFC2822风格
'%ar':: 作者日期，相对
'%at':: 作者日期，UNIX时间戳
'%ai':: 作者日期，类似ISO 8601的格式
'%aI':: 作者日期，严格的ISO 8601格式
'%as':: 作者日期，短格式（ `YYYY-MM-DD` ）
'%ah':: 作者日期，以易读形式呈现（就像 linkgit:git-rev-list[1] 的 `--date=human` 选项）
'%cn':: 提交者名称
'%cN':: 提交者名称（尊重 .mailmap，参见 linkgit:git-shortlog[1] 或 linkgit:git-blame[1]
'%ce':: 提交者电子邮箱
'%cE':: 提交者电子邮箱（尊重 .mailmap，参见 linkgit:git-shortlog[1] 或 linkgit:git-blame[1]
'%cl':: 提交者电子邮件的本地部分（'@' 符号之前的部分）
'%cL':: 提交者本地部分（参见'%cl' ）尊重 .mailmap, 参见 linkgit:git-shortlog[1] 或 linkgit:git-blame[1])
'%cd':: 承诺人日期（格式尊重--date=选项
'%cD':: 承诺人日期，RFC2822风格
'%cr':: 承诺人日期，相对
'%ct':: 提交者日期，UNIX时间戳
'%ci':: 承诺人日期，类似ISO 8601的格式
'%cI':: 承诺人日期，严格的ISO 8601格式
'%cs':: 承诺人日期，短格式（ `YYYY-MM-DD` ）
'%ch':: 提交者的日期，人类风格（就像 linkgit:git-rev-list[1] 的 `--date=human` 选项）
'%d':: ref名称，就像linkgit:git-log[1]的--decorate选项。
'%D':: 没有"（"、"）"包装的参考文献名称。
'%(decorate[:<选项>])'::
自定义装饰的引用名称。`decorate` 字符串后面可以是冒号和零个或多个以逗号分隔的选项。选项值可能包含字面格式化代码。由于逗号（`%x2C`）和结尾括号（`%x29`）在选项语法中的作用，因此必须使用这些代码。
+
** 'prefix=<值>'： 显示在引用名称列表之前。 默认为 "{nbsp}`(`"。
** 'suffix=<值>'： 显示在引用名称列表之后。 默认为 "`)`"。
** 'separator=<值>'： 显示在引用名称之间。 默认为 "`,`{nbsp}"。
** 'point=<值>'： 显示在 HEAD 和其指向的分支（如果有）之间。
		      默认为 "{nbsp}`->`{nbsp}"。
** 'tag=<值>'： 显示在标记名称之前。默认为 "`tag:`{nbsp}"。

+
例如，制作不带包装或标签注释的装饰，并用空格作为分隔符：
+
`%(decorate:prefix=,suffix=,tag=,separator= )`

'%(describe[:<选项>])'::
人类可读的名字，像linkgit:git-describe[1]；空字符串表示不可描述的提交。 `describe`字符串后面可以有冒号和零个或多个逗号分隔的选项。 当标签同时被添加或删除时，描述可能不一致。
+
** 'tags[=<bool-value>]'：不仅考虑带注释的标签，还考虑轻量级标签。
** 'abbrev=<数量>'：不使用缩写对象名称的默认十六进制位数（根据仓库中对象的数量而变化，默认为 7 位），而是使用 <数量> 的位数，或根据需要的位数来组成唯一的对象名称。
** 'match=<pattern>':只考虑与给定的`glob(7)`模式匹配的标签，不包括 "refs/tags/"前缀。
** 'exclude=<pattern>':不考虑匹配给定`glob(7)`模式的标签，排除 "refs/tags/"前缀。

'%S':: 在命令行中给出的提交名称（如 `git log --source`），只对 `git log` 起作用
'%e':: 编码方式
'%s':: 主题
'%f':: 经过消毒的主题行，适合于文件名
'%b':: 正文
'%B':: 原始体（未包装的主题和体）
ifndef::git-rev-list[]
'%N':: 承诺说明
endif::git-rev-list[]
'%GG':: 来自GPG的签名提交的原始验证信息
'%G?':: 显示 "G" 代表一个好的（有效的）签名，"B" 代表一个坏的签名，"U" 代表一个有效性未知的好的签名，"X" 代表一个已经过期的好的签名，"Y" 代表一个由过期的钥匙制作的好的签名，"R" 代表一个由撤销的 钥匙制作的好的签名，"E" 如果不能检查签名（如缺少钥匙），"N" 代表没有签名
'%GS':: 显示已签名的提交的签名者的名字
'%GK':: 显示用于签署已签名的承诺的密钥
'%GF':: 显示用于签署已签名提交文件的密钥的指纹
'%GP':: 显示主键的指纹，该主键的子键被用来签署一个已签署的提交
'%GT':: 显示用于签署已签名的承诺的密钥的信任级别
'%gD':: reflog选择器，例如，`refs/stash@{1}`或`refs/stash@{2分钟前}`；其格式遵循`-g`选项的规则。`@'前面的部分是命令行上给出的参考文献名称（所以`git log -g refs/heads/master`会产生`refs/heads/master@{0}`）。
'%gd':: 简化的 reflog 选择器；与 `%gD` 相同，但 refname 部分被缩短以利于人类阅读（因此 `refs/heads/master` 变成了 `master`）。
'%gn':: 记录身份名称
'%gN':: 引用日志身份名称（尊重 .mailmap，参见 linkgit:git-shortlog[1] 或 linkgit:git-blame[1]
'%ge':: 重新记录身份邮件
'%gE':: 引用日志身份电子邮箱（尊重 .mailmap，参见 linkgit:git-shortlog[1] 或 linkgit:git-blame[1]
'%gs':: 记录主题
'%(trailers[:<选项>])'::
显示由 linkgit:git-interpret-trailers[1] 解释的正文的为主。`trailers` 字符串后面可以有冒号和零个或多个逗号分隔的选项。 如果任何选项被多次提供，则最后出现的选项获胜。
+
** 'key=<键>'：只显示具有指定密钥的为主。匹配是不分大小写的，后面的冒号是可选的。如果多次给出选项，则显示与任何键匹配的为主行。该选项自动启用 `only` 选项，使拖车块中的非尾注行被隐藏。如果不希望这样，可以用 `only=false` 禁用。 例如，`%(trailers:key=Reviewed-by)` 显示键为 `Reviewed-by` 的拖车行。
** 'only[=<布尔值>]' ：选择是否应该包括来自尾注块的非尾注行。
** 'separator=<切片>'：指定插入在尾注行之间的分隔符。如果不使用该选项，则每行以换行符结束。字符串 <切片> 可以包含上述字面格式化代码。要使用逗号作为分隔符，必须使用 `%x2C`，否则会被解析为下一个选项。例如，`%(trailer:key=Ticket,separator=%x2C )` 显示所有关键字为 "Ticket" 的尾注行，并用逗号和空格分隔。
** 'unfold[=<布尔值>]'：使它的行为就像 interpret-trailer 的 `--unfold` 选项被给出一样。例如，`%(trailers:only,unfold=true)`会展开并显示所有的尾注行。
** 'keyonly[=<布尔值>]'：只显示尾注的关键部分。
** 'valueonly[=<布尔值>]'：只显示尾注的值部分。
** 'key_value_separator=<切片>'：指定在尾注行之间插入一个分隔符。当这个选项没有给出时，每个尾注的键值对都用 ": " 分开。 否则，它的语义与上面的 'separator=<切片>' 相同。

NOTE: 一些占位符可能取决于给修订版遍历引擎的其他选项。例如，`%g*` reflog选项将插入一个空字符串，除非我们正在遍历reflog条目（例如，通过`git log -g`）。`%d`和`%D`占位符将使用 "短 "装饰格式，如果`--decorate`没有在命令行上提供。

布尔选项接受一个可选的值`[=<布尔值>]`。`true`, `false`, `on`, `off`等值都可以接受。参见linkgit:git-config[1]中 “示例” 的 “布尔” 子章节。如果一个布尔选项没有给出值，它就被启用。

如果你在占位符的'%'后面加了一个`+'（加号），当且仅当占位符扩展为一个非空字符串时，在扩展前会立即插入换行符。

如果你在占位符的'%'后面加了一个`-'（减号），如果且仅当占位符扩展为空字符串时，紧接着扩展前的所有连续换行将被删除。

如果你在占位符的'%'后面加了一个``（空格），当且仅当占位符扩展到一个非空字符串时，空格就会紧接着插入扩展。

* 't格式:'
+
'tformat:' 格式的工作原理与 'format:' 完全一样，只是它提供了 “终止符” 语义，而不是 “分隔符” 语义。换句话说，每个提交都附加了信息结束符（通常是换行符），而不是在条目之间放置一个分隔符。 这意味着单行格式的最后一个条目将正确地以新行结束，就像 “单行” 格式那样。 比如说：
+
---------------------
$ git log -2 --pretty=format:%h 4da45bef \
  | perl -pe '$_ .= " -- NO NEWLINE\n" unless /\n/'
4da45be
7134973 -- NO NEWLINE

$ git log -2 --pretty=tformat:%h 4da45bef \
  | perl -pe '$_ .= " -- NO NEWLINE\n" unless /\n/'
4da45be
7134973
---------------------
+
此外，任何未被识别的字符串，如果其中有 `%` ，将被解释为前面有 `tformat:` 。 例如，这两个是等同的：
+
---------------------
$ git log -2 --pretty=tformat:%h 4da45bef
$ git log -2 --pretty=%h 4da45bef
---------------------
