--commit::
--no-commit::
	执行合并并提交结果。这个选项可以用来覆盖 --no-commit。
ifdef::git-pull[]
	只有在合并的时候才有用。
endif::git-pull[]
+
用 --no-commit 来执行合并，并在创建合并提交前停止，以便让用户有机会在提交前检查和进一步调整合并结果。
+
Note that fast-forward updates do not create a merge commit and therefore there is no way to stop those merges with --no-commit. Thus, if you want to ensure your branch is not changed or updated by the merge command, use --no-ff with --no-commit.

--edit::
-e::
--no-edit::
	在提交成功的机械合并之前，调用一个编辑器来进一步编辑自动生成的合并信息，以便用户可以解释和证明合并的合理性。可以使用`--no-edit`选项来接受自动生成的信息（但是不鼓励亲这么做）。
ifndef::git-pull[]
如果你在命令行中用`-m`选项给出一个草稿信息，并想在编辑器中编辑它，`--edit`（或`-e`）选项仍然有用。
endif::git-pull[]
+
旧的脚本可能依赖于不允许用户编辑合并日志信息的历史行为。他们会在运行`git merge`时看到一个编辑器被打开。为了使这些脚本更容易调整到最新的行为，可以在脚本的开头将环境变量`GIT_MERGE_AUTOEDIT`设置为`no`。

--cleanup=<模式>::
	这个选项决定了在提交前如何清理合并信息。更多细节见linkgit:git-commit[1]。此外，如果`<模式>`的值为 `scissors`，在发生合并冲突时，scissors将被附加到 "MERGE_MSG "上，然后传递给提交机制。

ifdef::git-merge[]
--ff::
--no-ff::
--ff-only::
	Specifies how a merge is handled when the merged-in history is already a descendant of the current history. `--ff` is the default unless merging an annotated (and possibly signed) tag that is not stored in its natural place in the `refs/tags/` hierarchy, in which case `--no-ff` is assumed.
endif::git-merge[]
ifdef::git-pull[]
--ff-only::
	Only update to the new history if there is no divergent local history. This is the default when no method for reconciling divergent histories is provided (via the --rebase=* flags).

--ff::
--no-ff::
	When merging rather than rebasing, specifies how a merge is handled when the merged-in history is already a descendant of the current history. If merging is requested, `--ff` is the default unless merging an annotated (and possibly signed) tag that is not stored in its natural place in the `refs/tags/` hierarchy, in which case `--no-ff` is assumed.
endif::git-pull[]
+
With `--ff`, when possible resolve the merge as a fast-forward (only update the branch pointer to match the merged branch; do not create a merge commit). When not possible (when the merged-in history is not a descendant of the current history), create a merge commit.
+
使用`--no-ff`，在所有情况下都创建一个合并提交，即使该合并可以作为一个快进解决。
ifdef::git-merge[]
+
With `--ff-only`, resolve the merge as a fast-forward when possible. When not possible, refuse to merge and exit with a non-zero status.
endif::git-merge[]

-S[<keyid>]::
--gpg-sign[=<键 ID>]::
--no-gpg-sign::
	对合并后的提交进行 GPG 签名。`keyid` 参数是可选的，默认为提交者的身份；如果指定，它必须与选项连在一起，不能有空格。`--no-gpg-sign` 对于反命令 `commit.gpgSign` 配置变量和早期的 `--gpg-sign` 都很有用。

--log[=<n>]::
--no-log::
	除了分支名称外，在日志信息中最多只用<n>个正在合并的实际提交的单行描述来填充。参见 linkgit:git-fmt-merge-msg[1]。
ifdef::git-pull[]
	只有在合并的时候才有用。
endif::git-pull[]
+
如果使用 --no-log，则不列出被合并的实际提交内容的单行描述。

include::signoff-option.txt[]

--stat::
-n::
--no-stat::
	在合并结束时显示一个差异状态。差异状态也由配置选项merge.stat控制。
+
使用-n或--no-stat，在合并结束时不显示差异状态。

--squash::
--no-squash::
	Produce the working tree and index state as if a real merge happened (except for the merge information), but do not actually make a commit, move the `HEAD`, or record `$GIT_DIR/MERGE_HEAD` (to cause the next `git commit` command to create a merge commit). This allows you to create a single commit on top of the current branch whose effect is the same as merging another branch (or more in case of an octopus).
+
使用 --no-squash 进行合并并提交结果。这个选项可以用来覆盖 --squash 选项。
+
使用 --squash，--commit 是不允许的，而且会失败。
ifdef::git-pull[]
+
只有在合并的时候才有用。
endif::git-pull[]

--[no-]verify::
	By default, the pre-merge and commit-msg hooks are run. When `--no-verify` is given, these are bypassed. See also linkgit:githooks[5].
ifdef::git-pull[]
	只有在合并的时候才有用。
endif::git-pull[]

-s <策略>::
--strategy=<策略>::
	Use the given merge strategy; can be supplied more than once to specify them in the order they should be tried. If there is no `-s` option, a built-in list of strategies is used instead (`ort` when merging a single head, `octopus` otherwise).

-X <选项>::
--strategy-option=<选项>::
	将合并策略的特定选项传递给合并策略。

--verify-signatures::
--no-verify-signatures::
	Verify that the tip commit of the side branch being merged is signed with a valid key, i.e. a key that has a valid uid: in the default trust model, this means the signing key has been signed by a trusted key. If the tip commit of the side branch is not signed with a valid key, the merge is aborted.
ifdef::git-pull[]
+
只有在合并的时候才有用。
endif::git-pull[]

--summary::
--no-summary::
	与 --stat 和 --no-stat 同义；这些都弃用了，将来会被删除。

ifndef::git-pull[]
-q::
--quiet::
	安静地操作。暗指 --no-progress。

-v::
--verbose::
	详细日志。

--progress::
--no-progress::
	Turn progress on/off explicitly. If neither is specified, progress is shown if standard error is connected to a terminal. Note that not all merge strategies may support progress reporting.

endif::git-pull[]

--autostash::
--no-autostash::
	Automatically create a temporary stash entry before the operation begins, record it in the ref `MERGE_AUTOSTASH` and apply it after the operation ends. This means that you can run the operation on a dirty worktree. However, use with care: the final stash application after a successful merge might result in non-trivial conflicts.

--allow-unrelated-histories::
	By default, `git merge` command refuses to merge histories that do not share a common ancestor. This option can be used to override this safety when merging histories of two projects that started their lives independently. As that is a very rare occasion, no configuration variable to enable this by default exists and will not be added.
ifdef::git-pull[]
+
只有在合并的时候才有用。
endif::git-pull[]
