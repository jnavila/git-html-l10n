--commit::
--no-commit::
	执行合并并提交结果。这个选项可以用来覆盖 --no-commit。
ifdef::git-pull[]
	只有在合并的时候才有用。
endif::git-pull[]
+
用 --no-commit 来执行合并，并在创建合并提交前停止，以便让用户有机会在提交前检查和进一步调整合并结果。
+
请注意，快进更新并不产生合并提交，因此没有办法用 --no-commit 停止这些合并。 因此，如果你想确保你的分支不被合并命令改变或更新，请一起使用 --no-ff 和 --no-commit选项。

--edit::
-e::
--no-edit::
	在提交成功的机械合并之前，调用一个编辑器来进一步编辑自动生成的合并信息，以便用户可以解释和证明合并的合理性。可以使用`--no-edit`选项来接受自动生成的信息（但是不鼓励亲这么做）。
ifndef::git-pull[]
如果你在命令行中用`-m`选项给出一个草稿信息，并想在编辑器中编辑它，`--edit`（或`-e`）选项仍然有用。
endif::git-pull[]
+
旧的脚本可能依赖于不允许用户编辑合并日志信息的历史行为。他们会在运行`git merge`时看到一个编辑器被打开。为了使这些脚本更容易调整到最新的行为，可以在脚本的开头将环境变量`GIT_MERGE_AUTOEDIT`设置为`no`。

--cleanup=<模式>::
	这个选项决定了在提交前如何清理合并信息。更多细节见linkgit:git-commit[1]。此外，如果`<模式>`的值为 `scissors`，在发生合并冲突时，scissors将被附加到 "MERGE_MSG "上，然后传递给提交机制。

ifdef::git-merge[]
--ff::
--no-ff::
--ff-only::
	指定当被合并的历史已经是当前历史的后代时，如何处理合并的问题。 默认为`--ff`，除非合并的是一个有注释的（可能是有签名的）标签，在这种情况下，`--no-ff`假设这个标签并没有存储在`refs/tags/`层次结构中的自然位置。
endif::git-merge[]
ifdef::git-pull[]
--ff-only::
	只有在没有分歧的本地历史时才更新到新的历史。 当没有提供调和分歧历史的方法时（通过--rebase=*标志），这是默认的。

--ff::
--no-ff::
	当合并而不是变基时，指定当被合并的历史已经是当前历史的后代时如何处理合并。 如果要求合并，`--ff`是默认的，除非合并的是一个有注释的（可能是有签名的）标签，而这个标签没有存储在`refs/tags/`层次结构中的自然位置，在这种情况下，假定`--no-ff`。
endif::git-pull[]
+
如果使用 `--ff`，可能的话，以快进方式解决合并问题（只更新分支指针以匹配合并后的分支；不创建合并提交）。 当不可能时（当合并的历史不是当前历史的后代），创建一个合并提交。
+
使用`--no-ff`，在所有情况下都创建一个合并提交，即使该合并可以作为一个快进解决。
ifdef::git-merge[]
+
使用`--ff-only`，在可能的情况下，以快进的方式解决合并的问题。 当不可能时，拒绝合并并以非零状态退出。
endif::git-merge[]

-S[<keyid>]::
--gpg-sign[=<keyid>]::
--no-gpg-sign::
	对合并后的提交进行 GPG 签名。`keyid` 参数是可选的，默认为提交者的身份；如果指定，它必须与选项连在一起，不能有空格。`--no-gpg-sign` 对于反命令 `commit.gpgSign` 配置变量和早期的 `--gpg-sign` 都很有用。

--log[=<n>]::
--no-log::
	除了分支名称外，在日志信息中最多只用<n>个正在合并的实际提交的单行描述来填充。参见 linkgit:git-fmt-merge-msg[1]。
ifdef::git-pull[]
	只有在合并的时候才有用。
endif::git-pull[]
+
如果使用 --no-log，则不列出被合并的实际提交内容的单行描述。

include::signoff-option.txt[]

--stat::
-n::
--no-stat::
	在合并结束时显示一个差异状态。差异状态也由配置选项merge.stat控制。
+
使用-n或--no-stat，在合并结束时不显示差异状态。

--squash::
--no-squash::
	产生工作区和索引状态，就像发生了真正的合并一样（除了合并信息），但不实际提交，不移动`HEAD`，也不记录`$GIT_DIR/Merge_HEAD`（以导致下一个`git commit`命令创建一个合并提交）。 这允许你在当前分支的基础上创建一个单一的提交，其效果与合并另一个分支相同（如果是多路分支，则更多）。
+
使用 --no-squash 进行合并并提交结果。这个选项可以用来覆盖 --quash 选项。
+
使用 --squash，--commit 是不允许的，而且会失败。
ifdef::git-pull[]
+
只有在合并的时候才有用。
endif::git-pull[]

--[no-]verify::
	默认情况下，会运行 pre-merge 和 commit-msg 事件hook。 当给定 `--no-verify`时，这些将不会执行。 参见 linkgit:githooks[5]。
ifdef::git-pull[]
	只有在合并的时候才有用。
endif::git-pull[]

-s <strategy>::
--strategy=<strategy>::
	使用给定的合并策略；可以多次提供，以指定它们应该被尝试的顺序。 如果没有`-s`选项，则使用一个内置的策略列表（当合并单个头时使用`ort`，否则使用`octopus`）。

-X <选项>::
--strategy-option=<option>::
	将合并策略的特定选项传递给合并策略。

--verify-signatures::
--no-verify-signatures::
	验证被合并的侧边分支的提示提交是否用有效的密钥签署，即一个具有有效uid的密钥：在默认的信任模型中，这意味着签署密钥是由一个受信任的密钥签署。 如果侧边分支的提示提交没有用有效的密钥签名，则合并被终止。
ifdef::git-pull[]
+
只有在合并的时候才有用。
endif::git-pull[]

--summary::
--no-summary::
	与 --stat 和 --no-stat 同义；这些都弃用了，将来会被删除。

ifndef::git-pull[]
-q::
--quiet::
	安静地操作。暗指 --no-progress。

-v::
--verbose::
	详细日志。

--progress::
--no-progress::
	明确地打开/关闭进度。如果两者都没有指定，如果标准错误连接到终端，就会显示进度。 注意，并非所有的合并策略都支持进度报告。

endif::git-pull[]

--autostash::
--no-autostash::
	Automatically create a temporary stash entry before the operation begins, record it in the special ref `MERGE_AUTOSTASH` and apply it after the operation ends. This means that you can run the operation on a dirty worktree. However, use with care: the final stash application after a successful merge might result in non-trivial conflicts.

--allow-unrelated-histories::
	默认情况下，`git merge`命令拒绝合并那些没有共同祖先的历史。 当合并两个独立开始的项目的历史时，这个选项可以用来覆盖这个安全性。由于这是一个非常罕见的情况，没有配置变量来默认启用，也不会被添加。
ifdef::git-pull[]
+
只有在合并的时候才有用。
endif::git-pull[]
