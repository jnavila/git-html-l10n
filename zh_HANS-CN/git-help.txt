git-help(1)
===========

名称
--
git-help - 显示有关git的帮助信息

概述
--
[verse]
'git help' [-a|--all] [--[no-]verbose] [--[no-]external-commands] [--[no-]aliases]
'git help' [[-i|--info] [-m|--man] [-w|--web]] [<命令>|<文档>]
'git help' [-g|--guides]
'git help' [-c|--config]
'git help' [--user-interfaces]
'git help' [--developer-interfaces]

描述
--

如果没有选项，也没有给出 '<命令>' 或 '<文档>'，'git' 命令的概要和最常用的 Git 命令的列表会被打印在标准输出上。

如果给出选项 `--all` 或 `--a`，所有可用的命令都会打印在标准输出上。

如果给了 `--guide` 或 `--g` 选项，Git 概念指南的列表也会打印在标准输出上。

如果给出了一个命令或其他文件，相关的手册页就会被调出来。默认情况下使用 'man' 程序来实现这一目的，但这可以被其他选项或配置变量所覆盖。

如果给了一个别名，git 会在标准输出上显示该别名的定义。要获得别名命令的手册页，请使用 `git <command> --help`。

请注意，`git --help ...` 与 `git help ...` 相同，因为前者在内部被转换为后者。

要显示 linkgit:git[1] 的帮助页，请使用 `git help git`。

这个页面可以用 'git help help' 或 'git help --help' 显示

选项
--
-a::
--all::
	在标准输出上打印所有可用的命令。

--no-external-commands::
	当与 `--all` 一起使用时，排除在`$PATH` 中发现的外部 "git-*" 命令的列表。

--no-aliases::
	当与 `--all` 一起使用时，不包括配置的别名列表。

--verbose::
	当与 `--all` 一起使用时，打印所有识别的命令的描述。这是默认的。

-c::
--config::
	列出所有可用的配置变量。这是对 linkgit:git-config[1] 中的列表的简短总结。

-g::
--guides::
	在标准输出上打印 Git 概念指南的列表。

--user-interfaces::
	在标准输出上打印一个仓库、命令和文件接口文档的列表。
+
仓库内的文件接口，如 `.git/info/exclude`，在这里有记录（见 linkgit:gitrepository-layout[5]），以及树内配置，如 `.mailmap`（见linkgit:gitmailmap[5]）。
+
这一部分的文档还包括一般的或普遍的用户界面惯例（例如 linkgit:gitcli[7]），以及伪配置，例如 linkgit:githooks[5] 中描述的基于文件的 `.git/hooks/*` 界面。

--developer-interfaces::
	在标准输出上打印文件格式、协议和其他开发者接口文件的清单。

-i::
--info::
	以 'info' 格式显示该命令的手册页。'info' 程序将被用于该目的。

-m::
--man::
	以 'man' 格式显示该命令的手册页。这个选项可以用来覆盖 `help.format` 配置变量中设置的值。
+
默认情况下，将使用 'man' 程序来显示手册页面，但 `man.viewer` 配置变量可以用来选择其他显示程序（见下文）。

-w::
--web::
	以 ‘网页’（HTML）格式显示该命令的手册页面。为此将使用一个网络浏览器。
+
网络浏览器可以用配置变量 `help.browser` 来指定，如果前者没有设置，则用 `web.browser`。如果这些配置变量都没有设置，'git web{litdd}browse' 辅助脚本（由 "git help "调用）会选择一个合适的默认值。参见 linkgit:git-web{litdd}browse[1] 获取更多相关信息。

配置变量
----

help.format
~~~~~~~~~~~

如果没有传递命令行选项，将检查 `help.format` 配置变量。该变量支持以下值；它们使 'git help' 的行为与它们相应的命令行选项相同：

* "man" 对应的是 '-m|--man'，
* "info" 对应的是 '-i|--info'，
* "web" 或 "html" 对应于 '-w|-web'。

help.browser, web.browser 和 browser.<工具>.path
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

如果选择了 'web' 格式（通过命令行选项或配置变量），`help.browser`、`web.browser` 和 `browser.<工具>.path` 也将被检查。见上面选项部分的 '-w|-web' 和 linkgit:git-web{litdd}browse[1]。

man.viewer
~~~~~~~~~~

如果选择 'man' 格式，`man.viewer` 配置变量将被检查。目前支持以下数值：

* "man" : 像往常一样使用 'man' 程序、
* "woman": 使用 'emacsclient' 在 emacs 中启动 "woman" 模式（这只在 emacsclient 第 22 版开始工作），
* "konqueror": 使用 'kfmclient' 在一个新的 konqueror 标签中打开手册页（见下文 ‘关于 konqueror 的说明’）。

如果有相应的 `man.<工具>.cmd` 配置项，可以使用其他工具的值（见下文）。

可以给 `man.viewer` 配置变量设置多个值。他们相应的程序将按照配置文件中列出的顺序进行尝试。

例如，这种配置：

------------------------------------------------
	[man]
		viewer = konqueror
		viewer = woman
------------------------------------------------

将首先尝试使用 konqueror。但这可能会失败（例如，如果没有设置DISPLAY），在这种情况下，将尝试 Emacs 的 woman 模式。

如果一切都失败了，或者没有配置查看器，将尝试 `GIT_MAN_VIEWER` 环境变量中指定的查看器。 如果这也失败了，将尝试使用 'man' 程序。

man.<工具>.path
~~~~~~~~~~~~~

你可以通过设置配置变量 `man.<工具>.path` 来明确提供你喜欢的 man viewer 的完整路径。例如，你可以通过设置 'man.konqueror.path' 来配置 konqueror 的绝对路径。否则，'git help' 会假定该工具在 PATH中 是可用的。

man.<工具>.cmd
~~~~~~~~~~~~

当由 `man.viewer` 配置变量指定的 man viewer 不在支持的范围内时，将查找相应的 `man.<工具>.cmd` 配置变量。如果这个变量存在，那么指定的工具将被视为一个自定义的命令，shell eval 将被用来运行命令，并将 man page 作为参数传递。

关于 konqueror 的说明
~~~~~~~~~~~~~~~~

当 `man.viewer` 配置变量中指定为 'konqueror' 时，我们启动 'kfmclient'，以尝试在新标签页中打开已经打开的 konqueror 的 man 页面。

For consistency, we also try such a trick if 'man.konqueror.path' is set to something like `A_PATH_TO/konqueror`. That means we will try to launch `A_PATH_TO/kfmclient` instead.

如果你真的想使用 'konqueror'，那么你可以使用类似以下的东西：

------------------------------------------------
	[man]
		viewer = konq

	[man "konq"]
		cmd = A_PATH_TO/konqueror
------------------------------------------------

关于 git config --global 的说明
~~~~~~~~~~~~~~~~~~~~~~~~~~

请注意，所有这些配置变量可能都应该使用 `--global` 标志来设置，比如说像这样：

------------------------------------------------
$ git config --global help.format web
$ git config --global web.browser firefox
------------------------------------------------

因为它们可能更多是针对用户而不是针对仓库。 更多相关信息见 linkgit:git-config[1]。

GIT
---
属于 linkgit:git[1] 文档
