配置文件
----

Git 配置文件包含了一些影响 Git 命令行为的变量。每个仓库中的文件 `.git/config` 和可选的 `config.worktree`（见linkgit:git-worktree[1]的 “配置文件” 部分）用于存储该仓库的配置，`$HOME/.gitconfig` 用于存储每个用户的配置，作为 `.git/config` 文件的后退值。文件 `/etc/gitconfig` 可以用来存储全系统的默认配置。

配置变量同时被 Git 底层和上层命令使用。变量被分为几个部分，其中变量本身的完全合格的变量名是最后一个点分隔的部分，而部分名称是最后一个点之前的所有内容。变量名称不区分大小写，只允许使用字母数字字符和 `-`，并且必须以字母字符开头。 有些变量可能会出现多次；那么我们就说这个变量是多值的。

语法
~~

语法是相当灵活和宽松的；空白处大多被忽略。 '#' 和 ';' 字符开始注释到行末，空行被忽略。

该文件由章节和变量组成。 一个章节以方括号中的章节名称开始，一直到下一个章节开始。 节的名称是不区分大小写的。 在章节名称中只允许使用字母数字字符、`-` 和 `.`。 每个变量都必须属于某个部分，这意味着在第一次设置变量之前必须有一个部分标题。

节可以进一步划分为子节。 要开始一个分节，请将其名称放在双引号中，与节的名称用空格隔开，放在节的标题中，如下面的例子：

--------
	[section "小节"]

--------

分节名称是区分大小写的，可以包含任何字符，除了换行和空字节。双引号 `"` 和反斜杠可以分别通过转义为 `\"`和 `\\` 来包含。读取时，其他字符前面的反斜杠将被删除；例如，`\t` 被读作 `t`，`\0` 被读作 `0`。章节标题不能跨越多行。 变量可以直接属于某一节或某一小节。如果你有 `[section "subsection"]`，你可以有 `[section]`，但你不需要这样。

还有一种废弃的 `[section.subsection]` 语法。在这种语法中，分节名称被转换为小写字母，并且也会敏感地比较大小写。这些分节名称遵循与章节名称相同的限制。

所有其他行（以及部分标题之后的剩余行）都被认为是设置变量，形式为 'name = value'（或者只是 'name'，这是一个简写，表示变量是布尔值 "true"）。 变量名称不区分大小写，只允许使用字母数字字符和 `-`，并且必须以字母字符开头。

定义一个值的行可以通过以 `\` 结束来延续到下一行；反斜杠和行尾被剥离。 在 'name =' 之后的前导空白，在第一个注释字符 '#' 或 ';' 之后的剩余行，以及该行的尾部空白都会被丢弃，除非它们被包含在双引号中。 值中的内部空白将被逐字保留。

在双引号内，双引号 `"` 和反斜杠 `\` 字符必须被转义：用 `\"` 表示 `"`，用 `\\` 表示 `\`。

以下转义序列（除了 `\"` 和 `\\`）可以被识别：`\n` 表示换行符（NL），`\t` 表示水平制表（HT，TAB），`\b` 表示退格（BS）。 其他字符转义序列（包括八进制转义序列）是无效的。


包括
~~

`include` 和 `includeIf` 部分允许你从另一个来源包含配置指令。这些部分的行为与其他部分相同，但如果 `includeIf` 部分的条件没有评估为真，则可以忽略；见下面的 “有条件的包含”。

你可以通过设置特殊的 `include.path`（或 `includeIf.*.path` ）变量来包含另一个配置文件，即要包含的文件名。该变量将路径名作为其值，并接受 tilde 扩展。这些变量可以被多次赋予。

被包含的文件的内容会被立即插入，就像它们是在 include 指令的位置被发现的一样。如果该变量的值是一个相对路径，则该路径被认为是相对于发现 include 指令的配置文件。 请看下面的例子。

有条件的包括
~~~~~~

你可以通过设置 `includeIf.<条件>.path` 变量来有条件地包含另一个配置文件，即要包含的文件名称。

条件以一个关键词开始，后面是冒号和一些数据，其格式和含义取决于关键词。支持的关键词有：

`gitdir`::

	关键字 `gitdir:` 后面的数据被用作匹配模式。如果. git 目录的位置与该模式相匹配，则满足包含条件。
+
.git 位置可以是自动发现的，也可以来自 `$GIT_DIR` 环境变量。如果仓库是通过 .git 文件自动发现的（例如从子模块或链接的工作目录树），.git 位置将是 .git 目录的最终位置，而不是 .git 文件的位置。
+
该模式可以包含标准的通配符和两个额外的通配符，`**/` 和 `/**`，可以匹配多个路径组件。详情请参考 linkgit:gitignore[5]。为了方便起见：

 * 如果该模式以 `~/` 开头，`~` 将被替换为环境变量 `HOME` 的内容。

 * 如果模式以 `./` 开头，它将被替换为包含当前配置文件的目录。

 * 如果模式不以 `~/` 、`./` 或 `/` 开头，`**/` 将被自动添加。例如，模式 `foo/bar` 变成 `**/foo/bar`，将匹配 `/any/path/to/foo/bar`。

 * 如果模式以 `/` 结尾，`**` 将被自动添加。例如，模式 `foo/` 变成 `foo/**`。换句话说，它匹配 "foo" 和里面的所有内容，是递归的。

`gitdir/i`::
	这与 `gitdir` 相同，只是匹配时不区分大小写（例如，在不区分大小写的文件系统上）

`onbranch`::
	关键词 `onbranch: ` 后面的数据被认为是一个带有标准通配符和两个额外的通配符的模式，`**/` 和 `/**`，可以匹配多个路径组件。 如果我们在一个工作树中，当前签出的分支的名称与该模式相匹配，则满足包含条件。
+
如果模式以 `/` 结尾，`**` 将被自动添加。例如，模式 `foo/` 变成 `foo/**`。换句话说，它匹配所有以 "foo/" 开头的分支。如果你的分支是分层组织的，而你想将一个配置应用于该层级中的所有分支，这就很有用了。

`hasconfig:remote.*.url:`::
	这个关键词后面的数据被认为是一个带有标准的通配符和两个额外的通配符的模式，`**/` 和 `/**`，可以匹配多个组件。第一次看到这个关键词时，其余的配置文件将被扫描以寻找远程 URL（不应用任何值）。如果存在至少一个匹配该模式的远程 URL，则满足包含条件。
+
由该选项包含的文件（直接或间接）不允许包含远程 URLs。
+
请注意，与其他 includeIf 条件不同，解决这个条件依赖于读取条件时还不知道的信息。一个典型的用例是这个选项作为系统级或全局级的配置出现，而远程 URL 在本地级配置中；因此在解决这个条件时需要提前扫描。为了避免鸡生蛋蛋生鸡的问题，即潜在包含的文件会影响这些文件是否被潜在包含，Git 通过禁止这些文件影响这些条件的解决来打破这个循环（因此，禁止它们声明远程 URLs）。
+
至于这个关键字的命名，是为了与支持更多基于变量的包含条件的命名方案相兼容，但目前 Git 只支持上述的确切关键字。

关于通过 `gitdir` 和 `gitdir/i` 进行匹配的一些补充说明：

 * `$GIT_DIR` 中的符号链接在匹配前没有被解决。

 * 在 `$GIT_DIR` 之外，符号链接和实际路径版本的路径都将被匹配。例如，如果 ~/git 是 /mnt/storage/git 的符号链接，`gitdir:~/git` 和 `gitdir:/mnt/storage/git` 都会匹配。
+
在 v2.13.0 版本中，这个功能的初始版本不是这样的，它只匹配 realpath 版本。想要与这个功能的初始版本兼容的配置，要么只指定 realpath 版本，要么就指定两个版本。

 * 请注意，"../" 不是特殊的，将按字面意思匹配，这不太可能是你想要的。

示例
~~

----
# 核心变量
[core]
	; 不信任文件模式
	filemode = false

# 我们的差异算法
[diff]
	external = /usr/local/bin/diff-wrapper
	renames = true

[branch "devel"]
	remote = origin
	merge = refs/heads/devel

# 代理设置
[core]
	gitProxy="ssh" for "kernel.org"
	gitProxy=default-proxy ; 其余为

[include]
	path = /path/to/foo.inc ; 按绝对路径包含
	path = foo.inc ; find "foo.inc" 相对于当前文件
	path = ~/foo.inc ; 在您的 `$HOME` 目录中找到 "foo.inc"

;如果 $GIT_DIR 是 /path/to/foo/.git 就包含
[includeIf "gitdir:/path/to/foo/.git"]
	path = /path/to/foo.inc

;包括 /path/to/group 内的所有仓库
[includeIf "gitdir:/path/to/group/"]
	path = /path/to/foo.inc

; 包括 $HOME/to/group 内的所有仓库
[includeIf "gitdir:~/to/group/"]
	path = /path/to/foo.inc

; 相对路径总是相对于包括
; 文件（如果条件为真）；其位置不受
; 的位置不受条件的影响。
[includeIf "gitdir:/path/to/group/"]
	path = foo.inc

; 只有工作区当前检出了 foo-branch 
; 才包括
[includeIf "onbranch:foo-branch"] 。
	路径 = foo.inc

; 只有在给定 URL 的远程仓库存在的情况下才包括（注意
; 这样的URL可能在以后的文件中提供，或者在这个文件被读取后的一个
; 文件中提供，正如在这个例子中看到的那样)
[includeIf "hasconfig:remote.*.url:https://example.com/*" ]
	路径 = foo.inc
[remote "origin"]
	url = https://example.com/git
----

值
~

许多变量的值都被当作一个简单的字符串，但有些变量取的是特定类型的值，对于如何拼写它们有一些规则。

布尔::

       当一个变量被称为采取布尔值时，许多同义词被接受为 'true' 和 'false' ；这些都是不分大小写的。

	真;; 布尔真值是 `yes`、`on`、`true`和 `1`。 此外，一个没有 `= <值>` 的变量被认为是真。

	假;; 布尔假值是 `no`、`off`、`false`、`0` 和空字符串。
+
当使用 `--type=bool` 类型指定符将一个值转换为其规范形式时，'git config' 将确保输出为 "true" 或 "false"（用小写字母拼写）。

整数::
       许多指定各种尺寸的变量的值可以以 `k`、`M`...为后缀，表示 “以1024为比例的数字”、“以1024x1024为比例”，等等。

color::
       接受颜色的变量的值是一个颜色（最多两个，一个用于前景，一个用于背景）和属性（你想要多少就有多少）的列表，用空格分隔。
+
接受的基本颜色是 `normal`、`black`、`red`、`green`、`yellow`、`blue`、`magenta`、`cyan`、`white` 和 `default`。 给出的第一种颜色是前景；第二种是背景。 除了`normal'和`default'之外，所有的基本颜色都有一个明亮的变体，可以通过在颜色前面加上`bright'来指定，比如`brightred'。
+
颜色`normal`不会使颜色发生变化。它与空字符串相同，但在单独指定背景颜色时可以作为前景颜色（例如，"normal red"）。
+
颜色`default` 明确地将颜色重置为终端的默认值，例如，指定一个清除的背景。虽然不同的终端有差异，但这通常与设置为 "white black" 不一样。
+
颜色也可以用 0 到 255 之间的数字来表示；这些颜色使用 ANSI 256 色模式（但注意不是所有的终端都支持这个）。 如果你的终端支持，你也可以指定 24 位 RGB 值为十六进制，如 `#ff0ab3`。
+
可接受的属性是 `bold`、`dim`、`ul`、`blink`、`reverse`、`italic` 和 `strike`（用于划掉的字母或 “删除线”）。 任何属性相对于颜色的位置（在前，在后，或在中间）并不重要。特定的属性可以通过在它们前面加上 `no` 或 `no-` 来关闭（例如，`noreverse`，`no-ul`，等等）。
+
伪属性 `reset` 在应用指定的着色之前重置所有颜色和属性。例如，`reset green` 将导致一个绿色的前景和默认的背景，没有任何激活的属性。
+
一个空的颜色字符串根本不会产生任何颜色效果。这可以用来避免给特定的元素上色而不完全禁用颜色。
+
对于 git 的预定义颜色槽，属性是为了在彩色输出的每一项开始时被重置。所以将 `color.decorate.branch` 设置为 `black` 会将该分支名称涂成普通的 `black`，即使同一输出行中的前一个东西（例如`log --decorate`输出中的分支名称列表前的括号）被设置为 `bold` 或其他属性。 然而，自定义的日志格式可能会做更复杂和分层的着色，而否定的形式在那里可能很有用。

路径名::
	一个获取路径名值的变量可以被赋予一个以 "`~/`" 或 "`~user/`" 开头的字符串，通常的 tilde 扩展会发生在这样一个字符串上： `~/` 被扩展为 `$HOME` 的值，而 `~user/` 被扩展为指定用户的主目录。
+
如果一个路径以 `%(prefix)/` 开头，其余部分将被解释为相对于 Gi t的 "运行时前缀" 的路径，即相对于 Git 本身安装的位置。例如，`%(prefix)/bin/` 指的是 Git 可执行文件本身所在的目录。如果 Git 在编译时不支持运行时前缀，那么编译时的前缀将被替代。在不太可能的情况下，如果需要指定一个不应该被扩展的字面路径，需要以 `./` 为前缀，就像这样： `./%（前缀）/bin`。


变量
~~

请注意，这个列表并不全面，也不一定完整。 对于特定命令的变量，你会在相应的手册页中找到更详细的描述。

其他与 git 相关的工具可能也确实使用了他们自己的变量。 当发明新的变量用于自己的工具时，要确保它们的名字不与 Git 本身和其他流行的工具所使用的名字冲突，并在你的文档中描述它们。

include::config/advice.txt[]

include::config/attr.txt[]

include::config/core.txt[]

include::config/add.txt[]

include::config/alias.txt[]

include::config/am.txt[]

include::config/apply.txt[]

include::config/blame.txt[]

include::config/branch.txt[]

include::config/browser.txt[]

include::config/bundle.txt[]

include::config/checkout.txt[]

include::config/clean.txt[]

include::config/clone.txt[]

include::config/color.txt[]

include::config/column.txt[]

include::config/commit.txt[]

include::config/commitgraph.txt[]

include::config/credential.txt[]

include::config/completion.txt[]

include::config/diff.txt[]

include::config/difftool.txt[]

include::config/extensions.txt[]

include::config/fastimport.txt[]

include::config/feature.txt[]

include::config/fetch.txt[]

include::config/format.txt[]

include::config/filter.txt[]

include::config/fsck.txt[]

include::config/fsmonitor--daemon.txt[]

include::config/gc.txt[]

include::config/gitcvs.txt[]

include::config/gitweb.txt[]

include::config/grep.txt[]

include::config/gpg.txt[]

include::config/gui.txt[]

include::config/guitool.txt[]

include::config/help.txt[]

include::config/http.txt[]

include::config/i18n.txt[]

include::config/imap.txt[]

include::config/includeif.txt[]

include::config/index.txt[]

include::config/init.txt[]

include::config/instaweb.txt[]

include::config/interactive.txt[]

include::config/log.txt[]

include::config/lsrefs.txt[]

include::config/mailinfo.txt[]

include::config/mailmap.txt[]

include::config/maintenance.txt[]

include::config/man.txt[]

include::config/merge.txt[]

include::config/mergetool.txt[]

include::config/notes.txt[]

include::config/pack.txt[]

include::config/pager.txt[]

include::config/pretty.txt[]

include::config/protocol.txt[]

include::config/pull.txt[]

include::config/push.txt[]

include::config/rebase.txt[]

include::config/receive.txt[]

include::config/remote.txt[]

include::config/remotes.txt[]

include::config/repack.txt[]

include::config/rerere.txt[]

include::config/revert.txt[]

include::config/safe.txt[]

include::config/sendemail.txt[]

include::config/sequencer.txt[]

include::config/showbranch.txt[]

include::config/sparse.txt[]

include::config/splitindex.txt[]

include::config/ssh.txt[]

include::config/status.txt[]

include::config/stash.txt[]

include::config/submodule.txt[]

include::config/tag.txt[]

include::config/tar.txt[]

include::config/trace2.txt[]

include::config/transfer.txt[]

include::config/uploadarchive.txt[]

include::config/uploadpack.txt[]

include::config/url.txt[]

include::config/user.txt[]

include::config/versionsort.txt[]

include::config/web.txt[]

include::config/worktree.txt[]
