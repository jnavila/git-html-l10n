git-sh-setup(1)
===============

名称
--
git-sh-setup - 常见 Git shell 脚本设置代码

概述
--
[verse]
'. "$(git --exec-path)/git-sh-setup"'

描述
--

这不是一个终端用户想要运行的命令。 永远不会。 这个文档是为研究 Porcelain-ish 脚本和/或正在编写新脚本的人准备的。

'git sh-setup' 脚本小程序的设计目的是让其他 shell 脚本（使用 `.`）设置一些指向正常 Git 目录的变量和一些辅助 shell 函数。

在源码化之前，脚本应该设置一些变量；`USAGE`（和 `LONG_USAGE`，如果有的话）用于定义 shell 函数 `usage()` 给出的信息。 如果脚本可以从工作目录树的子目录运行，则可以设置 `SUBDIRECTORY_OK`（某些命令不能从子目录运行）。

脚本小程序会设置 `GIT_DIR` 和 `GIT_OBJECT_DIRECTORY` shell 变量，但*不会*导出它们到环境中。

功能
--

die::
	将提供的错误信息发送到标准错误流后退出。

usage::
	结束，并显示使用信息。

set_reflog_action::
	将 `GIT_REFLOG_ACTION` 环境设置为给定的字符串（通常是程序名称），除非它已经被设置。 每当脚本运行更新引用的 `git` 命令时，就会使用该字符串的值创建一个引用日志条目，以记录更新引用的命令。

git_editor::
	在给定文件上运行用户选择的编辑器（GIT_EDITOR、core.editor、VISUAL 或 EDITOR），但如果未指定编辑器且终端为哑终端，则会出错。

is_bare_repository::
	会向标准输出流输出 `true` 或 `false`，以指示版本库是否为裸仓库（即没有任何关联的工作区）。

cd_to_toplevel::
	运行 chdir 到工作树的顶层。

require_work_tree::
	会检查当前目录是否在仓库的工作区中，否则就挂起。

require_work_tree_exists::
	检查与仓库相关联的工作区是否存在，否则挂掉。 通常在调用 cd_to_toplevel 之前进行，如果没有工作区，就不可能调用 cd_to_toplevel。

require_clean_work_tree <行为> [<提示>]::
	会检查与仓库关联的工作区和索引中是否有未提交的跟踪文件变更。 否则，它将发出 "无法执行 <行为>:<原因>. <提示>"，然后挂掉。例如：
+
----------------
require_clean_work_tree rebase "请提交或者贮藏他们。"
----------------

get_author_ident_from_commit::
	输出与 eval 配合使用的代码，以设置指定提交的 GIT_AUTHOR_NAME、GIT_AUTHOR_EMAIL 和 GIT_AUTHOR_DATE 变量。

create_virtual_base::
	修改第一个文件，只保留与第二个文件相同的行。如果共同内容不足，则第一个文件留空。结果适合作为三向合并的虚拟基础输入。

GIT
---
属于 linkgit:git[1] 文档
