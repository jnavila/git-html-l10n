git-fsck(1)
===========

名称
--
git-fsck - 验证数据库中对象的连接性和有效性


概述
--
[verse]
'git fsck' [--tags] [--root] [--unreachable] [--cache] [--no-reflogs]
	 [--[no-]full] [--strict] [--verbose] [--lost-found]
	 [--[no-]dangling] [--[no-]progress] [--connectivity-only]
	 [--[no-]name-objects] [<对象>*]

描述
--
验证数据库中的对象的连接性和有效性。

选项
--
<对象>::
	一个要作为不可及性追踪的头的对象。
+
如果没有给出对象，'git fsck' 默认使用索引文件、`refs` 命名空间中的所有 SHA-1 引用，以及所有引用日志（除非 --no-reflogs 选项被给出）作为头。

--unreachable::
	打印出存在但不能从任何参考节点到达的对象。

--[no-]dangling::
	Print objects that exist but that are never 'directly' used (default). `--no-dangling` can be used to omit this information from the output.

--root::
	报告根节点。

--tags::
	报告标签。

--cache::
	考虑将索引中记录的任何对象也作为不可达性追踪的头节点。

--no-reflogs::
	Do not consider commits that are referenced only by an entry in a reflog to be reachable. This option is meant only to search for commits that used to be in a ref, but now aren't, but are still in that corresponding reflog.

--full::
	Check not just objects in GIT_OBJECT_DIRECTORY ($GIT_DIR/objects), but also the ones found in alternate object pools listed in GIT_ALTERNATE_OBJECT_DIRECTORIES or $GIT_DIR/objects/info/alternates, and in packed Git archives found in $GIT_DIR/objects/pack and corresponding pack subdirectories in alternate object pools. This is now default; you can turn it off with --no-full.

--connectivity-only::
	只检查可达对象的连接性，确保可达标签、提交或目录树所引用的任何对象都存在。这样可以完全避免读取 blobs，从而加快操作速度（尽管它仍然会检查被引用的 blobs 是否存在）。这将检测提交和树的损坏，但不做任何语义检查（例如，格式错误）。blob 对象中的损坏将完全不会被检测到。
+
无法到达的标签、提交和树也会被访问，以找到历史的悬空部分的提示。如果你不关心这个输出并想进一步加快它的速度，请使用 `--no-dangling`。

--strict::
	Enable more strict checking, namely to catch a file mode recorded with g+w bit set, which was created by older versions of Git. Existing repositories, including the Linux kernel, Git itself, and sparse repository have old objects that trigger this check, but it is recommended to check new projects with this flag.

--verbose::
	要健谈。

--lost-found::
	Write dangling objects into .git/lost-found/commit/ or .git/lost-found/other/, depending on type. If the object is a blob, the contents are written into the file, rather than its object name.

--name-objects::
	When displaying names of reachable objects, in addition to the SHA-1 also display a name that describes *how* they are reachable, compatible with linkgit:git-rev-parse[1], e.g. `HEAD@{1234567890}~25^2:src/`.

--[no-]progress::
	除非指定 --no-progress 或 --verbose，否则当标准错误流连接到终端时，默认情况下会报告进度状态。--progress 即使标准错误流没有指向终端，也会强制显示进度状态。

配置
--

include::includes/cmd-config-section-all.txt[]

include::config/fsck.txt[]

讨论
--

git-fsck 测试 SHA-1和一般对象的正确性，并对结果的可及性和其他一切进行全面跟踪。它打印出它发现的任何损坏（缺失或坏的对象），如果你使用 `--unreachable` 标志，它也会打印出存在但从任何指定的头部节点（或默认集，如上所述）无法到达的对象。

任何损坏的对象，你将不得不在备份或其他档案中找到（也就是说，你可以直接删除它们，并与其他网站做一个 'rsync'，希望别人拥有你损坏的对象）。

如果 core.commitGraph 为真，提交的图形文件也将用 'git commit-graph verify' 来检查。见 linkgit:git-commit-graph[1]。

提取的诊断方法
-------

无法到达 <类型> <对象> 的问题::
	<类型> 对象 <对象>，实际上在看到的任何树或提交中都没有直接或间接地提到过。这可能意味着还有一个根节点没有被你指定，或者目录树被破坏了。如果你没有漏掉一个根节点，那么你不妨删除不可达的节点，因为它们不能被使用。

缺少 <类型> <对象>::
	<类型> 对象 <object>，被提及但不存在于数据库中。

悬空的 <类型> <对象>::
	<类型> 对象 <object>，存在于数据库中，但从未 'directly' 使用。一个悬空的提交可能是一个根节点。

哈希值不匹配 <对象>::
	The database has an object whose hash doesn't match the object database value. This indicates a serious data integrity problem.


FSCK 信息
-------

The following lists the types of errors `git fsck` detects and what each error means, with their default severity. The severity of the error, other than those that are marked as "(FATAL)", can be tweaked by setting the corresponding `fsck.<msg-id>` configuration variable.

include::fsck-msgids.txt[]


环境变量
----

GIT_OBJECT_DIRECTORY::
	用来指定对象数据库的根（通常是 $GIT_DIR/objects）

GIT_INDEX_FILE::
	用来指定索引的索引文件

GIT_ALTERNATE_OBJECT_DIRECTORIES::
	用来指定额外的对象数据库根（通常不设置）

GIT
---
属于 linkgit:git[1] 文档
