git-show-branch(1)
==================

名称
--
git-show-branch - 显示分支及其提交情况

概述
--
[verse]
'git show-branch' [-a|--all] [-r|--remotes] [--topo-order | --date-order]
		[--current] [--color[=<合适>] | --no-color] [--sparse]
		[--more=<n> | --list | --independent | --merge-base]
		[--no-name | --sha1-name] [--topics]
		[(<修订> | <通配符>)...]
'git show-branch' (-g|--reflog)[=<n>[,<基础>]] [--list] [<引用>]

描述
--

以半直观的方式显示从以 <rev>s 或 <通配符>s 命名的提交（或 refs/heads 和/或 refs/tags 下的所有引用）开始的提交祖先图。

它不能同时显示超过 29 个分支和提交。

如果命令行中没有给出 <rev> 或 <通配符>，它会使用 `showbranch.default` 多值配置项。


选项
--
<rev>::
	Arbitrary extended SHA-1 expression (see linkgit:gitrevisions[7]) that typically names a branch head or a tag.

<通配符>::
	A glob pattern that matches branch or tag names under refs/. For example, if you have many topic branches under refs/heads/topic, giving `topic/*` would show all of them.

-r::
--remotes::
	显示远程跟踪分支。

-a::
--all::
	同时显示远程跟踪分支和本地分支。

--current::
	使用该选项后，当命令行中没有给出当前分支的版本号时，命令会将该分支包含在要显示的版本号列表中。

--topo-order::
        By default, the branches and their commits are shown in reverse chronological order. This option makes them appear in topological order (i.e., descendant commits are shown before their parents).

--date-order::
	该选项类似于 `--topo-order`，即父提交不会排在所有子提交之前，但也会根据提交日期对提交进行排序。

--sparse::
	By default, the output omits merges that are reachable from only one tip being shown. This option makes them visible.

--more=<n>::
	Usually the command stops output upon showing the commit that is the common ancestor of all the branches. This flag tells the command to go <n> more common commits beyond that. When <n> is negative, display only the <ref>s given, without showing the commit ancestry tree.

--list::
	同 `--more=-1`

--merge-base::
	不显示提交列表，而是确定指定提交的可能合并库。所有合并库都将包含在所有指定的提交中。这与 linkgit:git-merge-base[1] 处理三个或更多提交的方式不同。

--independent::
	在给出的多个 <引用> 中，只显示无法从其他 <引用> 到达的 <引用> 。

--no-name::
	不显示每次提交的命名字符串。

--sha1-name::
	在命名提交时，不要使用从头到尾的路径（例如，"master~2" 表示 "master" 的祖先），而是使用对象名称的唯一前缀。

--topics::
	Shows only commits that are NOT on the first branch given. This helps track topic branches by hiding any commit that is already in the main line of development. When given "git show-branch --topics master topic1 topic2", this will show the revisions given by "git rev-list {caret}master topic1 topic2"

-g::
--reflog[=<n>[,<基础>]] [<引用>]::
	Shows <n> most recent ref-log entries for the given ref. If <base> is given, <n> entries going back from that entry. <base> can be specified as count or date. When no explicit <ref> parameter is given, it defaults to the current branch (or `HEAD` if it is detached).

--color[=<when>]::
	Color the status sign (one of these: `*` `!` `+` `-`) of each commit corresponding to the branch it's in. The value must be always (the default), never, or auto.

--no-color::
	Turn off colored output, even when the configuration file gives the default to color output. Same as `--color=never`.

请注意，--more、--list、--independent 和 --merge-base 选项是互斥的。


输出
--

给定 N 个 <引用>，前 N 行是其提交信息中的单行描述。$GIT_DIR/HEAD 所指向的分支头前缀为星号 `*` 字符，而其他分支头前缀为 `!` 字符。

Following these N lines, a one-line log for each commit is displayed, indented N places. If a commit is on the I-th branch, the I-th indentation character shows a `+` sign; otherwise it shows a space. Merge commits are denoted by a `-` sign. Each commit shows a short name that can be used as an extended SHA-1 to name that commit.

下面的示例显示了三个分支："master"、"fixes" 和 "mhf"：

------------------------------------------------
$ git show-branch master fixes mhf
* [master] Add 'git show-branch'.
 ! [fixes] 在 "git reset "中引入 "reset type" 标志
  ! [mhf] 允许 "+remote:local" 引用规范在获取数据时导致 --force。
---
  + [mhf] 允许 "+remote:local" 引用规范在获取时导致 --force。
  + [mhf~1] 拉取多个头时使用 git-octopus。
 + [fixes] 在 "git reset" 中引入 "reset type" 标志
  + [mhf~2] "git fetch --force".
  + [mhf~3] 使用 .git/remote/origin，而不是 .git/branches/origin。
  + [mhf~4] 将 "git pull" 和 "git fetch" 默认为 origin
  + [mhf~5] 臭名昭著的 ‘章鱼（多路）合并’
  + [mhf~6] 重试 git-parse-remote。
  + [mhf~7] 获取多个头
  + [mhf~8] 开始添加 $GIT_DIR/remotes/ 支持。
*++ [master] 添加 'git show-branch'。
------------------------------------------------

These three branches all forked from a common commit, [master], whose commit message is "Add \'git show-branch'". The "fixes" branch adds one commit "Introduce "reset type" flag to "git reset"". The "mhf" branch adds many other commits. The current branch is "master".


实例
--

如果你将主分支放在 `refs/heads` 下，而主题分支放在其子目录中，那么在配置文件中加入以下内容可能会有所帮助：

------------
[showbranch]
	default = --topo-order
	default = heads/*

------------

With this, `git show-branch` without extra parameters would show only the primary branches. In addition, if you happen to be on your topic branch, it is shown as well.

------------
$ git show-branch --reflog="10,1 hour ago" --list master
------------

shows 10 reflog entries going back from the tip as of 1 hour ago. Without `--list`, the output also shows how these tips are topologically related to each other.

配置
--

include::includes/cmd-config-section-all.txt[]

include::config/showbranch.txt[]

GIT
---
属于 linkgit:git[1] 文档
