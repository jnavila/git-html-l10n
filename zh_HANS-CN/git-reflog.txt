git-reflog(1)
=============

名称
--
git-reflog - 管理重引用日志信息


概述
--
[verse]
'git reflog' [show] [<日志选项>] [<引用>]
'git reflog expire' [--expire=<时间>] [--expire-unreachable=<时间>]
	[--rewrite] [--updateref] [--stale-fix]
	[--dry-run | -n] [--verbose] [--all [--single-worktree] | <引用>...]
'git reflog delete' [--rewrite] [--updateref]
	[--dry-run | -n] [--verbose] <引用>@{<标注>}...
'git reflog exists' <引用>

描述
--
该命令管理记录在引用日志中的信息。

引用日志（或称 "reflogs"）记录了本地仓库中分支和其他引用的提示更新时间。参考日志在各种 Git 命令中都很有用，可以用来指定引用的旧值。例如，`HEAD@{2}` 表示 “两步前 HEAD 所在的位置”，`master@{one.week.ago}` 表示 “一周前本仓库中 master 所在的位置”，等等。详见 linkgit:gitrevisions[7]。

该命令采取不同的子命令，并根据子命令有不同的选项：

The "show" subcommand (which is also the default, in the absence of any subcommands) shows the log of the reference provided in the command-line (or `HEAD`, by default). The reflog covers all recent actions, and in addition the `HEAD` reflog records branch switching. `git reflog show` is an alias for `git log -g --abbrev-commit --pretty=oneline`; see linkgit:git-log[1] for more information.

The "expire" subcommand prunes older reflog entries. Entries older than `expire` time, or entries older than `expire-unreachable` time and not reachable from the current tip, are removed from the reflog. This is typically not used directly by end users -- instead, see linkgit:git-gc[1].

"delete" 子命令用于删除应用日志中的单个条目。其参数必须是一个_exact_条目（例如"`git reflog delete master@{2}`"）。最终用户通常也不会直接使用该子命令。

The "exists" subcommand checks whether a ref has a reflog. It exits with zero status if the reflog exists, and non-zero status if it does not.

选项
--

`show`（显示）的选项
~~~~~~~~~~~~~

`git reflog show` 接受 `git log` 接受的任何选项。


`expire` 的选项
~~~~~~~~~~~~

--all::
	处理所有引用的引用日志。

--single-worktree::
	默认情况下，如果指定了 `--all`选项，所有工作区的引用日志都会被处理。此选项限制只处理当前工作区的引用日志。

--expire=<时间>::
	剪除超过指定时间的条目。如果未指定此选项，则过期时间取自配置设置 `gc.reflogExpire`，默认为 90 天。`--expire=all` 会剪除任何年龄的条目；`--expire=never` 会关闭剪除可到达条目的功能（但请参阅 `--expire-unreachable`）。

--expire-unreachable=<时间>::
	剪除从分支当前顶端无法到达的超过 `<时间>` 的条目。如果未指定此选项，则过期时间取自配置设置 `gc.reflogExpireUnreachable`，默认为 30 天。`--expire-unreachable=all` 会修剪无法访问的条目，无论其年龄大小；`--expire-unreachable=never` 会关闭对无法访问条目的早期修剪（但请参见 `--expire`）。

--updateref::
	Update the reference to the value of the top reflog entry (i.e. <ref>@\{0\}) if the previous top entry was pruned. (This option is ignored for symbolic references.)

--rewrite::
	如果重写日志条目的前一个条目被剪枝，则调整其 “旧” SHA-1，使其等于现在排在其前面的条目的 “新” SHA-1 字段。

--stale-fix::
	删除任何指向 “中断提交” 的引用日志条目。中断提交是指从任何引用提示都无法到达的提交，它直接或间接地指向丢失的提交、树或二进制对象。
+
This computation involves traversing all the reachable objects, i.e. it has the same cost as 'git prune'. It is primarily intended to fix corruption caused by garbage collecting using older versions of Git, which didn't protect objects referred to by reflogs.

-n::
--dry-run::
	不要实际修剪任何条目，只需显示本应修剪的内容。

--verbose::
	在屏幕上打印额外信息。


`delete`（删除）的选项
~~~~~~~~~~~~~~~

`git reflog delete` 接受选项 `--updateref`、`--rewrite`、`-n`、`--dry-run` 和 `--verbose`，其含义与与 `expire` 一起使用时相同。


GIT
---
属于 linkgit:git[1] 文档
