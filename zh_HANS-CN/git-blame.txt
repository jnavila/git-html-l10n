git-blame(1)
============

名称
--
git-blame - Show what revision and author last modified each line of a file

概述
--
[verse]
'git blame' [-c] [-b] [-l] [--root] [-t] [-f] [-n] [-s] [-e] [-p] [-w] [--incremental]
	    [-L <range>] [-S <revs-file>] [-M] [-C] [-C] [-C] [--since=<date>]
	    [--ignore-rev <rev>] [--ignore-revs-file <file>]
	    [--color-lines] [--color-by-age] [--progress] [--abbrev=<n>]
	    [ --contents <file> ] [<rev> | --reverse <rev>..<rev>] [--] <file>

描述
--

用最后一次修改该行的修订版的信息来注释给定文件中的每一行。可以选择从给定的修订版开始做注释。

当指定一次或多次时，`-L` 将注释限制在要求的行中。

在整个文件的重命名过程中，行的起源被自动跟踪（目前没有选项可以关闭重命名跟踪）。要跟踪从一个文件移到另一个文件的行，或者跟踪从另一个文件复制和粘贴的行，等等，请参见 `-C` 和 `-M` 选项。

报告不会告诉你任何关于被删除或替换的行的信息；你需要使用一个工具，如 'git diff' 或下段中简要提到的 'pickaxe' 接口。

除了支持文件注释外，Git 还支持在开发历史中搜索代码片段何时发生变化。这使得追踪一个代码片段何时被添加到一个文件，在文件之间移动或复制，以及最终被删除或替换成为可能。它的工作原理是在差异中搜索一个文本字符串。一个搜索 `blame_usage` 的 pickaxe 界面的小例子：

-----------------------------------------------------------------------------
$ git log --pretty=oneline -S'blame_usage'
5040f17eba15504bad66b14a645bddd9b015ebb7 blame -S <ancestry-file>
ea4c7f9bf69e781dd0cd88d2bccb2bf5cc15c9a7 git-blame: Make the output
-----------------------------------------------------------------------------

选项
--
include::blame-options.txt[]

-c::
	Use the same output mode as linkgit:git-annotate[1] (Default: off).

--score-debug::
	包括与文件之间行的移动（见 `-C`）和文件内行的移动（见 `-M`）有关的调试信息。 列出的第一个数字是分数。 这是检测到的在文件间或文件内移动的字母数字字符的数量。 这个数字必须超过一定的阈值，'git blame' 才会认为这些代码行被移动了。

-f::
--show-name::
	显示原始提交中的文件名。 默认情况下，如果有任何一行来自不同名字的文件，由于重名检测，文件名会显示出来。

-n::
--show-number::
	显示原始提交中的行号（默认：off）。

-s::
	抑制输出中的作者姓名和时间戳。

-e::
--show-email::
	Show the author email instead of the author name (Default: off). This can also be controlled via the `blame.showEmail` config option.

-w::
	在比较父本和子本的版本时，忽略空白，以找到行的来源。

--abbrev=<n>::
	不要使用默认的7+1个十六进制数字作为对象的缩写，而是使用 <m>+1 个数字，其中 <m> 至少是 <n>，但确保提交对象的名称是唯一的。 请注意，有1列是用来标记边界提交的关健词。


THE DEFAULT FORMAT
------------------

当既没有指定`--porcelain` 也没有指定`--incremental` 选项时，`git blame` 将为每一行输出注释：

- 该行来自的提交的缩写对象名称；
- author ident (by default the author name and date, unless `-s` or `-e` is specified); and
- line number

在该行内容之前。

上层命令格式
------

在这种格式中，每一行都是在页眉之后输出的；页眉至少有第一行，它有：

- 该行所归属的提交的 40 字节 SHA-1；
- 原始文件中该行的行号；
- 最后文件中该行的行号；
- 在开始一组与前一次不同的提交的行上，该组的行数。 在随后的行中，这个字段是不存在的。

这个标题行后面是以下信息，每次提交至少有一次：

- 作者姓名（"author"）、电子邮件（"author-mail"）、时间（"author-time"）和时区（"author-tz"）；对提交者也是如此。
- 该行归属的提交中的文件名。
- 提交日志信息的第一行（"摘要"）。

The contents of the actual line are output after the above header, prefixed by a TAB. This is to allow adding more header elements later.

上层命令格式通常会抑制已经看过的提交信息。例如，两行归咎于同一个提交的内容都会被显示出来，但该提交的细节只会被显示一次。这样做更有效率，但可能需要读者保存更多的状态：

	# count the number of lines attributed to each author
	git blame --line-porcelain file |
	sed -n 's/^author //p' |
	sort | uniq -c | sort -rn


指定范围
----

与旧版本的 "git blame" 和 "git annotate" 不同，注释的范围可以限制在行的范围和修订范围。`-L` 选项将注释限制在一个行的范围内，可以多次指定。

当你对查找文件 `foo` 的第 40-60 行的原点感兴趣时，你可以像这样使用 `-L` 选项（它们的意思是一样的--都要求从第 40 行开始的 21 行）：

	git blame -L 40,60 foo
	git blame -L 40,+21 foo

你也可以使用正则表达式来指定行的范围：

	git blame -L '/^sub hello {/,/^}$/' foo

它将注释限制在 `hello` 子程序的主体中。

当你对超过 v2.6.18 版本的修改不感兴趣，或者超过 3 周的修改不感兴趣时，你可以使用类似于 `git rev-list` 的修订范围指定器：

	git blame v2.6.18.. -- foo
	git blame --since=3.weeks -- foo

当修订范围指定符被用来限制注释时，自范围边界（在上面的例子中，提交 v2.6.18 或超过 3 周的最新提交）以来没有改变的行被指责为该范围边界提交。

一个特别有用的方法是看一个新增的文件是否有从现有文件中复制和粘贴的行。 有时，这表明开发人员很马虎，没有正确地重构代码。 你可以首先找到引入该文件的提交：

	git log --diff-filter=A --pretty=short -- foo

然后用 'commit^!' 符号来注释该提交和其父辈之间的变化：

	git blame -C -C -f $commit^! -- foo


增量输出
----

当调用 `--incremental` 选项时，该命令在构建过程中输出结果。 一般来说，输出结果会先谈及最近提交的行（也就是说，这些行会被不按顺序的注释），并且是为了给交互式浏览者使用。

输出格式类似于上层命令格式，但它不包含被注释的文件的实际行数。

. 每个历史追溯条目总是以一行字开始：

	<40-byte hex sha1> <sourceline> <resultline> <num_lines>
+
行数从 1 开始计算。

. 当一个提交首次出现在数据流中时，它的各种其他信息会被打印出来，每一行的开头都有一个单字标签，描述额外的提交信息（作者、电子邮件、提交者、日期、摘要等）。

. 与上层命令格式不同，文件名信息总是给定的，并终止条目：

	"filename" <whitespace-quoted-filename-goes-here>
+
因此，对于一些面向行和字的解析器来说，它确实很容易解析（这对于大多数脚本语言来说应该是很自然的）。
+
[NOTE]
对于做解析的人来说：为了使它更健壮，只要忽略第一和最后一个（"<sha1>" 和 "filename" 行）之间的任何行，在 "扩展信息" 行的开头，你不认识标签词（或关心那个特定的）。这样一来，如果有一天增加了信息（比如提交编码或扩展的提交注释），历史追溯查看者就不会在意。


制图作者
----

See linkgit:gitmailmap[5].

配置
--

include::includes/cmd-config-section-all.txt[]

include::config/blame.txt[]

参见
--
linkgit:git-annotate[1]

GIT
---
属于 linkgit:git[1] 文档
