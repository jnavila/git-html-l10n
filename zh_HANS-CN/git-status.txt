git-status(1)
=============

名称
--
git-status - 显示工作树状态


概述
--
[verse]
'git status' [<选项>...] [--] [<路径规范>...]

描述
--
显示索引文件和当前HEAD提交有差异的路径，工作树和索引文件有差异的路径，以及工作树中不被Git追踪的路径（也不被linkgit:gitignore[5]忽略）。前者是你通过运行 "git commit "会提交的东西；第二和第三者是你在运行 "git commit "之前通过运行 "git add "可以提交的东西。

选项
--

-s::
--short::
	以简短的形式给出输出。

-b::
--branch::
	即使在短文中也要显示分支和跟踪信息。

--show-stash::
	显示目前藏匿的条目数量。

--porcelain[=<版本>]::
	Give the output in an easy-to-parse format for scripts. This is similar to the short output, but will remain stable across Git versions and regardless of user configuration. See below for details.
+
The version parameter is used to specify the format version. This is optional and defaults to the original version 'v1' format.

--long::
	给出长格式的输出。这是默认的。

-v::
--verbose::
	除了显示被修改的文件名外，还显示被分阶段提交的文本修改（即，像`git diff --cached`的输出）。如果`-v`被指定了两次，那么也会显示工作树中尚未分阶段的变化（即，像`git diff`的输出）。

-u[<模式>]::
--untracked-files[=<模式>]::
	显示未追踪文件。
+
--
The mode parameter is used to specify the handling of untracked files. It is optional: it defaults to 'all', and if specified, it must be stuck to the option (e.g. `-uno`, but not `-u no`).

可选项：

	- 'no' - Show no untracked files.
	- 'normal' - Shows untracked files and directories.
	- 'all' - Also shows individual files in untracked directories.

When `-u` option is not used, untracked files and directories are shown (i.e. the same as specifying `normal`), to help you avoid forgetting to add newly created files. Because it takes extra work to find untracked files in the filesystem, this mode may take some time in a large working tree. Consider enabling untracked cache and split index if supported (see `git update-index --untracked-cache` and `git update-index --split-index`), Otherwise you can use `no` to have `git status` return more quickly without showing untracked files.

默认值可以用linkgit:git-config[1]中记载的 status.showUntrackedFiles 配置变量来改变。
--

--ignore-submodules[=<when>]::
	Ignore changes to submodules when looking for changes. <when> can be either "none", "untracked", "dirty" or "all", which is the default. Using "none" will consider the submodule modified when it either contains untracked or modified files or its HEAD differs from the commit recorded in the superproject and can be used to override any settings of the 'ignore' option in linkgit:git-config[1] or linkgit:gitmodules[5]. When "untracked" is used submodules are not considered dirty when they only contain untracked content (but they are still scanned for modified content). Using "dirty" ignores all changes to the work tree of submodules, only changes to the commits stored in the superproject are shown (this was the behavior before 1.7.0). Using "all" hides all changes to submodules (and suppresses the output of submodule summaries when the config option `status.submoduleSummary` is set).

--ignored[=<模式>]::
	也显示忽略的文件。
+
--
The mode parameter is used to specify the handling of ignored files. It is optional: it defaults to 'traditional'.

可选项：

	- '传统' - 显示被忽略的文件和目录，除非
			  如果指定--untracked-files=all，
			  则会显示忽略目录中的
			  单个文件。
	- 'no' - 不显示被忽略的文件。
	- 'matching' - 显示忽略的文件和目录，这些文件和目录符合
			  无视模式。

当指定 "匹配 "模式时，明确匹配忽略模式的路径会被显示。如果一个目录与忽略模式相匹配，那么它就会被显示，但不显示被忽略目录中包含的路径。如果一个目录不匹配忽略模式，但所有内容都被忽略，那么该目录不被显示，但所有内容被显示。
--

-z::
	Terminate entries with NUL, instead of LF. This implies the `--porcelain=v1` output format if no other format is given.

--column[=<选项>]::
--no-column::
	在列中显示未跟踪的文件。选项语法见配置变量`column.status`。`--column`和`--no-column`没有选项，分别相当于'always'和'never'。

--ahead-behind::
--no-ahead-behind::
	Display or do not display detailed ahead/behind counts for the branch relative to its upstream branch. Defaults to true.

--renames::
--no-renames::
	Turn on/off rename detection regardless of user configuration. See also linkgit:git-diff[1] `--no-renames`.

--find-renames[=<n>]::
	Turn on rename detection, optionally setting the similarity threshold. See also linkgit:git-diff[1] `--find-renames`.

<pathspec>...::
	参见 linkgit:gitglossary[7] 中的'pathspec'条目。

输出
--
The output from this command is designed to be used as a commit template comment. The default, long format, is designed to be human readable, verbose and descriptive. Its contents and format are subject to change at any time.

与许多其他 Git 命令不同，如果你在子目录中工作，输出中提到的路径是相对于当前目录的（这是故意的，以帮助剪切和粘贴）。参见下面的 status.relativePaths 配置选项。

简短格式
~~~~

在简短的格式中，每个路径的状态显示为以下形式之一

	XY PATH
	XY ORIG_PATH -> PATH

其中`ORIG_PATH`是重命名/复制的内容的来源。`ORIG_PATH`只有在条目被重命名或复制时才会显示。`XY`是一个双字母的状态代码。

各个字段（包括`->`）之间用一个空格隔开。如果一个文件名包含空白或其他不可打印的字符，该字段将以C语言字符串字面的方式被引用：由ASCII双引号（34）字符包围，内部的特殊字符被反斜线省略。

有三种不同类型的状态是使用这种格式显示的，每一种都以不同的方式使用 `XY` 语法：

* 当一个合并正在发生并且合并成功时，或者在合并之外
	情况，`X`显示索引的状态，`Y`显示工作树的状态。
* 当发生合并冲突且尚未解决时，`X` 和 `Y` 就会出现
	显示了相对于共同祖先而言，合并的每个头所引入的状态。这些路径被称为_未合并_。
* 当一个路径没有被追踪时，`X`和`Y`总是相同的，因为它们是
	未知的索引。`??`用于未跟踪的路径。除非使用了`--ignored`，否则不列出被忽略的文件；如果使用了，则用`！！`表示被忽略的文件。

请注意，这里的_merge_也包括使用默认的`--merge`策略的rebases，cherry-pick，以及其他任何使用merge机制的东西。

在下面的表格中，这三个类别分别显示在不同的部分，这些字符用于显示跟踪路径的前两个部分的 `X` 和 `Y` 字段：

* '' = 未修改的
* 'M' = 修改过的
* 'T' = 文件类型已更改（常规文件、符号链接或子模块）
* 'A'=添加
* 'D' = 删除
* 'R' = 重命名
* 'C' = 已复制（如果配置选项 status.renames 设置为 “副本”）
* 'U'=更新但未合并

....
X Y的含义
-------------------------------------------------
	 [AMD]未更新
M [MTD] 在索引中更新
T [MTD] 类型在索引中有所改变
A [MTD] 添加到索引中
D 从索引中删除
R [MTD] 在索引中重新命名
C [MTD] 在索引中被复制
[MTARC] 索引和工作树匹配
[MTARC] 自索引以来，M工作树发生了变化
[MTARC] 工作树中的T类型自索引以来发生了变化
[MTARC] D在工作树中被删除
	    R在工作树中重新命名
	    C在工作树中被复制
-------------------------------------------------
D D未合并，均已删除
A U 未合并，由我们添加
U D未合并，被他人删除
U A 未合并，由他人添加
D U未合并，被我们删除
A A未合并，都被添加
U U未合并，都被修改
-------------------------------------------------
?           未被追踪的
!           忽略不计
-------------------------------------------------
....

子模块有更多的状态，而不是报告

* 'M' = 子模块的 HEAD 与索引中记录的不同
* 'm' = 子模块修改了内容
* '?' = 子模块有未跟踪文件

这是因为子模块中已修改的内容或未跟踪的文件无法在超级项目中通过 `git add` 添加，以准备提交。

'm' 和 '?' 是递归应用的。例如，如果一个子模块中的嵌套子模块包含一个未跟踪的文件，这也会报告为 '?'。

如果使用了-b，短格式的状态前面会有一行

    ## 分支名称跟踪信息

瓷器格式版本1
~~~~~~~

Version 1 porcelain format is similar to the short format, but is guaranteed not to change in a backwards-incompatible way between Git versions or based on user configuration. This makes it ideal for parsing by scripts. The description of the short format above also describes the porcelain format, with a few exceptions:

1. 用户的color.status配置不被尊重，颜色将永远是关闭的。

2. 用户的 status.relativePaths 配置不被尊重；显示的路径将总是相对于版本库根目录。

There is also an alternate -z format recommended for machine parsing. In that format, the status field is the same, but some other things change. First, the '\->' is omitted from rename entries and the field order is reversed (e.g 'from \-> to' becomes 'to from'). Second, a NUL (ASCII 0) follows each filename, replacing space as a field separator and the terminating newline (but a space still separates the status field from the first filename). Third, filenames containing special characters are not specially formatted; no quoting or backslash-escaping is performed.

任何子模块的变化都被报告为修改的`M'，而不是`m'或单一的`?'。

瓷器格式版本2
~~~~~~~

Version 2 format adds more detailed information about the state of the worktree and changed items. Version 2 also defines an extensible set of easy to parse optional headers.

Header lines start with "#" and are added in response to specific command line arguments. Parsers should ignore headers they don't recognize.

分支机构负责人
^^^^^^^

如果给了`--branch`，就会打印出一系列标题行，其中有关于当前分支的信息。

....
Line                                     Notes
------------------------------------------------------------
# branch.oid <commit> | (initial)        Current commit.
# branch.head <branch> | (detached)      Current branch.
# branch.upstream <upstream-branch>      If upstream is set.
# branch.ab +<ahead> -<behind>           If upstream is set and
					 the commit is present.
------------------------------------------------------------
....

暂存信息
^^^^

如果给出了 `--show-stash`，则打印一行，如果非零，则显示暂存条目的数量：

    # 暂存 <N>

变更后的跟踪条目
^^^^^^^^

Following the headers, a series of lines are printed for tracked entries. One of three different line formats may be used to describe an entry depending on the type of change. Tracked entries are printed in an undefined order; parsers should allow for a mixture of the 3 line types in any order.

普通更改的条目有以下格式：

    1 <XY> <sub> <mH> <mI> <mW> <hH> <hI> <路径>

重命名或复制的条目有以下格式：

    2 <XY> <sub> <mH> <mI> <mW> <hH> <hI> <X><score> <path><sep><origPath>

....
领域含义
--------------------------------------------------------
<XY> 一个2个字符的字段，包含短格式中描述的阶段性和非阶段性XY值。
	    阶段性和非阶段性的XY值。
	    不变的用". "表示，而不是用空格。
	    而不是空格。
<sub> 一个4个字符的字段，描述子模块的状态。
	    "N... "当条目不是一个子模块时。
	    "S<c><m><u>" 当条目是一个子模块。
	    <c>是 "C"，如果提交改变了；否则是"."。
	    <m> 如果它有跟踪的变化，则为 "M"；否则为"."。
	    <u> 如果有未追踪的修改，则为 "U"；否则为"."。
<mH> HEAD中的八进制文件模式。
<mI> 索引中的八进制文件模式。
<mW> 工作树中的八进制文件模式。
<hH> HEAD中的对象名称。
<hI> 索引中的对象名称。
<X><score> 重命名或复制分数（表示源文件和目标文件之间的相似百分比）。
	    源和目标之间的相似度）。
	    移动或复制的目标之间的相似度）。)例如，"R100 "或 "C75"。
<path> 路径名。  在一个重命名/复制的条目中，这
	    是目标路径。
<sep> 当使用`-z`选项时，两个路径名用NUL(ASCII 0x00)分隔。
	    用一个NUL(ASCII 0x00)字节分开；否则，用一个TAB(ASCII 0x09)
	    字节来分隔它们。
<origPath> 在HEAD或索引中提交的路径名。
	    这只存在于重命名/复制的条目中，并且
	    告诉你重命名/复制的内容来自哪里。
--------------------------------------------------------
....

未合并的条目有以下格式；第一个字符是 "u"，以区别于普通的变更条目。

    u <xy> <sub> <m1> <m2> <m3> <mW> <h1> <h2> <h3> <路径>

....
领域含义
--------------------------------------------------------
<XY> 一个2个字符的字段，描述冲突类型
	    描述冲突类型。
<sub> 一个4个字符的字段，描述子模块的状态
	    如上所述。
<m1> 阶段1中的八进制文件模式。
<m2> 阶段2中的八进制文件模式。
<m3> 阶段3中的八进制文件模式。
<mW> 工作树中的八进制文件模式。
<h1> 阶段1中的对象名称。
<h2> 第二阶段的对象名称。
<h3> 第三阶段的对象名称。
<path> 路径名。
--------------------------------------------------------
....

其他项目
^^^^

在跟踪的条目之后（如果要求的话），将打印一系列未跟踪的行，然后是在工作树中发现的忽略的条目。

未跟踪的项目有以下格式：

    ?<路径>

被忽略的项目有以下格式：

    !<路径>的情况下

路径名格式说明和-z
^^^^^^^^^^

When the `-z` option is given, pathnames are printed as is and without any quoting and lines are terminated with a NUL (ASCII 0x00) byte.

如果没有`-z`选项，带有 "不寻常 "字符的路径名将被引用，正如对配置变量`core.quotePath`的解释（见linkgit:git-config[1]）。


配置
--

该命令使用`color.status`（或`status.color`--它们的意思是一样的，为了向后兼容，保留后者）和`color.status.<slot>`配置变量来为其输出着色。

如果配置变量`status.relativePaths`被设置为false，那么所有显示的路径都是相对于版本库根目录的，而不是当前目录。

如果`status.submoduleSummary`被设置为一个非零的数字或true（与-1或无限制的数字相同），子模块摘要将启用长格式，并显示修改的子模块的提交摘要（见linkgit:git-submodule[1]的--summary-limit选项）。请注意，当`diff.ignoreSubmodules`被设置为'all'或仅为那些`submodule.<name>.ignore=all'的子模块，状态命令的摘要输出将被抑制。要查看被忽略的子模块的摘要，你可以使用 --ignore-submodules=dirty 命令行选项或 "git submodule summary "命令，它显示类似的输出，但不尊重这些设置。

背景刷新
----

默认情况下，`git status`会自动刷新索引，更新工作树上缓存的状态信息，并将结果写出来。写出更新的索引是一种优化，严格来说并无必要（`status`为自己计算数值，但写出它们只是为了避免后续程序重复我们的计算）。当`status`在后台运行时，在写入过程中持有的锁可能与其他同时进行的进程发生冲突，导致它们失败。在后台运行`status`的脚本应该考虑使用`git --no-optional-locks status`（详见linkgit:git[1]）。

未跟踪的文件和性能
---------

`git status`在大型工作树中，如果/当它需要搜索未被追踪的文件和目录时，速度会非常慢。有许多配置选项可以通过避免这种操作或是利用以前的 Git 命令的缓存结果来加快速度。但是没有一套适合所有人的最佳设置。我们将列出相关选项的摘要以帮助你，但在进入列表之前，你可能想再次运行`git status`，因为你的配置可能已经缓存了`git status`的结果，所以在随后的运行中可能会更快。

* `--untracked-files=no` 标志或
	设置`status.showUntrackedfiles=false`：表示`git status`不应该报告未跟踪的文件。这是最快的选项。`git status`不会列出未跟踪的文件，所以你得注意，在创建任何新的文件后，需要手动`git add`它们。

* `advice.statusUoption=false`（见linkgit:git-config[1]）：
	setting this variable to `false` disables the warning message given when enumerating untracked files takes more than 2 seconds. In a large project, it may take longer and the user may have already accepted the trade off (e.g. using "-uno" may not be an acceptable option for the user), in which case, there is no point issuing the warning message, and in such a case, disabling the warning may be the best.

* `core.untrackedCache=true`（参见 linkgit:git-update-index[1]）：
	enable the untracked cache feature and only search directories that have been modified since the previous `git status` command. Git remembers the set of untracked files within each directory and assumes that if a directory has not been modified, then the set of untracked files within has not changed. This is much faster than enumerating the contents of every directory, but still not without cost, because Git still has to search for the set of modified directories. The untracked cache is stored in the `.git/index` file. The reduced cost of searching for untracked files is offset slightly by the increased size of the index and the cost of keeping it up-to-date. That reduced search time is usually worth the additional size.

* `core.untrackedCache=true`和`core.fsmonitor=true`或
	`core.fsmonitor=<hook-command-pathname>` (see linkgit:git-update-index[1]): enable both the untracked cache and FSMonitor features and only search directories that have been modified since the previous `git status` command. This is faster than using just the untracked cache alone because Git can also avoid searching for modified directories. Git only has to enumerate the exact set of directories that have changed recently. While the FSMonitor feature can be enabled without the untracked cache, the benefits are greatly reduced in that case.

Note that after you turn on the untracked cache and/or FSMonitor features it may take a few `git status` commands for the various caches to warm up before you see improved command times. This is normal.

参见
--
linkgit:gitignore[5]

GIT
---
属于 linkgit:git[1] 文档
