git-pull(1)
===========

名称
--
git-pull - 从另一个仓库或本地分支撷取并与之集成


概述
--
[verse]
'git pull' [<选项>] [<仓库> [<引用规范>...]]


描述
--

将远程版本库的修改并入当前分支。 如果当前分支落后于远程分支，那么默认情况下，它将快速合并当前分支以匹配远程分支。 如果当前分支和远程分支有分歧，用户需要用 `--rebase` 或 `--no-rebase`（或 `pull.rebase` 中的相应配置选项）来指定如何调和分歧的分支。

更确切地说，`git pull` 运行 `git fetch` 并给出参数，然后根据配置选项或命令行标志，调用 `git rebase` 或 `git merge` 来协调不同的分支。

<仓库> 应该是传递给 linkgit:git-fetch[1] 的远程仓库的名称。 < 用引规范 > 可以命名一个任意的远程引用（例如，一个标签的名称），甚至是一个有相应远程跟踪分支的引用集合（例如，refs/heads/{asterisk}:refs/remotes/origin/{asterisk}），但通常它是远程仓库的一个分支名称。

<仓库> 和 < 分支 > 的默认值是从 linkgit:git-branch[1] `--track` 设置的当前分支的 "远程" 和 "合并" 配置中读取。

假设存在以下历史，且当前分支为"`master`"：

------------
	  A---B---C master on origin
	 /
    D---E---F---G master
	^
	你仓库中的 origin/master
------------

然后，"`git pull`" 将从远程的 `master` 分支获取并重放自它与本地 `master`（即 `E`）分歧以来的变化，直到它在 `master` 之上的当前提交（`C`），并将结果与两个父提交的名称和用户描述变化的日志信息一起记录在一个新提交中。

------------
	  A---B---C origin/master
	 /         \
    D---E---F---G---H master
------------

详情见 linkgit:git-merge[1]，包括如何呈现和处理冲突。

在 Git 1.7.0 或更高版本中，要取消一个冲突的合并，请使用 `git reset --merge`。 * 警告 *：在旧版本的 Git 中，不鼓励在未提交的情况下运行 "git pull"：虽然有可能，但在发生冲突的情况下，会让你处于一个难以恢复的状态。

如果任何远程修改与本地未提交的修改重叠，合并将被自动取消，工作目录树不会被改动。 一般来说，最好是在拉取之前把任何本地的修改弄到工作状态，或者用 linkgit:git-stash[1] 把它们贮藏起来。

选项
--

-q::
--quiet::
	这将被传递给底层的 git-fetch，以便在传输过程中抑制报告，以及底层的 git-merge，以便在合并过程中抑制输出。

-v::
--verbose::
	将 --verbose 传给 git-fetch 和 git-merge。

--[no-]recurse-submodules[=yes|on-demand|no]::
	这个选项控制是否应该获取已填充子模块的新提交，以及是否应该更新活动子模块的工作树（见linkgit:git-fetch[1], linkgit:git-config[1] 和 linkgit:gitmodules[5]）。
+
如果签出是通过变基完成的，那么本地子模块的提交也会被变基。
+
如果更新是通过合并完成的，子模块的冲突就会被解决并被检查出来。

与合并有关的选项
~~~~~~~~

:git-pull: 1

include::merge-options.txt[]

-r::
--rebase[=false|true|merges|interactive]::
	为真时，在获取后将当前分支变基到上游分支之上。如果有一个远程跟踪的分支与上游分支相对应，并且上游分支在上次获取后被重新建立了基础，那么变基就会使用该信息以避免重新建立非本地的变化。
+
当设置为 `merges` 时，使用 `git rebase --rebase-merges` 进行重建，这样本地的合并提交就会包含在重建中（详见 linkgit:git-rebase[1]）。
+
如果为false，则将上游分支合并到当前分支中。
+
当设置为 `interactive` 时，启用变基的交互模式。
+
如果你想让 `git pull` 总是使用 `--rebase` 而不是合并，请参见 linkgit:git-config[1] 中的 `pull.rebase`, `branch.< 分支名 >.rebase` 和 `branch.autoSetupRebase`。
+
[NOTE]
这是一种潜在的「危险的」操作模式。 它重写了历史，当你已经发布了这些历史时，这并不是一个好兆头。 除非你仔细阅读了linkgit:git-rebase[1]，否则请「不要」使用这个选项。

--no-rebase::
	这是对 --rebase=false 的简写。

与获取有关的选项
~~~~~~~~

include::fetch-options.txt[]

include::pull-fetch-param.txt[]

include::urls-remotes.txt[]

include::merge-strategies.txt[]

默认行为
----

人们经常使用 `git pull` 而不给任何参数。 传统上，这等同于说 `git pull origin`。 然而，当配置 `branch.<分支名>.remote` 在分支 `< 分支名 >` 上出现时，该值会被用来代替 `origin`。

为了确定使用什么 URL 来获取，将查询配置 `remote.<远程名>.url` 的值，如果没有这样的变量，将使用 `$GIT_DIR/remotes/< 远程名 >` 中 `URL:` 一行的值。

当命令行上没有任何引用规范参数时，为了确定要获取哪些远程分支（并可选择存储在远程跟踪分支中），会查询配置变量 `remote.<远程名>.fetch` 的值，如果没有，会查询 `$GIT_DIR/remotes/< 远程名 >` 并使用其 `Pull:` 行。 除了在『选项』部分描述的引用规范格式之外，你还可以有一个看起来像这样的引用规范通配符：

------------
refs/heads/*:refs/remotes/origin/*
------------

一个引用规范通配符必须有一个非空的 RHS（即必须存储在远程跟踪分支中获取的内容），其 LHS 和 RHS 必须以 `/*` 结尾。 以上规定了所有远程分支都使用同名的 `refs/remotes/origin/` 层次结构中的远程跟踪分支进行跟踪。

为了不破坏后向兼容性，确定在获取后合并哪个远程分支的规则有点复杂。

如果在 `git pull` 的命令行中给出了明确的引用规范，它们都会被合并。

当命令行没有给出引用规范时，那么 `git pull` 使用配置或 `$GIT_DIR/remotes/<远程名>` 中的引用规范。 在这种情况下，以下规则适用：

. 如果当前分支 `<分支名>` 的 `branch.< 分支名 >.merge` 配置存在，这就是被合并的远程站点的分支名称。

. 如果引用规范是全局的， 则不合并任何信息。

. 否则将合并第一个引用规范的远程分支。


实例
--

* 更新你所克隆的仓库的远程跟踪分支，然后将其中一个分支合并到你当前的分支：
+
------------------------------------------------
$ git pull
$ git pull origin
------------------------------------------------
+
通常情况下，合并进来的分支是远程仓库的 HEAD，但选择由 branch.<分支名>.remote 和 branch.< 分支名 >.merge 选项决定；详见 linkgit:git-config[1] 。

* 将远程分支 `next` 合并到当前分支：
+
------------------------------------------------
$ git pull origin next
------------------------------------------------
+
这将在 FETCH_HEAD 中暂时留下 `next` 的副本，并更新远程跟踪分支 `origin/next`。 同样可以通过调用 fetch 和 merge 来完成：
+
------------------------------------------------
$ git fetch origin
$ git merge origin/next
------------------------------------------------


如果你尝试了一次拉取，导致了复杂的冲突，想重新开始，你可以用 'git reset' 来恢复。


include::transfer-data-leaks.txt[]

漏洞
--
使用 --recurse-submodules 现在只能获取已经签出的子模块的新提交。例如，当上游在刚刚获取的超级项目的提交中添加了一个新的子模块时，子模块本身不能被获取，这使得以后不需要再次获取就能签出该子模块。这个问题有望在未来的 Git 版本中被修复。

参见
--
linkgit:git-fetch[1], linkgit:git-merge[1], linkgit:git-config[1]

GIT
---
属于 linkgit:git[1] 文档
