git-diff(1)
===========

名称
--
git-diff - 显示提交和工作区等变化


概述
--
[verse]
'git diff' [<options>] [<commit>] [--] [<path>...]。
'git diff' [<options>] --cached [--merge-base] [<commit>] [--] [<path>...]。
'git diff' [<options>] [--merge-base] <commit> [<commit>...] <commit> [--] [<path>...]
'git diff' [<options>] <commit>...<commit> [--] [<path>...]。
'git diff' [<options>] <blob> <blob
'git diff' [<options>] --no-index [--] <path> <path>。

描述
--
显示工作树和索引或树之间的变化，索引和树之间的变化，两个树之间的变化，合并产生的变化，两个blob对象之间的变化，或者磁盘上两个文件之间的变化。

'git diff' [<选项>] [--] [<路径>...]::

	这个表格是用来查看你相对于索引（下次提交的暂存区域）所做的修改。 换句话说，这些差异是你_可以告诉 Git 进一步添加到索引中，但你仍然没有。 你可以用linkgit:git-add[1]来对这些改动进行分期。

'git diff' [<选项>] --no-index [--] <路径> <路径>::

	这种形式是为了比较文件系统上给定的两个路径。 当在一个由Git控制的工作树中运行该命令，并且至少有一个路径指向工作树之外，或者在一个由Git控制的工作树之外运行该命令时，你可以省略`--no-index`选项。这种形式意味着`--exit-code`。

'git diff' [<选项>] --cached [--merge-base] [<提交>] [--] [<路径>...]::

	这个表单是用来查看你为下一次提交所做的相对于<commit>的修改。 通常情况下，你希望与最新的提交进行比较，所以如果你没有给出 <commit>，它默认为 HEAD。 如果HEAD不存在（例如未出生的分支），并且没有给出<commit>，它将显示所有已缓存的修改。 --staged是--cached的同义词。
+
如果给出 --merge-base，则不使用 <提交>，而使用 <提交> 和 HEAD 的合并基数。 `git diff --cached --merge-base A` 等同于 `git diff --cached $(git merge-base A HEAD)`。

'git diff' [<选项>] [--merge-base] <提交> [--] [<路径>...]::

	这个表格是用来查看你的工作树中相对于命名为<commit>的修改。 您可以使用 HEAD 来与最新的提交进行比较，或者使用分支名称来与不同分支的顶端进行比较。
+
如果给出了 --merge-base，则不使用<commit>，而使用<commit>和HEAD的合并基数。 `git diff --merge-base A`等同于`git diff $(git merge-base A HEAD)`。

'git diff' [<多个选项>] [--merge-base] <提交> <提交> [--] [<路径>...]::

	这是为了查看两个任意<commit>之间的变化。
+
如果给出了 --merge-base，则使用两个提交的合并基础作为 "之前 "的一方。 `git diff --merge-base A B`等同于`git diff $(git merge-base A B) B`。

'git diff' [<选项>] <提交> <提交>... <提交> [--] [<路径>...]::

	此表单用于查看合并提交的结果。 第一个列出的 <提交> 必须是合并本身；其余两个或更多的提交应该是它的父提交。 使用后缀 `^@` 和 `^!` 可以方便地生成所需的修订集。 如果 A 是合并提交，那么 `git diff A A^@` 、`git diff A^!` 和 `git show A` 都会得到相同的合并差异。

'git diff' [<选项>] <提交>..<提交> [--] [<路径>...]::

	这与早期的形式（没有`.`）是同义的，用于查看两个任意<commit>之间的变化。 如果省略了一侧的<commit>，将产生与使用HEAD相同的效果。

'git diff' [<选项>] <提交>\...<提交> [--] [<路径>...]::

	这种形式是为了查看包含和直到第二个<commit>的分支上的变化，从两个<commit>的共同祖先开始。 `git diff A...B`等同于`git diff $(git merge-base A B) B`。 你可以省略<commit>中的任何一个，这与使用HEAD的效果相同。

为了以防万一，需要注意的是，上述描述中的所有 <commit> 都可以是任何 <tree>，除了 `--merge-base` 和最后两种使用 `...` 符号的形式。我们感兴趣的树是由名为 `AUTO_MERGE` 的引用指向的树，它是在遇到合并冲突时由 'ort' 合并策略写入的（参见 linkgit:git-merge[1]）。 将工作树与 `AUTO_MERGE` 进行比较，就能看到迄今为止为解决文本冲突所做的改动（参见下面的示例）。

关于<commit>的更完整的拼写方式，见linkgit:gitrevisions[7]中的 "SPECIFYING REVISIONS "部分。 然而，"diff "是关于比较两个_端点，而不是范围，而且范围符号（`<commit>...<commit>`和`<commit>...<commit>`）并不意味着linkgit:gitrevisions[7]中 "SPECIFYING RANGES "部分所定义的范围。

'git diff' [<选项>] <blob> <blob>::

	这种形式是为了查看两个blob对象的原始内容之间的差异。

选项
--
:git-diff: 1
include::diff-options.txt[]

-1 --base::
-2 --ours::
-3 --theirs::
	将工作树与 "基础 "版本（阶段#1）、"我们的分支"（阶段#2）或 "他们的分支"（阶段#3）进行比较。 索引只对未合并的条目包含这些阶段，即在解决冲突时。 详细情况见 linkgit:git-read-tree[1] "3-Way Merge" 部分。

-0::
	省略未合并的条目的差异输出，只显示 "Unmerged"。 只能在比较工作树和索引的时候使用。

<路径>...::
	<paths>参数，当给出时，用于将diff限制在指定的路径上（你可以给出目录名称，并获得其下所有文件的diff）。


include::diff-format.txt[]

实例
--

检查你的工作树的各种方法::
+
------------
$ git diff            <1>
$ git diff --cached   <2>
$ git diff HEAD       <3>
$ git diff AUTO_MERGE <4>
------------
+
<1> 工作树上的修改还没有为下一次提交做铺垫。
<2> 索引和你最后一次提交之间的变化；如果你运行`git commit`而不使用`-a`选项，你将会提交的内容。
<3> 自你上次提交后工作目录树上的变化；如果你运行 `git commit -a`，你将提交的内容
<4> 您为解决文本冲突而对工作目录树所做的修改。

与任意提交的比较::
+
------------
$ git diff test <1>
$ git diff HEAD -- ./test <2>
$ git diff HEAD^ HEAD <3>
------------
+
<1> 不使用当前分支的顶端，而是与 "测试 "分支的顶端比较。
<2> 与其说是与 "test "分支的顶端比较，不如说是与当前分支的顶端比较，但只限于与 "test "文件比较。
<3> 比较上次提交前的版本和上次提交的版本。

比较分支机构::
+
------------
$ git diff topic master    <1>
$ git diff topic..master   <2>
$ git diff topic...master  <3>
------------
+
<1> 专题的提示和主分支之间的变化。
<2> 同上。
<3> 自专题分支开始以来，在主分支上发生的变化。

限制差分输出::
+
------------
$ git diff --diff-filter=MRC            <1>
$ git diff --name-status                <2>
$ git diff arch/i386 include/asm-i386   <3>
------------
+
<1> 只显示修改、重命名和复制，但不显示增加或删除。
<2> 只显示名称和变化的性质，但不显示实际的差异输出。
<3> 将diff输出限制在命名的子树上。

轧制差速器输出::
+
------------
$ git diff --find-copies-harder -B -C  <1>
$ git diff -R                          <2>
------------
+
<1> 花费额外的周期来寻找重命名、复制和完全重写（非常昂贵）。
<2> 反向输出差值。

配置
--

include::includes/cmd-config-section-all.txt[]

include::config/diff.txt[]

参见
--
diff(1), linkgit:git-difftool[1], linkgit:git-log[1], linkgit:gitdiffcore[7], linkgit:git-format-patch[1], linkgit:git-apply[1], linkgit:git-show[1]

GIT
---
属于 linkgit:git[1] 文档
