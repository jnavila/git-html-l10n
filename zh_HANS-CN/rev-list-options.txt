承诺限制
~~~~

除了使用描述中解释的特殊符号指定应列出的提交范围，还可以应用额外的提交限制。

使用更多的选项通常会进一步限制输出（例如，`--since=<date1>`限制在比`<date1>`新的提交，与`--grep=<pattern>`一起使用会进一步限制在日志信息中有一行符合`<pattern>`的提交），除非另有说明。

请注意，这些都是在提交排序和格式化选项之前应用的，如 `--reverse`。

-<数>::
-n <数量>::
--max-count=<数量>::
	限制输出的提交数量。

--skip=<数量>::
	在开始显示提交输出之前，跳过'数'的提交。

--since=<日期>::
--after=<日期>::
	显示比某一特定日期更近的提交。

--since-as-filter=<日期>::
	显示所有比指定日期更近的提交。这将访问该范围内的所有提交，而不是停在第一个比指定日期更早的提交。

--until=<日期>::
--before=<日期>::
	显示超过特定日期的提交。

ifdef::git-rev-list[]
--max-age=<时间戳>::
--min-age=<时间戳>::
	将提交的结果限制在指定的时间范围内。
endif::git-rev-list[]

--author=<模式>::
--committer=<模式>::
	将提交文件的输出限制在作者/提交人标题行符合指定模式（正则表达式）的文件。 如果有多个`--author=<pattern>`，则会选择作者符合任何一个给定模式的提交（对于多个`--committer=<pattern>`也是如此）。

--grep-reflog=<模式>::
	将提交文件的输出限制在有符合指定模式（正则表达式）的reflog条目的提交文件。如果有多个 `--grep-reflog`，则会选择那些 reflog 信息符合任何指定模式的提交。 除非使用了`--walk-reflogs`，否则使用此选项是错误的。

--grep=<模式>::
	将提交结果限制在日志信息与指定模式（正则表达式）相匹配的提交。 如果有多个 `--grep=<模式>`，则会选择那些日志信息与任何指定模式相匹配的提交（但见 `--all-match`）。
ifndef::git-rev-list[]
+
当 `--notes` 生效时，笔记中的信息被匹配，就像它是日志信息的一部分。
endif::git-rev-list[]

--all-match::
	将输出的提交限制在符合所有给定`--grep`的提交，而不是至少符合一个的提交。

--invert-grep::
	限定输出的提交信息与 `--grep=<模式>`指定的模式不匹配。

-i::
--regexp-ignore-case::
	匹配正则表达式的限制模式，不考虑字母大小写。

--basic-regexp::
	将限制性模式视为基本的正则表达式；这是默认的。

-E::
--extended-regexp::
	将限制性模式视为扩展的正则表达式，而不是默认的基本正则表达式。

-F::
--fixed-strings::
	将限制性模式视为固定字符串（不要将模式解释为正则表达式）。

-P::
--perl-regexp::
	将限制性模式视为与Perl兼容的正则表达式。
+
对这些类型的正则表达式的支持是一个可选的编译时依赖。如果Git在编译时没有对它们的支持，提供这个选项将导致它死亡。

--remove-empty::
	当一个给定的路径从树上消失时停止。

--merges::
	只打印合并后的提交。这与`--min-parents=2`完全相同。

--no-merges::
	不打印有一个以上父级的提交。这与`--max-parents=1`完全相同。

--min-parents=<数量>::
--max-parents=<数量>::
--no-min-parents::
--no-max-parents::
	只显示至少（或最多）有那么多父提交的提交。特别是，`--max-parents=1`等同于`--no-merges`，`--min-parents=2`等同于`--merges`。 `--max-parents=0`给出所有根提交，`--min-parents=3`给出所有章鱼合并。
+
`--no-min-parents` 和 `--no-max-parents` 会再次重置这些限制（为无限制）。 等价形式是 `--min-parents=0`（任何提交都有 0 个或更多父代）和 `--max-parents=-1`（负数表示无上限）。

--first-parent::
	查找要包含的提交时，在看到合并提交时只跟随第一个父提交。 在查看某个特性分支的演变时，该选项可以提供更好的概览，因为合并到特性分支往往只是为了不时地适应上游的更新，而该选项可以让你忽略由合并带来的历史中的单个提交。
ifdef::git-log[]
+
这个选项也改变了合并提交的默认差异格式为 `first-parent`，详见 `--diff-merges=first-parent`。
endif::git-log[]

--exclude-first-parent-only::
	在寻找要排除的提交（用'{caret}'）时，在看到合并提交时只跟随第一个父提交。 考虑到任意的合并都可以成为有效的主题分支变化，这可以用来查找主题分支中从它与远程分支的分歧点开始的变化集合。

--not::
	反转 '{caret}' 前缀（或无前缀）对后面所有版本说明符的意义，直到下一个 `--not`。 在 --stdin 之前的命令行中使用时，通过标准输入流传递的修订版本不会受其影响。反之，通过标准输入传递时，命令行上传递的修订版本也不会受其影响。

--all::
	假设`refs/`中的所有参考文献，连同`HEAD`一起，在命令行中被列为'<commit>'。

--branches[=<模式>]::
	假设`refs/heads`中的所有 refs 在命令行中被列为 '<commit>'。如果给出了'<pattern>'，将分支限制在与给定的shell glob相匹配的分支。如果pattern缺少'?'、'{asterisk}'或'['，则末尾的'/{asterisk}'是暗示的。

--tags[=<模式>]::
	假设`refs/tags`中的所有参考文献在命令行中被列为'<commit>'。如果给出了'<pattern>'，将标签限制在与给定的shell glob相匹配的标签。如果pattern缺少'?'、'{asterisk}'或'['，则暗示最后的'/{asterisk}'。

--remotes[=<模式>]::
	假设`refs/remotes`中的所有 refs 在命令行中被列为 '<commit>'。如果给出了'<pattern>'，将远程跟踪分支限制在与给定的shell glob相匹配的分支。 如果pattern缺少'?'、'{asterisk}'或'['，则末尾的'/{asterisk}'是暗示的。

--glob=<通配符模式>::
	假设所有与shell glob '<glob-pattern>相匹配的refs在命令行中被列为'<commit>'。前面的'refs/'，如果缺少的话会自动预加。如果模式中缺少'?'、'{asterisk}'或'['，则在结尾处隐含'/{asterisk}'。

--exclude=<通配符模式>::

	不包括匹配"<glob-pattern>"的参考文献，否则下一个`--all`、`--branches`、`--tags`、`--remotes`或`--glob`会考虑这些参考文献。重复这个选项可以累积排除模式，直到下一个`----all`、`---branches`、`---tags`、`---remotes`或`---glob`选项（其他选项或参数不清除累积模式）。
+
当应用于 `--branches`、 `--tags` 或 `--remotes` 时，所给出的模式不应以 `refs/heads`、`refs/tags` 或 `refs/remotes` 开头；当应用于 `--glob` 或 `--all` 选项时，必须以 `refs/` 开头。如果要使用尾部的 '/{asterisk}'，则必须明确给出。

--exclude-hidden=[fetch|receive|uploadpack]::
	通过查阅相应的 `fetch.hideRefs` 、`receive.hideRefs` 或 `uploadpack.hideRefs` 配置和 `transfer.hideRefs` 配置（参见 linkgit:git-config[1]），不要包含会被 `git-fetch` 、`git-receive-pack` 或 `git-upload-pack` 隐藏的引用。该选项会影响下一个伪引用选项 `--all` 或 `--glob`，并在处理后清除。

--reflog::
	假设reflogs提到的所有对象都在命令行中被列为`<commit>`。

--alternate-refs::
	假设所有提到的作为备用仓库的参考提示的对象都列在命令行上。备用资源库是任何资源库，其对象目录在`objects/info/alternates`中指定。 包含的对象集可以通过`core.alternateRefsCommand`等修改。见linkgit:git-config[1]。

--single-worktree::
	默认情况下，当有多个工作树时，所有工作树都会被以下选项检查（见linkgit:git-worktree[1]）：`--all`，`--reflog`和`--indexed-objects`。 这个选项强制它们只检查当前的工作树。

--ignore-missing::
	在看到输入中无效的对象名称时，假装没有给出坏的输入。

ifndef::git-rev-list[]
--bisect::
	假设坏的二分法参考文献`refs/bisect/bad`被列出，并且在命令行中假设它后面是`--not`和好的二分法参考文献`refs/bisect/good-*`。
endif::git-rev-list[]

--stdin::
	除从命令行获取参数外，还可从标准输入读取参数。它接受提交和伪选项，如 `--all` 和 `--glob=`。当看到 `--` 分隔符时，下面的输入将被视为路径并用于限制结果。通过标准输入读取的 `--not` 等标志只适用于以相同方式传递的参数，不会影响后续的命令行参数。

ifdef::git-rev-list[]
--quiet::
	不要打印任何东西到标准输出。 这种形式主要是为了让调用者测试退出状态，看看一系列的对象是否完全连接（或没有）。 它比将stdout重定向到`/dev/null`要快，因为输出不需要被格式化。

--disk-usage::
--disk-usage=human::
	抑制正常输出；相反，打印所选提交或对象用于磁盘存储的字节数之和。这相当于用管道将输出写入 `git cat-file --batch-check='%(objectsize:disk)'` ，只是它的运行速度要快得多（尤其是在使用 `--use-bitmap-index` 时）。参见 linkgit:git-cat-file[1] 中的 `注意事项` 部分，了解 “磁盘存储” 的限制。 如果使用可选值 `human`，磁盘存储大小将以人类可读字符串显示（如 12.24 Kib、3.50 Mib）。
endif::git-rev-list[]

--cherry-mark::
	就像`--cherry-pick`（见下文），但用`=`标记同等的提交，而不是省略，用`+`标记不同等的提交。

--cherry-pick::
	当提交的集合有对称差异时，省略任何与 "另一边 "的另一个提交相同的提交。
+
例如，如果你有两个分支，`A` 和 `B`，通常的方法是用`--左--右`列出其中一边的所有提交（见下面关于`--left-right`选项的描述）。然而，它显示的是从另一个分支中偷梁换柱的提交（例如，''3rd on b'' 可能是从分支 A 中偷梁换柱的）。有了这个选项，这样的提交对将从输出中排除。

--left-only::
--right-only::
	只列出对称性差异各自一侧的提交，即只列出那些通过 `--left-right` 标记的 `<` 或 `>`。
+
例如，`--cherry-pick --right-only A...B`省略了`B`中那些在`A`中的提交或与`A`中的提交相等的补丁。换句话说，它列出了 "git cherry A B "的 "+"的提交。 更准确地说，`--cherry-pick --right-only --no-merges`可以得到准确的列表。

--cherry::
	`--right-only --cherry-mark --no-merges`的同义词；有助于将输出限制在我们这边的提交，并标记那些已经应用到分叉历史的另一边的提交，`git log --cherry upstream...mybranch`，类似于`git cherry upstream mybranch`。

-g::
--walk-reflogs::
	不走提交祖先链，而走从最近的提交到更早的提交的reflog条目。 使用这个选项时，你不能指定要排除的提交（也就是说，不能使用'{caret}commit'、'commit1...commit2'和'commit1/...commit2'的符号）。
+
With `--pretty` format other than `oneline` and `reference` (for obvious reasons), this causes the output to have two extra lines of information taken from the reflog. The reflog designator in the output may be shown as `ref@{<Nth>}` (where _<Nth>_ is the reverse-chronological index in the reflog) or as `ref@{<timestamp>}` (with the _<timestamp>_ for that entry), depending on a few rules:
+
--
1. If the starting point is specified as `ref@{<Nth>}`, show the index format.
+
2. 如果起点被指定为`ref@{now}`，显示时间戳格式。
+
3. 如果两者都没有使用，但在命令行中给出了`--date`，则按照`--date`所要求的格式显示时间戳。
+
4. 否则，显示索引格式。
--
+
在`--pretty=oneline`下，提交信息的前缀是同一行中的这些信息。 这个选项不能与 `--reverse`结合使用。 参见 linkgit:git-reflog[1]。
+
在`--pretty=reference`下，这些信息将完全不显示。

--merge::
	显示在范围 `HEAD...<其他>` 中触及冲突路径的提交，其中 `<其他>` 是 `MERGE_HEAD`、`CHERRY_PICK_HEAD`、`REVERT_HEAD` 或 `REBASE_HEAD` 中第一个存在的伪引用。仅在索引中有未合并条目时有效。这个选项可以在解决三向合并中的冲突时用来显示相关的提交。

--boundary::
	输出排除的边界提交。边界提交的前缀是"-"。

ifdef::git-rev-list[]
--use-bitmap-index::

	尝试使用包位图索引（如果有的话）来加快遍历的速度。注意，当使用`--objects` 选项进行遍历时，目录树和 blobs 不会打印出它们的相关路径。

--progress=<头信息>::
	在考虑对象时在stderr上显示进度报告。`<标题>`文本将在每次进度更新时打印。
endif::git-rev-list[]

简化历史
~~~~

有时你只对历史的一部分感兴趣，例如修改某个<路径>的提交。但 "历史简化 "有两部分，一部分是选择提交，另一部分是如何做，因为有各种策略来简化历史。

以下选项选择要显示的提交：

<paths>::
	修改给定<路径>的提交会被选中。

--simplify-by-decoration::
	被某个分支或标签引用的提交被选中。

请注意，可以显示额外的提交，以提供一个有意义的历史。

以下选项会影响简化的执行方式：

默认模式::
	将历史简化为解释树的最终状态的最简单的历史。最简单的原因是，如果最终结果相同，它会修剪一些侧枝（即合并具有相同内容的分支）

--show-pulls::
	包括默认模式下的所有提交，但也包括任何与第一个父分支不相干但与后来的父分支相干的合并提交。这种模式有助于显示 "首次引入 "某个分支的合并提交。

--full-history::
	与默认模式相同，但不修剪一些历史记录。

--dense::
	只显示所选的提交，再加上一些才有意义的历史。

--sparse::
	简化历史中的所有提交都会显示出来。

--simplify-merges::
	为`--full-history`增加了一个选项，可以从结果的历史中删除一些不必要的合并，因为没有选定的提交对这次合并有贡献。

--ancestry-path[=<提交>]::
	When given a range of commits to display (e.g. 'commit1..commit2' or 'commit2 {caret}commit1'), and a commit <commit> in that range, only display commits in that range that are ancestors of <commit>, descendants of <commit>, or <commit> itself. If no commit is specified, use 'commit1' (the excluded part of the range) as <commit>. Can be passed multiple times; if so, a commit is included if it is any of the commits given or if it is an ancestor or descendant of one of them.

以下是更详细的解释。

假设你指定了 `foo` 作为 <路径>。 我们将把修改 `foo` 的提交称为 !TREESAME，其余的称为 TREESAME。 (在为 `foo` 过滤的差异中，它们看起来分别是不同的和相同的。）

在下文中，我们将始终引用同一个历史实例来说明简化设置之间的差异。 我们假设你在这个提交图中过滤的是一个文件 `foo`：
-----------------------------------------------------------------------
	  .-A---M---N---O---P---Q
	 /     /   /   /   /   /
	I     B   C   D   E   Y
	 \   /   /   /   /   /
	  `-------------'   X
-----------------------------------------------------------------------
历史 A---Q 的横线被认为是每次合并的第一个父本。 这些提交是：

* `I`是初始提交，其中`foo`存在，内容是`asdf''，文件`quux`存在，内容是`quux''。初始提交与空树比较，所以`I`是！`TREESAME。

* 在`A`中，`foo`只包含`foo''。

* `B`包含与`A`相同的变化。 它的合并`M`是微不足道的，因此对所有父类来说是TREESAME。

* `C`没有改变`foo`，但是它的合并`N`将其改为`foobar''，所以它与任何父类都不存在TREESAME。

* `D`将`foo`设置为`baz''。它的合并项`O`将`N`和`D`的字符串合并为`foobarbaz''；也就是说，它与任何父类都不是TREESAME。

* `E`将`quux`改为`xyzzy''，其合并的`P`将这些字符串合并为`quux xyzzy''。`P'与`O'的关系是TREESAME，但与`E'不是。

* `X`是一个独立的根提交，添加了一个新文件`side`，`Y`修改了它。`Y`与`X`同为TREESAME。它的合并文件`Q`在`P`上添加了`side`，`Q`与`P`是同源，但与`Y`不是同源。

`rev-list`在历史中倒退，根据是否使用`--full-history`和/或父代重写（通过`--parents`或`--children`），包括或排除提交。以下设置是可用的。

默认模式::
	如果提交的内容与任何父类不相干，则被包括在内（当然这一点可以改变，见下面的`--sparse`）。 如果该提交是一个合并，并且它与一个父类是同源的，则只跟随该父类。 (即使有几个TREESAME父类，也只跟随其中一个。) 否则，跟随所有父类。
+
这将实现：
+
-----------------------------------------------------------------------
	  .-A---N---O
	 /     /   /
	I---------D
-----------------------------------------------------------------------
+
请注意，如果有TREESAME父类的话，只遵循TREESAME父类的规则，将`B'完全排除在考虑之外。 `C`是通过`N`考虑的，但也是TREESAME。 根提交是与空树比较的，所以`I`是!!TREESAME。
+
父/子关系只有在使用 `--parents` 选项的情况下才能看到，但这并不影响在默认模式下选择的提交，所以我们显示了父行。

--full-history 无父级重写的完整历史记录::
	这种模式与默认模式有一点不同：总是跟随一个合并的所有父本，即使它与其中一个父本是TREESAME。 即使合并的一方有多个提交被包括在内，这也不意味着合并本身也是如此在这个例子中，我们得到
+
-----------------------------------------------------------------------
	I  A  B  N  D  O  P  Q
-----------------------------------------------------------------------
+
`M` 被排除在外，因为它与父母都是TREESAME。 `E` 、`C` 和`B` 都走了，但只有`B` 是 !TREESAME，所以其他的都没有出现。
+
请注意，如果没有父子重写，其实是不可能谈论提交之间的父子关系的，所以我们显示它们是不相连的。

--full-history 带父级重写功能的全历史记录::
	普通的提交只有当它们是！TREESAME时才会被包括在内（尽管这一点可以改变，见下面的`--sparse`）。
+
合并总是被包括在内。 然而，他们的父级列表会被重写。沿着每个父级，修剪掉那些不包括自己的提交。 这样做的结果是
+
-----------------------------------------------------------------------
	  .-A---M---N---O---P---Q
	 /     /   /   /   /
	I     B   /   D   /
	 \   /   /   /   /
	  `-------------'
-----------------------------------------------------------------------
+
与上面的`--full-history`相比，没有重写。 请注意，`E`被修剪掉了，因为它是TREESAME，但是P的父列表被改写为包含`E`的父`I`。 同样的情况发生在`C`和`N`，以及`X`、`Y`和`Q`。

除了上述设置外，你还可以改变 TRESAME 是否会影响收录：

--dense::
	如果不与任何父类有TREESAME关系，则包括走过的承诺。

--sparse::
	所有走过的提交都包括在内。
+
请注意，如果没有`--full-history`，这仍然可以简化合并：如果父代之一是TREESAME，我们只跟随这个父代，所以合并的其他方面永远不会被走。

--simplify-merges::
	首先，按照`--full-history`与父级改写的相同方式建立一个历史图（见上文）。
+
然后根据以下规则将每个提交的 `C` 简化为最终历史中的替换 `C`：
+
--
* 将 "C "设为 "C"。
+
* 将`C'`的每个父类`P'替换成其简化的`P'`。 在这个过程中，放弃那些是其他父类的祖先的父类，或者是根部提交TREESAME的空树，并删除重复的父类，但注意不要放弃所有我们是TREESAME的父类。
+
* 如果在这次父级改写之后，`C'`是一个根或合并提交（有0个或>1个父级），一个边界提交，或！TREESAME，那么它将被保留。 否则，它将被替换为其唯一的父类。
--
+
通过与 `--full-history` 选项的父级改写进行比较，可以最好地显示其效果。 这个例子变成了：
+
-----------------------------------------------------------------------
	  .-A---M---N---O
	 /     /       /
	I     B       D
	 \   /       /
	  `---------'
-----------------------------------------------------------------------
+
注意 `N` 、`P` 和 `Q` 与 `--full-history` 的主要区别：
+
--
* `N`的父列表中删除了`I`，因为它是另一个父`M`的一个祖先。 但是，`N`仍然存在，因为它是!TREESAME。
+
* `P`的父级列表也同样删除了`I`。 然后`P`被完全删除，因为它有一个父本，并且是TREESAME。
+
* `Q`的父列表中有`Y`简化为`X`。然后`X`被删除，因为它是一个TREESAME根。然后`Q`被完全删除，因为它有一个父级，是TREESAME。
--

还有一种简化模式可用：

--ancestry-path[=<提交>]::
	将显示的提交限制在<提交>的祖先，或<提交>的后代，或<提交>本身。
+
作为一个用例，请考虑以下提交历史：
+
-----------------------------------------------------------------------
	    D---E-------F
	   /     \       \
	  B---C---G---H---I---J
	 /                     \
	A-------K---------------L--M
-----------------------------------------------------------------------
+
有规律的 "D...M "会计算出作为`M`的祖先的提交集合，但不包括作为`D`的祖先的提交。这对了解`M'的历史在`D'之后发生了什么很有用，也就是说`M'有什么东西是`D'没有的'。这个例子中的结果是所有的提交，除了`A`和`B`（当然还有`D`本身）。
+
然而，当我们想找出`M'中哪些提交被`D'引入的错误所污染而需要修复时，我们可能只想查看'D...M'中实际上是`D'的后代的子集，即排除`C'和`K'。这正是`--ancestry-path`选项的作用。应用于'D...M'范围，它的结果是：
+
-----------------------------------------------------------------------
		E-------F
		 \       \
		  G---H---I---J
			       \
				L--M
-----------------------------------------------------------------------
+
我们也可以用`--ancestry-path=D`来代替`--ancestry-path`，这在应用于'D...M'范围时意思相同，只是更加明确。
+
如果我们感兴趣的是这个范围内的某个主题，以及受该主题影响的所有提交，我们可能只想查看祖先路径中包含该主题的`D...M`子集。 因此，以`--ancestry-path=H D...M`为例，会形成以下结果：
+
-----------------------------------------------------------------------
		E
		 \
		  G---H---I---J
			       \
				L--M
-----------------------------------------------------------------------
+
而`--ancestry-path=K D...M`会形成以下结果
+
-----------------------------------------------------------------------
		K---------------L--M
-----------------------------------------------------------------------

在讨论另一个选项，`--show-pulls`之前，我们需要创建一个新的历史实例。

用户在查看简化的提交历史时经常遇到的一个问题是，他们知道的对某个文件的修改提交并没有出现在该文件的简史中。让我们演示一个新的例子，并说明`--full-history`和`--simplify-merges`等选项在这种情况下是如何工作的：

-----------------------------------------------------------------------
	  .-A---M-----C--N---O---P
	 /     / \  \  \/   /   /
	I     B   \  R-'`-Z'   /
	 \   /     \/         /
	  \ /      /\        /
	   `---X--'  `---Y--'
-----------------------------------------------------------------------

在这个例子中，假设`I`创建了`file.txt`，并被`A`、`B`和`X`以不同方式修改。单亲提交的`C`、`Z`和`Y`没有修改`file.txt`。合并提交 `M`是通过解决合并冲突而产生的，包括了 `A `和 `B `的修改，因此与其中任何一个都不是同源的。然而，合并提交`R`是通过忽略`M`处的`file.txt`的内容，而只采用`X`处的`file.txt`的内容而产生的。因此，`R`与`X`是同源的，但不是`M`。最后，创建`N'的自然合并决议是取`file.txt`在`R'的内容，所以`N'与`R`是同源的，但不是`C`。 合并提交的 `O` 和 `P` 与它们的第一代父母是同源的，但与它们的第二代父母 `Z` 和 `Y `则不是同源的。

当使用默认模式时，`N'和`R`都有一个TREESAME父级，所以这些边被展示出来，其他边被忽略。由此产生的历史图是：

-----------------------------------------------------------------------
	I---X
-----------------------------------------------------------------------

当使用 `--full-history` 选项时，Git 会行走每条边。这将发现提交 `A` 和 `B` 以及合并 `M`，但也将揭示合并提交 `O` 和 `P` 。通过父级改写，得到的图是：

-----------------------------------------------------------------------
	  .-A---M--------N---O---P
	 /     / \  \  \/   /   /
	I     B   \  R-'`--'   /
	 \   /     \/         /
	  \ /      /\        /
	   `---X--'  `------'
-----------------------------------------------------------------------

这里，合并提交 `O` 和 `P` 带来了额外的输出，因为它们实际上并没有对 `file.txt` 做出改变。他们只是合并了一个基于 `file.txt` 旧版本的主题。这是在使用工作流程的仓库中常见的问题，在工作流程中，许多贡献者并行工作，并沿着一个主干合并他们的主题分支：不相关的合并出现在 `--full-history` 选项结果中。

当使用`--simplify-merges`选项时，提交的 `O` 和 `P` 从结果中消失。这是因为 `O` 和 `P` 重写的第二父本可以从它们的第一父本到达。这些边被移除，然后这些提交看起来就像与它们的父类一样的单亲提交。这也发生在提交 `N` 上，导致历史视图如下：

-----------------------------------------------------------------------
	  .-A---M--.
	 /     /    \
	I     B      R
	 \   /      /
	  \ /      /
	   `---X--'
-----------------------------------------------------------------------

在这个视图中，我们看到了所有来自`A`，`B`和`X`的重要单亲变化。我们还可以看到仔细解决的合并`M`和不那么仔细解决的合并`R`。这些信息通常足以确定为什么`A`和`B`的提交在默认视图中从历史中 "消失 "了。然而，这种方法也有一些问题。

第一个问题是性能。与之前的任何选项不同，`--simplify-merges` 选项需要在返回一个结果之前走完整个提交历史。这可能使该选项难以用于非常大的仓库。

第二个问题是审计的问题。当许多贡献者在同一个版本库中工作时，哪些合并提交将一个变化引入到一个重要的分支是很重要的。上面有问题的合并`R`不可能是用来合并到一个重要分支的合并提交。相反，`N'是用来将`R'和`X'合并到重要分支的。这个提交可能有关于为什么`X'会覆盖`A'和`B'的修改的信息，在其提交信息中。

--show-pulls::
	除了在默认历史中显示的提交之外，还要显示每一个与第一个父本不相同但与后来的父本相同的合并提交。
+
当一个合并提交被 `--show-pulls` 选项包含时，该合并被视为从另一个分支 “拉取” 来的修改。在这个例子中使用 `--show-pulls` 选项时（没有其他选项），得到的图是：
+
-----------------------------------------------------------------------
	I---X---R---N
-----------------------------------------------------------------------
+
这里，合并后的提交`R`和`N`被包括在内，因为它们分别将提交`X`和`R`拉到了基础分支。这些合并是`A`和`B`的提交没有出现在默认历史中的原因。
+
当 `--show-pulls` 与 `--simplify-merges` 选项配对时，该图包括所有必要的信息：
+
-----------------------------------------------------------------------
	  .-A---M--.   N
	 /     /    \ /
	I     B      R
	 \   /      /
	  \ /      /
	   `---X--'
-----------------------------------------------------------------------
+
请注意，由于`M`可以从`R`到达，从`N`到`M`的边被简化掉了。然而，`N`仍然作为一个重要的提交出现在历史中，因为它把`R`的修改 "拉 "进了主分支。

`--simplify-by-decoration` 选项允许你只查看历史拓扑的全貌，省略那些没有被标签引用的提交。 如果 (1) 提交被标签引用，或者 (2) 提交改变了命令行上给出的路径内容，则被标记为 TREESAME（换句话说，按照上述历史简化规则保留）。 所有其他的提交都被标记为 TREESAME（会被简化掉）。

ifndef::git-shortlog[]
ifdef::git-rev-list[]
剖腹产助手
~~~~~

--bisect::
	将输出限制在一个提交对象上，该对象大致在包含和排除的提交之间。请注意，坏的分界参考`refs/bisect/bad`会被添加到包含的提交中（如果它存在的话），好的分界参考`refs/bisect/good-*`会被添加到排除的提交中（如果它们存在的话）。因此，假设`refs/bisect/`中没有参考文献，如果
+
-----------------------------------------------------------------------
	$ git rev-list --bisect foo ^bar ^baz
-----------------------------------------------------------------------
+
输出 'midpoint'，即两个命令的输出
+
-----------------------------------------------------------------------
	$ git rev-list foo ^midpoint
	$ git rev-list midpoint ^bar ^baz
-----------------------------------------------------------------------
+
的长度大致相同。 因此，找到引入回归的变化就变成了一个二进制搜索：反复生成和测试新的 "中点"，直到提交链的长度为1。

--bisect-vars::
	这与`--bisect`的计算方法相同，只是不使用`refs/bisect/`中的参考文献，而且输出的文本可以被shell评估。这几行将把中点修订的名称分配给变量`bisect_rev`，并把`bisect_rev`测试后的预期提交数分配给`bisect_nr`。如果`bisect_rev'结果是好的，预计测试的提交数量为`bisect_good'，如果`bisect_rev'结果是坏的，预计测试的提交数量为`bisect_bad'，以及我们现在正在分叉的提交数量为`bisect_all'。

--bisect-all::
	这将输出包含的提交和排除的提交之间的所有提交对象，按照它们与包含的提交和排除的提交的距离排序。`refs/bisect/`中的引用不被使用。离它们最远的会先显示出来。这也是 `--bisect` 选项唯一显示的对象。）
+
这很有用，因为当你因为某些原因想避免测试某些提交时（例如，它们可能无法编译），可以很容易地选择一个好的提交来测试。
+
这个选项可以和`--bisect-vars`一起使用，在这种情况下，在所有排序的提交对象之后，会有和`--bisect-vars`单独使用一样的文本。
endif::git-rev-list[]
endif::git-shortlog[]

ifndef::git-shortlog[]
承诺订购
~~~~

默认情况下，提交的内容是按时间顺序倒序显示的。

--date-order::
	在显示所有子代之前不显示父代，否则按提交时间戳顺序显示提交。

--author-date-order::
	在显示所有子代之前不显示父代，否则按作者时间戳顺序显示提交。

--topo-order::
	在显示所有子代之前不显示父代，并避免显示多行历史交错的提交。
+
例如，在这样的一个提交历史中：
+
----------------------------------------------------------------

    ---1----2----4----7
	\	       \
	 3----5----6----8---

----------------------------------------------------------------
+
其中数字表示提交时间戳的顺序，`git rev-list`和带有`--date-order`的朋友显示提交的时间戳顺序。8 7 6 5 4 3 2 1.
+
如果使用`--topo-order`，它们会显示8 6 5 3 7 4 2 1（或8 7 4 2 6 5 3 1）；一些较早的提交会显示在较新的提交之前，以避免显示两个平行开发轨道的提交混在一起。

--reverse::
	以相反的顺序输出选择显示的提交（见上面的提交限制部分）。不能与`--walk-reflogs`结合使用。
endif::git-shortlog[]

ifndef::git-shortlog[]
对象遍历
~~~~

这些选项主要是针对Git存储库的打包。

ifdef::git-rev-list[]
--objects::
	打印列出的提交对象所引用的任何对象的ID。 `--objects foo ^bar` 因此意味着 ''给我发送所有我需要下载的对象ID，如果我有提交对象_bar_但没有_foo_的话''。另请参阅下面的 `--object-names` 选项。

--in-commit-order::
	按照提交的顺序打印树和blob的id。树和blob的id会在它们第一次被提交者引用后打印。

--objects-edge::
	类似于 `--objects`，但也会打印被排除的提交物的 ID，前缀为 `-''字符。 这被 linkgit:git-pack-objects[1] 用来建立一个 "瘦身 "包，它基于这些被排除的提交中包含的对象，以删除的形式记录对象，以减少网络流量。

--objects-edge-aggressive::
	类似于 `--objects-edge`，但它更努力地寻找被排除的提交，代价是增加时间。 它被用来代替`--objects-edge`，为浅层仓库建立 "薄 "的包。

--indexed-objects::
	假设索引使用的所有树和blobs都列在命令行中。 注意，你可能也想使用`--objects`。

--unpacked::
	只对 `--objects` 有用；打印不在包中的对象 ID。

--object-names::
	只对 `--objects` 有用；打印找到的对象ID的名称。这是默认的行为。注意，每个对象的 "名字" 是模糊的，主要是作为打包对象的提示。特别是：标签、树和二进制文件的名字不作区分；路径名称可以被修改以删除换行；如果一个对象会以不同的名字出现多次，则只显示一个名字。

--no-object-names::
	只对 `--objects` 有用；不打印找到的对象 ID 的名称。这与 `--object-names` 相反。这个标志允许输出更容易被 linkgit:git-cat-file[1] 等命令解析。

--filter=<过滤器定义>::
	只对其中一个 `--objects*` 选项有用；从打印对象列表中省略对象（通常是 blobs）。 '<过滤规则>' 可以是下列之一：
+
'--filter=blob:none'的形式可以省略所有的blob。
+
格式 '--filter=blob:limit=<n>[kmg]' 会忽略大小至少为 n 字节或单位的 blob。后缀 k、m 和 g 可用来命名 KiB、MiB 或 GiB 单位。例如，'blob:limit=1k' 与 'blob:limit=1024' 相同。
+
'--filter=object:type=(tag|commit|tree|blob)'的形式会省略所有不属于请求类型的对象。
+
表格 '--filter=sparse:oid=<blob-ish>' 使用 blob（或 blob 表达式）'<blob-ish>' 中包含的稀疏检出规范，以省略在请求的引用上进行稀疏检出时不需要的 blob。
+
'--filter=tree:<深度>' 的形式省略了所有从根树开始深度 >=<深度>（如果一个对象在所穿越的提交中位于多个深度，则为最小深度）的blobs和目录树。<深度>=0 将不包括任何目录树或 blobs，除非在命令行中明确包括（或使用 --stdin 选项时的标准输入）。<深度>=1 将只包括由 <提交> 或明确指定的对象所能到达的提交直接引用的目录树和 blobs。<深度>=2 与 <深度>=1 类似，同时也包括从明确给出的提交或目录树中移出的多一级的目录树和 blobs。
+
注意，出于安全原因，想要从文件系统上的任意路径读取的'--filter=sparse:path=<path>'形式已经被放弃了。
+
可以指定多个'--filter=' 标志来组合过滤器。只有那些被每个过滤器接受的对象才会被包括在内。
+
'--filter=combine:<filter1>+<filter2>+...<filterN>'的形式也可以用来组合几个过滤器，但这比重复'--filter'标志要难，通常没有必要。过滤器用'{plus}'连接，单个过滤器用%编码（即用URL编码）。 除了'{plus}'和'%'字符，以下字符是保留字符，也必须进行编码：`~！@#$^&*()[]{}/;",<>?`+&#39;&#96;+以及所有ASCII代码为&lt;=`0x20`的字符，其中包括空格和换行。
+
其他任意的字符也可以被编码。例如，'combined:tree:3+blob:none'和'combined:tree%3A3+blob%3Anone'是等同的。

--no-filter::
	关掉之前的任何`--filter=`参数。

--filter-provided-objects::
	过滤明确提供的对象的列表，否则，即使它们不符合任何过滤器，也会被打印出来。只对`--filter=`有用。

--filter-print-omitted::
	只对`--filter=`有用；打印出被过滤器省略的对象的列表。 对象ID的前缀是``~''字符。

--missing=<缺失行为>::
	一个调试选项，帮助未来的 "部分克隆 "开发。 这个选项指定了如何处理丢失的对象。
+
形式'--missing=error'要求rev-list在遇到丢失的对象时以错误方式停止。 这是默认动作。
+
'--missing=allow-any'的形式将允许在遇到缺失对象时继续进行对象遍历。 缺少的对象将被默默地从结果中省略掉。
+
'--missing=allow-promisor'的形式与'allow-any'相似，但只允许对预期的promisor缺失对象继续进行遍历。 意外的缺失对象将引发一个错误。
+
'--missing=print'的形式与'allow-any'相似，但也会打印出遗失对象的列表。 对象ID的前缀是"？"。
+
如果传递给遍历的一些提示丢失了，它们也将被视为丢失，并且遍历将忽略它们。但是，如果我们无法获取它们的对象 ID，将引发一个错误。

--exclude-promisor-objects::
	仅供内部使用。）在希望者边界预过滤对象的遍历。 这是与部分克隆一起使用的。 这比`--missing=allow-promisor`更强，因为它限制了遍历，而不仅仅是消除了关于丢失对象的错误。
endif::git-rev-list[]

--no-walk[=(sorted|unsorted)]::
	只显示给定的提交，但不遍历其祖先。 如果指定了范围，这一点就没有影响。如果给了参数 `unsorted`，提交会按照命令行上的顺序显示。否则（如果 `sorted` 或者没有给出参数），提交将按照提交时间的倒序显示。 不能与 `--graph` 选项结合使用。

--do-walk::
	覆盖之前的 `--no-walk` 。
endif::git-shortlog[]

ifndef::git-shortlog[]
承诺格式化
~~~~~

ifdef::git-rev-list[]
使用这些选项，linkgit:git-rev-list[1] 的作用类似于更专业的提交日志工具系列：linkgit:git-log[1]，linkgit:git-show[1]，和linkgit:git-whatchanged[1]
endif::git-rev-list[]

include::pretty-options.txt[]

--relative-date::
	`--date=relative`的同义词。

--date=<格式>::
	只对以人类可读格式显示的日期生效，例如使用`--pretty`时。`log.date`配置变量为日志命令的`--date`选项设置默认值。默认情况下，日期显示在原始时区（提交者或作者的时区）。如果`-local`被附加到格式中（例如，`iso-local`），就会使用用户的本地时区。
+
--
`--date=relative`显示相对于当前时间的日期，例如：`2小时前''。`--local`选项对`--date=relative`没有影响。

`--date=local`是`--date=default-local`的一个别名。

`--date=iso`（或 `--date=iso8601` ）以类似 ISO 8601 的格式显示时间戳。 与严格的 ISO 8601 格式的区别是：

	- 用空格代替`T`日期/时间分隔符
	- 时间和时区之间的空间
	- 时区的小时和分钟之间没有冒号

`--date=iso-strict`（或`--date=iso8601-strict`）显示严格的ISO 8601格式的时间戳。

`--date=rfc`（或`--date=rfc2822`）显示RFC 2822格式的时间戳，经常出现在电子邮件中。

`--date=short`只显示日期，而不是时间，格式为`YYYY-MM-DD`。

`--date=raw`显示日期为自纪元以来的秒数（1970-01-01 00:00:00 UTC），后面是空格，然后是时区为UTC的偏移量（一个`+`或`-`的四位数字；前两位是小时，后两位是分钟）。也就是说，就像时间戳的格式为`strftime("%s %z")`)。 请注意，`-local`选项不影响自始至终的秒数值（它总是以UTC为单位），但会切换伴随的时区值。

`--date=human`如果时区与当前时区不匹配，则显示时区，如果匹配则不打印整个日期（即对于 "今年 "的日期，跳过打印年份，但如果是最近几天的日期，也跳过整个日期本身，我们可以只说是哪个工作日）。 对于较早的日期，小时和分钟也被省略了。

`--date=unix`显示日期为Unix纪元时间戳（自1970年以来的秒数）。 与`--raw`一样，这总是以UTC为单位，因此`--local`没有影响。

`--date=format:...` 将格式 `...` 输入到系统的 `strftime` 中，%z 和 %Z 除外，它们由内部处理。 使用 `--date=format:%c`，以系统语言首选的格式显示日期。 有关格式占位符的完整列表，请参阅 `strftime` 手册。使用 `-local` 时，正确的语法是 `--date=format-local:...`。

`--date=default`是默认格式，基于ctime(3)输出。 它仅仅在一行中显示缩写的星期、缩写的月份、一月中的第几天、"HH:MM:SS "格式的小时-分钟-秒，然后是年份，除非使用本地时区，在末尾都会加上时区信息，例如`Thu Jan 1 00:00:00 1970 +0000`。
--

ifdef::git-rev-list[]
--header::
	以原始格式打印提交的内容；每条记录用NUL字符分隔。

--no-commit-header::
	抑制包含“提交”的标题行和在指定格式之前打印的对象 ID。这对内置格式没有影响；只有自定义格式会受到影响。

--commit-header::
	覆盖之前的 `--no-commit-header` 选项。
endif::git-rev-list[]

--parents::
	也可以打印提交的父类（以 "提交父类... "的形式）。 也可以启用父级改写，见上面的 "历史简化"。

--children::
	同时打印提交的子项（以 "提交子项... "的形式）。 也可以启用父级改写，见上面的 "历史简化"。

ifdef::git-rev-list[]
--timestamp::
	打印原始提交时间戳。
endif::git-rev-list[]

--left-right::
	标明提交可以从对称性差异的哪一边到达。 左边的提交以 `<` 为前缀，右边的则以 `>` 为前缀。 如果与 `--boundary` 结合，这些提交的前缀为 `-`。
+
例如，如果你有这样的拓扑结构：
+
-----------------------------------------------------------------------
	     y---b---b  branch B
	    / \ /
	   /   .
	  /   / \
	 o---x---a---a  branch A
-----------------------------------------------------------------------
+
你会得到这样的输出：
+
-----------------------------------------------------------------------
	$ git rev-list --left-right --boundary --pretty=oneline A...B

	>bbbbbbb... 3rd on b
	>bbbbbbb... 2nd on b
	<aaaaaaa... 3rd on a
	<aaaaaaa... 2nd on a
	-yyyyyyy... 1st on b
	-xxxxxxx... 1st on a
-----------------------------------------------------------------------

--graph::
	在输出的左手边绘制基于文本的提交历史图表。 这可能会导致在提交之间打印出额外的行，以便正确地绘制图形历史。 不能与`--no-walk`结合使用。
+
这可以使父代改写，见上面的'历史简化'。
+
这意味着默认情况下是`--topo-order`选项，但也可以指定`--date-order`选项。

--show-linear-break[=<阻隔>]::
	如果不使用 --graph，所有的历史分支都会被压扁，这就很难看出两个连续的提交并不属于一个线性分支。在这种情况下，该选项会在它们之间设置一个障碍。如果指定了"<barrier>"，就会显示这个字符串，而不是默认的。

ifdef::git-rev-list[]
--count::
	打印一个数字，说明有多少提交会被列出，并抑制所有其他输出。 当与 `--left-right` 选项一起使用时，会打印左和右的提交计数，用制表符分开。当与 `--cherry-mark` 选项一起使用时，从这些计数中省略补丁等价提交，而打印等价提交的计数，用制表符分隔。
endif::git-rev-list[]
endif::git-shortlog[]
