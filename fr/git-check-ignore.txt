git-check-ignore(1)
===================

NOM
---
git-check-ignore - Débogue les fichiers gitignore / exclude


SYNOPSIS
--------
[verse]
'git check-ignore' [<options>] <nom-de-chemin>...
'git check-ignore' [<options>] --stdin

DESCRIPTION
-----------

Pour chaque nom de chemin donné via la ligne de commande ou depuis un fichier via `--stdin`, vérifie si le fichier est exclu par .gitignore (ou d'autres fichiers d'entrée du mécanisme d'exclusion) et affiche le chemin s'il est exclu.

Par défaut, les fichiers suivis ne sont pas affichés du tout puisqu'ils ne sont pas soumis aux règles d'exclusion ; mais voyez `--no-index'.

OPTIONS
-------
-q, --quiet::
	Ne pas émettre de message, définir juste le statut de sortie. Ceci n'est valable qu'avec un seul chemin d'accès.

-v, --verbose::
	Au lieu d'afficher les chemins qui sont exclus, pour chaque chemin qui correspond à un motif d'exclusion, imprimer le motif d'exclusion avec le chemin. (La correspondance d'un motif d'exclusion signifie généralement que le chemin est exclu, mais si le motif commence par "`!`", il s'agit alors d'un motif négatif et sa correspondance signifie que le chemin n'est PAS exclu).
+
Pour les règles de préséance dans et entre les sources d'exclusion, voir linkgit:gitignore[5].

--stdin::
	Lire les noms de chemin depuis l'entrée standard, un par ligne, au lieu de la ligne de commande.

-z::
	Le format de sortie est modifié pour être analysable par une machine. Si `--stdin` est également donné, les chemins d'entrée sont séparés par un caractère NUL au lieu d'un caractère de saut de ligne.

-n, --non-matching::
	Afficher les chemins donnés qui ne correspondent à aucun motif. Cela n'a de sens que si `--verbose` est activé, sinon il ne serait pas possible de distinguer les chemins qui correspondent à un motif de ceux qui ne le correspondent pas.

--no-index::
	Ne pas regarder dans l'index lors des vérifications. Cela peut être utilisé pour déboguer la raison pour laquelle un chemin est devenu suivi par exemple par `git add .` et n'a pas été ignoré par les règles comme prévu par l'utilisateur ou lors du développement de motifs incluant la négation pour correspondre à un chemin précédemment ajouté avec `git add -f`.

SORTIE
------

Par défaut, tous les noms de chemin donnés qui correspondent à un motif négatif seront affichés, un par ligne. Si aucun motif ne correspond à un chemin donné, rien ne sera affiché pour ce chemin ; cela signifie que ce chemin ne sera pas ignoré.

Si `--verbose` est spécifié, la sortie est une série de lignes de la forme :

<source> <DEUX-POINTS> <num-ligne> <DEUX-POINTS> <motif> <HT> <nom-de-chemin>

<nom-de-chemin> est le chemin d'un fichier interrogé, <motif> est le motif correspondant, <source> est le fichier source du motif, et <num-ligne> est le numéro de ligne du motif dans cette source. Si le motif contenait un préfixe "`!`" ou un suffixe "`/`", il sera préservé dans la sortie. <source> sera un chemin absolu quand il se réfère au fichier configuré par `core.excludesFile`, ou relatif à la racine du dépôt quand il se réfère à `.git/info/exclude` ou à un fichier d'exclusion par répertoire.

Si `-z` est spécifié, les noms de chemin dans la sortie sont délimités par le caractère nul ; si `--verbose` est également spécifié, les caractères nuls sont également utilisés à la place des deux-points et des tabulations :

<source> <NULL> <num-ligne> <NULL> <motif> <NULL> <nome-de-chemin> <NULL>

Si `-n` ou `--non-matching` sont spécifiés, les noms de chemin non-matching seront aussi sortis, dans ce cas tous les champs dans chaque enregistrement de sortie sauf pour <nom-de-chemin> seront vides. Cela peut être utile lors d'une exécution non-interactive, de sorte que les fichiers peuvent être envoyés incrémentalement sur STDIN d'un processus check-ignore au long cours, et pour chacun de ces fichiers, STDOUT indiquera si ce fichier correspond à un motif ou non. (Sans cette option, il serait impossible de dire si l'absence de sortie pour un fichier donné signifie qu'il ne correspond à aucun motif, ou que la sortie n'a pas encore été générée).

La mise en mémoire tampon se fait comme documenté sous l'option `GIT_FLUSH` dans linkgit:git[1]. L'appelant à la charge d'éviter les blocages causés par le remplissage excessif d'un tampon d'entrée ou la lecture d'un tampon de sortie vide.

STATUT DE SORTIE
----------------

0::
	Un ou plusieurs des chemins fournis sont ignorés.

1::
	Aucun des chemins fournis n'est ignoré.

128::
	Une erreur fatale a été rencontrée.

VOIR AUSSI
----------
linkgit:gitignore[5] linkgit:git-config[1] linkgit:git-ls-files[1]

GIT
---
Fait partie de la suite linkgit:git[1]

TRADUCTION
----------
Cette  page de manuel a été traduite par Jean-Noël Avila <jn.avila AT free DOT fr> et les membres du projet git-manpages-l10n. Veuillez signaler toute erreur de traduction par un rapport de bogue sur le site https://github.com/jnavila/git-manpages-l10n .
