Génération du texte de rustine avec -p
--------------------------------------

Exécuter linkgit:git-diff[1], linkgit:git-log[1], linkgit:git-show[1], linkgit:git-diff-index[1], linkgit:git-diff-tree[1] ou linkgit:git-diff-files[1] avec l'option `-p` produit le texte de rustine. Vous pouvez personnaliser la création du texte de rustine via les variables d'environnement `GIT_EXTERNAL_DIFF` et `GIT_DIFF_OPTS` (voir linkgit:git[1]).

L'option produit quelque chose légèrement différent du format diff traditionnel :

1.   Il est précédé d'un entête "git diff" qui ressemble à ceci :

       diff --git a/fichier1 b/fichier2
+
les noms de fichiers sous `a/` et `b/` sont identiques à moins qu'il y ait eu un renommage ou une copie, même pour un création ou une suppression, `/dev/null` _n'est pas_ utilisé à la place des noms de fichier `a/` ou`b/`.
+
Quand un renommage ou un copie est décrit, `fichier1` et `fichier2` indiquent les noms du fichier source et du fichier cible, respectivement.

2.   Suivent un ligne ou plus d'entête étendu :

       old mode <mode>
       new mode <mode>
       deleted file mode <mode>
       new file mode <mode>
       copy from <chemin>
       copy to <chemin>
       rename from <chemin>
       rename to <chemin>
       similarity index <nombre>
       dissimilarity index <nombre>
       index <empreinte>..<empreinte> <mode>
+
Les modes de fichier sont affichés comme des nombres à 6 chiffres en octal incluant le type de fichier et les bits de permission.
+
Les noms de chemin dans les entêtes étendus n'incluent pas les préfixes `a/` et `b/`.
+
L'index de similarité et le pourcentage de lignes inchangées et l'index de dissimilarité est le pourcentage de lignes changées. Il est arrondi à l'entier inférieur, suivi du signe pourcent. Une valeur d'index de similarité à 100 % correspond donc à deux fichiers identiques, tandis qu'un index de dissimilarité de 100 % signifie qu'aucune ligne de l'ancien fichier ne se retrouve dans le nouveau fichier.
+
La ligne d'index inclut les noms des objets blob avant et après la modification. Le <mode> est inclus si le mode du fichier n'est pas modifié ; sinon, des lignes séparées indiquent l'ancien et le nouveau mode.

3.  Les noms de chemin avec des caractères « inhabituels » sont cités comme expliqué pour la variable de configuration `core.quotePath` (voir linkgit:git-config[1]).

4.  Tous les fichiers `fichier1` de la sortie font référence à des fichiers avant la validation, et tous les fichiers `fichier2` font référence aux fichiers après la validation. Il est incorrect d'appliquer chaque modification à chaque fichier séquentiellement. Par exemple, cette rustine échange a et b :

      diff --git a/a b/b
      rename from a
      rename to b
      diff --git a/b b/a
      rename from b
      rename to a


Format de diff combiné
----------------------

Toute commande générant un diff accepte l'option `-c` ou `-cc` pour produire un 'diff combiné' lors de l'affichage d'une fusion. C'est le format par défaut pour afficher les fusions avec linkgit:git-diff[1] ou linkgit:git-show[1]. Notez aussi que vous pouvez ajouter l'option `-m` à toutes ces commandes pour forcer la génération des diffs avec un parent individuel d'une fusion.

Un format de 'diff combiné' ressemble à ceci :

------------
diff --combined describe.c
index fabadb8,cc95eb0..4866510
--- a/describe.c
+++ b/describe.c
@@@ -98,20 -98,12 +98,20 @@@
	return (a_date > b_date) ? -1 : (a_date == b_date) ? 0 : 1;
  }

- static void describe(char *arg)
 -static void describe(struct commit *cmit, int last_one)
++static void describe(char *arg, int last_one)
  {
 +	unsigned char sha1[20];
 +	struct commit *cmit;
	struct commit_list *list;
	static int initialized = 0;
	struct commit_name *n;

 +	if (get_sha1(arg, sha1) < 0)
 +		usage(describe_usage);
 +	cmit = lookup_commit_reference(sha1);
 +	if (!cmit)
 +		usage(describe_usage);
 +
	if (!initialized) {
		initialized = 1;
		for_each_ref(get_name);
------------

1.   Il est précédé d'un entête "git diff", qui ressemble à ceci (quand l'option `-c` est utilisée) :

       diff --combined file
+
ou à ceci (lorsque l'option `--cc` est utilisée) :

       diff --cc file

2.   Il est suivi par une ligne d'entête étendu ou plus (cet exemple montre une fusion avec deux parents) :

       index <empreinte>,<empreinte>..<empreinte>
       mode <mode>,<mode>..<mode>
       new file mode <mode>
       deleted file mode <mode>,<mode>
+
La ligne `mode <mode>,<mode>..<mode>` n'apparaît que si au moins un des modes est différent du reste. Les entêtes étendus avec l'information à propos des déplacements détectés de contenu (détection de renommages et de copies) sont conçus pour fonctionner avec le diff de deux <arbre-esques> et ne sont pas utilisés dans le format de diff combiné.

3.   Il est suivi par un entête de deux lignes fichier-source/fichier-cible

       --- a/fichier
       +++ b/fichier
+
Similaire à l'entête à deux lignes pour le format diff unifié traditionnel, `/dev/null` est utilisé pour indiquer un fichier créé ou supprimé.
+
Cependant, si l'option --combined-all-paths est fournie, au lieu des deux lignes de fichier-source/fichier-cible, vous obtenez un en-tête de N+1 lignes de fichier-source/fichier-cible, où N est le nombre de parents dans le commit de fusion

       --- a/fichier
       --- a/fichier
       --- a/fichier
       +++ b/fichier
+
Ce format étendu peut être utile si la détection de renommage ou de copie est active, pour vous permettre de voir le nom original du fichier dans différents parents.

4.   Le format d'entête de section est modifié pour empêcher l'utilisation accidentelle avec `patch -p1`. Le format de diff combiné a été créé pour les revues des modifications de commits de fusions, et n'était pas destiné à être appliqué. La modification est similaire à la modification dans l'entête étendu d'index :

       @@@ <intervalle-de-fichier-source> <intervalle-de-fichier-source> <intervalle-de-fichier-cible> @@@
+
Il y a (nombre de parents + 1) caractères `@` dans l'entête de section pour le format de diff combiné.

À la différence du format diff 'unifié' traditionnel qui montre deux fichiers A et B avec une seule colonne qui a un préfixe `-` (moins -- apparaît dans A mais supprimé dans B), `+` (plus -- manquant dans A mais ajouté dans B), ou `" "` (espace -- non modifié), ce format compare un fichier ou plus fichier1, fichier2,… avec un fichier X, et affiche comment X diffère de chaque fichierN. Une colonne pour chaque fichierN est insérée dans la sortie pour montrer comment la ligne de X est différente de la ligne correspondante de celui-ci.

Un caractère `-` dans la colonne N signifie que la ligne apparaît dans fichierN mais pas dans le résultat. Un caractère `+` dans la colonne N signifie que la ligne apparaît dans le résultat, et fichierN ne l'a pas (en d'autres termes, la ligne a été ajoutée du point de vue de ce parent).

Dans l'exemple de sortie ci-dessus, la signature de la fonction a été changée depuis les deux fichiers (d'où les deux suppressions `-` depuis fichier1 et fichier2, plus `++` pour signifier qu'une ligne qui a été ajoutée n'apparaît ni dans fichier1 ni dans fichier2). De plus, huit autres lignes sont identiques depuis fichier1 mais n'apparaissent pas dans fichier2 (et sont donc préfixées par `+`).

Quand affiché par `git diff-tree -c`, les parents du commit de fusion sont comparés avec le résultat de fusion (c-à-d fichier1..fichierN sont les parents) ; Quand affiché par `git diff-files -c`, les deux parents de fusion non résolue sont comparés avec le fichier dans l'arbre de travail (c-à-d fichier1 est stage 2, « notre version », fichier2 est stage 3, « leur version »).
