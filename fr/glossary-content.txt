[[def_alternate_object_database]]base de données d'objets substituts::
	Grâce au mécanisme des substituts, un <<def_repository,dépôt>> peut hériter d'une partie de sa <<def_object_database,base de données d'objets>> d'une autre base de données d'objets, qui est appelée un "substitut".

[[def_bare_repository]]dépôt nu::
	Un dépôt nu est normalement un <<def_directory,répertoire>> nommé de manière appropriée avec un suffixe `.git` qui n'a pas de copie locale de tous les fichiers sous contrôle de révision. C'est-à-dire que tous les fichiers d'administration et de contrôle de Git qui seraient normalement présents dans le sous-répertoire caché `.git` sont directement présents dans le répertoire `repository.git` à la place, et aucun autre fichier n'est présent et extrait. Habituellement, les éditeurs de dépôts publics mettent à disposition des dépôts nus.

[[def_blob_object]]objet blob::
	<<def_object,Objet>> non typé, par exemple le contenu d'un fichier.

[[def_branch]]branche::
	Une "branche" est une ligne de développement. Le <<def_commit,commit>> le plus récent sur une branche est appelé sommet de cette branche. Le sommet de la branche est <<def_ref,référencé>> par une <<def_head,tête>> de branche, qui avance au fur et à mesure que des développements supplémentaires sont effectués sur la branche. Un seul <<def_repository,dépôt>> Git peut suivre un nombre arbitraire de branches, mais votre <<def_working_tree,arbre de travail>> est associé à une seule d'entre elles (la branche "actuelle" ou "extraite"), et <<def_HEAD,HEAD>> pointe vers cette branche.

[[def_cache]]cache::
	Obsolète pour : <<def_index,index>>.

[[def_chain]]chaîne::
	Une liste d'objets, où chaque <<def_object,objet>> de la liste contient une référence à son successeur (par exemple, le successeur d'un <<def_commit,commit>> pourrait être un de ses <<def_parent,parents>>).

[[def_changeset]]ensemble de modifications::
	BitKeeper/cvsps parlent de "<<def_commit,commit>>". Puisque Git ne stocke pas les modifications, mais les états, cela n'a pas vraiment de sens d'utiliser le terme "ensemble de modifications" avec Git.

[[def_checkout]]extraction::
	L'action de mettre à jour tout ou partie de l'<<def_working_tree,arbre de travail>> avec un <<def_tree_object,objet arbre>> ou un <<def_blob_object,blob>> de la <<def_object_database,base de données des objets>>, et en mettant à jour l' <<def_index,index>> et la <<def_HEAD,HEAD>> si l'ensemble de l'arbre de travail a été dirigé vers une nouvelle <<def_branch,branche>>.

[[def_cherry-picking]]picorage::
	Dans le jargon <<def_SCM,SCM>>, "picorage" signifie choisir un sous-ensemble de modifications dans une série de modifications (généralement des commits) et les enregistrer comme une nouvelle série de modifications sur une base de code différente. Dans Git, cela est effectué par la commande "git cherry-pick" pour extraire la modification introduite par un <<def_commit,commit>> existant et pour l'enregistrer en fonction du sommet de la <<def_branch,branche>> actuelle en tant que nouveau commit.

[[def_clean]]propre::
	Un <<def_working_tree,arbre de travail>> est propre, s'il correspond à la <<def_revision,révision>> référencée par la <<def_head,tête>> courante. Voir aussi "<<def_dirty,sale>>".

[[def_commit]]commit::
	En tant que substantif : Un point unique dans l'historique de Git ; l'historique complet d'un projet est représenté comme un ensemble de commits interconnectés. Le mot "commit" est souvent utilisé par Git aux mêmes endroits où d'autres systèmes de contrôle de révision utilisent les mots "revision" ou "version". Également utilisé comme raccourci pour <<def_commit_object,objet commit>>.
+
Comme verbe : le terme "valider" est utilisé en français. L'action de stocker un nouvel instantané de l'état du projet dans l'historique Git, en créant un nouveau commit représentant l'état actuel de l'<<def_index,index>> et en avançant la <<def_HEAD,HEAD>> pour pointer vers le nouveau commit.

[[def_commit_graph_general]]concept, représentations et utilisation du graphe de commit::
	Un synonyme de la structure <<def_DAG,DAG>> (*Directed Acyclic Graph* : graphe dirigé acyclique) formée par les commits de la base de données des objets, <<def_ref,référencés>> par les sommets de branches, en utilisant leur <<def_chain,chaîne>> de commits liés. Cette structure est le graphe de commits définitif. Le graphe peut être représenté d'autres façons, par exemple par le <<def_commit_graph_file,fichier "commit-graph">>.

[[def_commit_graph_file]]fichier de graphe de commit::
	Le fichier "commit-graph" (normalement avec un trait d'union) est une représentation supplémentaire du <<def_commit_graph_general,graphe de commit>> qui accélère les parcours du graphe de commit. Le fichier "commit-graph" est stocké soit dans le répertoire .git/objects/info, soit dans le répertoire info d'une base de données d'objets alternative.

[[def_commit_object]]objet commit::
	Un <<def_object,objet>> qui contient les informations sur une <<def_revision,révision>> particulière, telles que ses <<def_parent,parents>>, validateur, auteur, date et le <<def_tree_object,objet arbre>> qui correspond au <<def_directory,répertoire>> racine de la révision stockée.

[[def_commit-ish]]commit-esque (également commitesque)::
	Un <<def_commit_object,objet commit>> ou un <<def_object,objet>> qui peut être <<def_dereference,déréférencé>> récursivement vers un objet commit. Les éléments suivants sont tous des objets commit : un objet commit, un <<def_tag_object,objet étiquette>> qui pointe vers un objet commit, un objet étiquette qui pointe vers un objet étiquette qui pointe vers un objet commit, etc.

[[def_core_git]]cœur Git::
	Structures de données fondamentales et utilitaires de Git. N'expose que des outils limités de gestion du code source.

[[def_DAG]]DAG::
	Graphe acyclique dirigé ('Directed Acyclique Graph"). Les <<def_commit_object,objets commit>> forment un graphe acyclique dirigé, car ils ont des parents (dirigés), et le graphe des objets commit est acyclique (il n'y a pas de <<def_chain,chaîne>> qui commence et se termine par le même <<def_object,objet>>).

[[def_dangling_object]]objet en suspens::
	Un <<def_unreachable_object,objet inatteignable>> qui n'est pas <<def_reachable,joignable>> même à partir d'autres objets inatteignables ; un objet en suspens n'a aucune référence vers lui à partir de n'importe quelle référence ou <<def_object,objet>> dans le <<def_repository,dépôt>>.

[[def_dereference]]déréférence::
	Se référant à une <<def_symref,référence symbolique>>  : l'action d'accéder à la <<def_ref,référence>> pointée par une réf symbolique. Le déréférencement récursif implique de répéter le processus susmentionné sur la réf résultante jusqu'à ce qu'une référence non symbolique soit trouvée.
+
Se référant à un <<def_tag_object,objet étiquette>> : l'action d'accéder à l'<<def_object,objet>> pointé par une étiquette. Les étiquettes sont référencées de façon récursive en répétant l'opération sur l'objet du résultat jusqu'à ce que le résultat ait le <<def_object_type,type d'objet>> spécifié (le cas échéant) ou tout type d'objet non "étiquette". Un synonyme de "déréférencer récursivement" dans le contexte des étiquettes est <<def_peel,peler>>".
+
Se référant à un <<def_commit_object,objet commit>> : action d'accéder à l'objet arbre du commit. Les commits ne peuvent pas être déréférés de façon récursive.
+
Sauf indication contraire, "déréférencer" tel qu'il est utilisé dans le contexte des commandes ou des protocoles Git est implicitement récursif.

[[def_detached_HEAD]]HEAD détachée::
	Normalement, la <<def_HEAD,HEAD>> stocke le nom d'une <<def_branch,branche>> et les commandes qui opèrent sur l'historique que représente le HEAD opèrent sur l'historique menant au sommet de la branche vers laquelle pointe la HEAD. Cependant, Git vous permet également d' <<def_checkout,extraire>> un <<def_commit,commit>> arbitraire qui n'est pas nécessairement le sommet d'une branche particulière. La HEAD dans un tel état est appelé "détachée".
+
Notez que les commandes qui opèrent sur l'historique de la branche actuelle (par exemple `git commit` pour construire un nouvel historique par dessus) fonctionnent toujours même si la HEAD est détachée. Elles mettent à jour la HEAD pour pointer à l'extrémité de l'historique mis à jour sans affecter aucune branche. Les commandes qui mettent à jour ou demandent des informations _sur_ la branche courante (par exemple `git branch --set-upstream-to` qui définit avec quelle branche de suivi à distance la branche actuelle s'intègre) ne fonctionnent évidemment pas, car il n'y a pas de branche actuelle (réelle) à demander dans cet état.

[[def_directory]]répertoire::
	La liste que vous obtenez avec "ls" :-)

[[def_dirty]]sale::
	Un <<def_working_tree,arbre de travail>> est dit "sale" s'il contient des modifications qui n'ont pas été <<def_commit,validées>> dans la <<def_branch,branche>> actuelle.

[[def_evil_merge]]fusion maléfique::
	Une fusion maléfique est une <<def_merge,fusion>> qui introduit des modifications qui n'apparaissent dans aucun des <<def_parent,parents>>.

[[def_fast_forward]]avance rapide::
	Une avance rapide est un type spécial de <<def_merge,fusion>> où vous avez une <<def_revision,révision>> et vous "fusionnez" les modifications d'une autre <<def_branch,branche>> qui se trouvent être descendantes de ce que vous avez. Dans ce cas, vous ne faites pas un nouveau <<def_commit,commit>> de <<def_merge,fusion>> mais vous mettez simplement à jour votre branche pour qu'elle pointe vers la même révision que la branche que vous fusionnez. Cela se produit fréquemment sur une <<def_remote_tracking_branch,branche de suivis à distance>> d'un <<def_repository,dépôt>> distant.

[[def_fetch]]récupérer::
	Récupérer une <<def_branch,branche>> signifie obtenir la <<def_head_ref,référence head>> de la branche à partir d'un <<def_repository,dépôt>> distant, pour trouver quels objets manquent dans la <<def_object_database,base de données d'objets>> locale, et les obtenir également. Voir aussi linkgit:git-fetch[1].

[[def_file_system]]système de fichiers::
	Linus Torvalds a conçu à l'origine Git pour être un système de fichiers en espace utilisateur, c'est-à-dire l'infrastructure pour contenir les fichiers et les répertoires. Cela garantissait l'efficacité et la rapidité de Git.

[[def_git_archive]]Archives Git::
	Synonyme de <<def_repository,dépôt>> (pour les utilisateurs d'Arch).

[[def_gitfile]]fichier-git::
	Un simple fichier `.git` à la racine d'un arbre de travail qui pointe vers le répertoire qui est le vrai dépôt. Pour une utilisation appropriée voir linkgit:git-worktree[1] ou linkgit:git-submodule[1]. Pour la syntaxe voir linkgit:gitrepository-layout[5].

[[def_grafts]]greffes::
	Les greffes permettent de relier deux lignes de développement différentes en enregistrant de fausses informations d'ascendance pour les commits. De cette façon, vous pouvez faire croire à Git que l'ensemble des <<def_parent,parents>> d'un <<def_commit,commit>> est différent de ce qui a été enregistré lors de la création du commit. Configuré via le fichier `.git/info/grafts`.
+
Notez que le mécanisme de greffes est dépassé et peut conduire à des problèmes de transfert d'objets entre dépôts ; voir linkgit:git-replace[1] pour un système plus flexible et plus robuste pour faire la même chose.

[[def_hash]]hachage::
	Dans le contexte de Git, synonyme de <<def_object_name,nom de l'objet>>.

[[def_head]]tête::
	Une <<def_ref,référence nommée>> au <<def_commit,commit>> au sommet d'une <<def_branch,branche>>. Les têtes sont stockées dans un fichier dans le répertoire `$GIT_DIR/refs/heads/`, sauf lors de l'utilisation de refs empaquetées. (Voir linkgit:git-pack-refs[1].)

[[def_HEAD]]HEAD::
	La <<def_branch,branche>> actuelle. Plus en détail : Votre <<def_working_tree, arbre de travail>> est normalement dérivé de l'état de l'arbre auquel fait référence HEAD. HEAD est une référence à l'un des <<def_head,têtes>> de votre dépôt, sauf si vous utilisez une <<def_detached_HEAD,HEAD détachée>>, auquel cas elle fait directement et librement référence à un commit.

[[def_head_ref]]réf. tête::
	Un synonyme de <<def_head,tête>>.

[[def_hook]]crochet::
	Au cours de l'exécution normale de plusieurs commandes Git, des appels sont faits à des scripts optionnels qui permettent à un développeur d'ajouter des fonctionnalités ou des vérifications. Typiquement, les crochets permettent de pré-vérifier une commande et de l'interrompre éventuellement, et permettent une post-notification une fois l'opération effectuée. Les scripts de crochet se trouvent dans le répertoire `$GIT_DIR/hooks/`, et sont activés en retirant simplement le suffixe `.sample` du nom du fichier. Dans les versions précédentes de Git, vous deviez les rendre exécutables.

[[def_index]]index::
	Une collection de fichiers contenant des informations sur les statuts, dont le contenu est stocké sous forme d'objets. L'index est une version stockée de votre <<def_working_tree,arbre de travail>>. À vrai dire, il peut aussi contenir une deuxième, voire une troisième version d'un arbre de travail, qui sont utilisées lors de <<def_merge,fusions>>.

[[def_index_entry]]entrée d’index::
	Les informations concernant un fichier particulier, stockées dans l'<<def_index,index>>. Une entrée d'index peut être non-fusionnée, si une <<def_merge,fusion>> a été lancée, mais pas encore terminé (c'est-à-dire si l'index contient plusieurs versions de ce fichier).

[[def_master]]master::
	La <<def_branch,branche>> de développement par défaut. Chaque fois que vous créez une <<def_repository,dépôt>> Git, une branche nommée "master" est créée et devient la branche active. Dans la plupart des cas, elle contient le développement local, bien que cela soit purement par convention et ne soit pas nécessaire.

[[def_merge]]fusionner::
	Apporter le contenu d'une autre <<def_branch,branche>> (éventuellement d'un <<def_repository,dépôt>> externe) dans la branche actuelle. Dans le cas où la branche fusionnée provient d'un dépôt différent, cela est fait en commençant par <<def_fetch,récupérer>> la branche distante et en fusionnant ensuite le résultat dans la branche actuelle. Cette combinaison d'opérations de récupération et de fusion est appelée une <<def_pull,tirage>>. La fusion est effectuée par un processus automatique qui identifie les modifications apportées depuis que les branches ont divergé, puis applique toutes ces modifications ensemble. Dans les cas où les modifications entrent en conflit, une intervention manuelle peut être nécessaire pour effectuer la fusion.
+
Comme nom (fusion) : à moins qu'il ne s'agisse d'une <<def_fast_forward,avance rapide>>, une fusion réussie entraîne la création d'un nouveau <<def_commit,commit>> représentant le résultat de la fusion, et ayant comme <<def_parent,parents>> les sommets des <<def_branch,branches>> fusionnées. Ce commit est appelé un "commit de fusion" , ou parfois simplement une "fusion".

[[def_object]]objet::
	L'unité de stockage dans Git. Il est identifié de manière unique par le <<def_SHA1,SHA-1>> de son contenu. Par conséquent, un objet ne peut pas être modifié.

[[def_object_database]]base de données d'objets::
	Stocke un ensemble d' "objets", et un <<def_object,objet>> individuel est identifié par son <<def_object_name,nom d'objet>>. Les objets se trouvent généralement dans `$GIT_DIR/objects/`.

[[def_object_identifier]]identifiant d'objet (oid)::
	Synonyme de <<def_object_name,nom d'objet>>.

[[def_object_name]]nom d'objet::
	L'identifiant unique d'un <<def_object,objet>>. Le nom de l'objet est généralement représenté par une chaîne hexadécimale de 40 caractères. Aussi appelé familièrement <<def_SHA1,SHA-1>>.

[[def_object_type]]type d'objet::
	Un identificateur parmi "<<def_commit_object,commit>>", "<<def_tree_object,arbre>> (tree)", "<<def_tag_object,étiquette>> (tag)" ou "<<def_blob_object,blob>>" décrivant le type d'un <<def_object,objet>>.

[[def_octopus]]pieuvre::
	Pour <<def_merge,fusionner>> plus de deux <<def_branch,branches>>.

[[def_orphan]]orphelin::
	L'acte de se mettre sur une <<def_branch,branche>> qui n'existe pas encore (c.-à-d. une branche <<def_unborn, non-née>>). Après une telle opération, le commit créé devient un commit sans parent, commençant un nouvel historique.

[[def_origin]]origine::
	Le <<def_repository,dépôt>> amont par défaut. La plupart des projets ont au moins un projet amont qu'ils suivent. Par défaut, le nom 'origin' est utilisé à cette fin. Les nouvelles mises à jour amont seront récupérées dans des <<def_remote_tracking_branch,branches de suivi à distance>> nommées origin/nom-de-la-branche-amont, que vous pouvez voir en utilisant `git branch -r`.

[[def_overlay]]superposition::
	Ne fait que mettre à jour et ajouter des fichiers dans le répertoire de travail, mais ne les supprime pas, de la même manière que 'cp -R' mettrait à jour le contenu du répertoire de destination. C'est le mode par défaut de l'<<def_checkout,extraction>> lors de l'extraction de fichiers depuis l'<<def_index,index>> ou un <<def_tree-ish,arbresque>>. En revanche, le mode sans superposition supprime également les fichiers suivis qui ne sont pas présents dans la source, de manière similaire à 'rsync --delete'.

[[def_pack]]paquet::
	Un ensemble d'objets qui ont été compressés en un seul fichier (pour gagner de l'espace ou pour les transmettre efficacement).

[[def_pack_index]]index du paquet::
	La liste des identifiants, et d'autres informations, des objets dans un <<def_pack,paquet>>, pour aider à accéder efficacement au contenu d'un paquet.

[[def_pathspec]]spéc-de-chemin::
	Motif utilisé pour limiter les chemins dans les commandes Git.
+
Les spécifications de chemin sont utilisées sur la ligne de commande de "git ls-files", "git ls-tree", "git add", "git grep", "git diff", "git checkout" et de nombreuses autres commandes pour limiter la portée des opérations à un sous-ensemble de l'arbre ou de l'arbre de travail. Consultez la documentation de chaque commande pour savoir si les chemins sont relatifs au répertoire courant ou au premier niveau. La syntaxe de spécificateurs de chemin est la suivante :
+
--

* tout chemin correspond à lui-même
* le spécificateur de chemin jusqu'à la dernière barre oblique représente un préfixe de répertoire. La portée de ce spécificateur de chemin est limitée à ce sous-arbre.
* le reste du spécificateur de chemin est un motif pour le reste du nom de chemin. Les chemins relatifs au préfixe du répertoire seront comparés à ce motif en utilisant fnmatch(3) ; en particulier, '*' et '?' _peuvent_ correspondre aux séparateurs de répertoire.

--
+
Par exemple, Documentation/*.jpg correspondra à tous les fichiers .jpg du sous-arbre Documentation, y compris Documentation/chapitre_1/figure_1.jpg.
+
Un spécificateur de chemin qui commence par un deux-points `:` a une signification particulière. Dans la forme courte, le deux-points de tête `:` sont suivis par zéro ou plusieurs lettres de la "signature magique" (qui se termine éventuellement par un autre deux-points `:`), et le reste est le motif à faire correspondre au chemin. La "signature magique" est constituée de symboles ASCII qui ne sont ni des caractères alphanumériques, ni des glob, ni des caractères spéciaux de regex, ni des deux-points. Le deux-points facultatif qui termine la "signature magique" peut être omis si le motif commence par un caractère qui n'appartient pas au jeu de symboles de la "signature magique" et qui n'est pas un deux-points.
+
Dans la forme longue, le deux-points de tête `:` est suivi d'une parenthèse ouverte `(`, d'une liste de zéro ou plus de "mots magiques" séparée par des virgules, et d'une parenthèse fermée `)`, et le reste est le motif à comparer au chemin.
+
Un spécificateur de chemin avec seulement un deux-points signifie "il n'y a pas de spécificateur de chemin". Cette forme ne doit pas être combinée avec d'autres spécificateurs de chemin.
+
--
top;;
	Le mot magique `top` (signature magique : `/`) fait correspondre le motif à partir de la racine de l'arbre de travail, même si vous exécutez la commande depuis un sous-répertoire.

literal;;
	Les caractères génériques dans le motif tels que `*` ou `?` sont traités comme des caractères littéraux.

icase;;
	Correspondance insensible à la casse.

glob;;
	Git traite le motif comme un glob shell qui peut être utilisé par fnmatch(3) avec l'option FNM_PATHNAME : les caractères génériques du motif ne correspondent pas à un / dans le chemin d'accès. Par exemple, "Documentation/{asterisk}.html" ; correspond à "Documentation/git.html" ; mais pas à "Documentation/ppc/ppc.html" ; ou à "tools/perf/Documentation/perf.html" ;.
+
Deux astérisques consécutifs ("`**`") dans les motifs comparés au nom de chemin complet peuvent avoir une signification spéciale :

 - Un "`**`" suivi d'une barre oblique signifie une correspondance dans tous les répertoires. Par exemple, "`**/foo`" correspond au fichier ou au répertoire "`foo`" n'importe où, comme le motif "`foo`". "`**/foo/bar`" correspond au fichier ou au répertoire "`bar`" n'importe où, directement sous le répertoire "`foo`".

 - Un "`/**`" de queue correspond à tout ce qui se trouve à l'intérieur. Par exemple, "`abc/**`" correspond à tous les fichiers du répertoire "abc", relativement à l'emplacement du fichier `.gitignore`, avec une profondeur infinie.

 - Une barre oblique suivie de deux astérisques consécutifs puis d'une barre oblique correspond à zéro ou plusieurs répertoires. Par exemple, "`a/**/b`" correspond à "`a/b`", "`a/x/b`", "`a/x/y/b`" et ainsi de suite.

 - Les autres astérisques consécutifs sont considérés comme non valides.
+
La correspondance globale est incompatible avec la correspondance littérale.

attr;;
Après `attr:` vient une liste, séparée par des espaces, d'« exigences d'attribut », qui doivent tous être satisfaits pour que le chemin soit considéré comme une correspondance ; ceci est en plus de la correspondance habituelle des motifs non-magiques de spécificateur de chemin. Voir linkgit:gitattributes[5].
+
Chacun des attributs requis pour le chemin prend l'une de ces formes :

- "`ATTR`" exige que l'attribut `ATTR` soit défini.

- "`-ATTR`" exige que l'attribut `ATTR` soit désactivé.

- "`ATTR=VALEUR`" exige que l'attribut `ATTR` soit défini comme la chaîne de caractères `VALEUR`.

- "`!ATTR`" exige que l'attribut `ATTR` soit non spécifié.
+
Notez que lors de la correspondance avec un objet arbre, les attributs sont toujours obtenus à partir de l'arbre de travail, et non de l'objet arbre donné.

exclude;;
	Après qu'un chemin corresponde à un spécificateur de chemin non exclu, il sera parcouru par tous les spécificateurs de chemin exclus (signature magique : `!` ou son synonyme `^`). S'il correspond, le chemin est ignoré. S'il n'y a pas de chemin d'accès non exclu, l'exclusion est appliquée au résultat comme si elle était invoquée sans spécificateur de chemin.
--

[[def_parent]]parent::
	Un <<def_commit_object,objet commit>> contient une liste (éventuellement vide) du ou des prédécesseurs logiques dans la ligne de développement, c'est-à-dire ses parents.

[[def_peel]]peler::
	L'action de récursivement <<def_dereference,déréférencer>> un <<def_tag_object,objet étiquette>>.

[[def_pickaxe]]pioche::
	Le terme <<def_pickaxe,pioche>> fait référence à une option des routines diffcore qui aide à sélectionner les modifications qui ajoutent ou suppriment une chaîne de texte donnée. Avec l'option `--pickaxe-all`, elle peut être utilisée pour afficher la totalité des <<def_changeset,ensembles de modifications>> qui ont introduit ou supprimé, disons, une ligne de texte particulière. Voir linkgit:git-diff[1].

[[def_plumbing]]plomberie::
	Nom mignon pour <<def_core_git, core Git>>.

[[def_porcelain]]porcelaine::
	Nom mignon pour les programmes et les suites de programmes dépendant de <<def_core_git, core Git>>, présentant une interface de haut niveau au noyau Git. Les porcelaines exposent une interface plus <<def_SCM, SCM>> que la <<def_plumbing, la plomberie>>.

[[def_per_worktree_ref]]référence par-arbre-de-travail::
	Les références qui sont par-<<def_worktree,arbre-de-travail>>, plutôt que globales. Il ne s'agit actuellement que de <<def_HEAD,HEAD>> et de toutes les références qui commencent par `refs/bisect/`, mais pourraient ultérieurement inclure d'autres références inhabituelles.

[[def_pseudoref]]pseudoref::
	Une réf qui a une sémantique différente des réfs normales. Ces réfs peuvent être accédées par des commandes Git normales mais peuvent pas être écrites par des commandes comme linkgit:git-update-ref[1].
+
Les pseudo-réfs suivantes sont connues de Git :

 - `FETCH_HEAD` est écrite par linkgit:git-fetch[1] ou linkgit:git-pull[1]. Elle peut faire référence à plusieurs identifiants d'objets. Chaque identifiant d'objet est annoté avec des métadonnées indiquant l'endroit d'où il a été récupéré et son statut de récupération.

 - `MERGE_HEAD` est écrit par linkgit:git-merge[1] lors de la résolution des conflits de fusion. Il contient tous les identifiants de commit qui sont fusionnés.

[[def_pull]]tirage, tirer::
	Tirer une <<def_branch,branche>> signifie la <<def_fetch, récupérer>> et la <<def_merge, fusionner>>. Voir aussi linkgit:git-pull[1].

[[def_push]]pousser::
	Pousser une <<def_branch, branche>> signifie obtenir la <<def_head_ref, la référence de tête>> à partir d’un <<def_repository, d’un dépôt>> distant, savoir s’il s’agit d’un ancêtre de la référence de tête locale de la branche et, dans ce cas, placer tous les objets, qui sont <<def_reachable, accessibles>> de la référence de tête locale et qui sont manquants dans le dépôt distant, dans la <<def_object_database, la base de données d’objets>> distante et mettre à jour la référence de tête distante. Si la <<def_head, la tête>> distante n’est pas un ancêtre de la tête locale, la poussée échoue.

[[def_reachable]]accessible::
	Tous les ancêtres d’un <<def_commit, commit>> donné sont dits « accessibles » à partir de ce commit. Plus généralement, un <<def_object, objet>> est accessible depuis un autre si nous pouvons atteindre l’un de l’autre par une <<def_chain, chaîne>> qui suit les <<def_tag, étiquettes>> à tout ce qu’ils marquent, les <<def_commit_object,commits >> à leurs parents ou arbres, et les <<def_tree_object, arbres>> aux arbres ou les <<def_blob_object, blobs>> qu’ils contiennent.

[[def_reachability_bitmap]]bitmaps d'accessibilité::
	Les bitmaps d'accessibilité stockent des informations sur l'<<def_reachable,accessibilité>> d'un ensemble sélectionné de commits dans un fichier paquet, ou un index multi-paquet (MIDX), pour accélérer la recherche d'objets. Les bitmaps sont stockés dans un fichier ".bitmap". Un dépôt peut avoir au maximum un fichier bitmap en cours d'utilisation. Le fichier bitmap peut appartenir soit à un paquet, soit à l'index multi-paquet du dépôt (s'il existe).

[[def_rebase]]rebaser, rebasage::
	Réappliquer une série de modifications d’une <<def_branch,branche>> à une autre base et réinitialiser la <<def_head,tête>> de cette branche au résultat.

[[def_ref]]réf, référence::
	Un nom qui pointe vers un <<def_object_name, nom d’objet>> ou une autre réf (cette dernière est appelée <<def_symref, réf symbolique>>). Pour plus de commodité, une réf peut parfois être abrégée lorsqu’elle est utilisée comme argument pour une commande Git ; voir linkgit:gitrevisions[7] pour plus de détails. Les références sont stockées dans le <<def_repository,dépôt>>.
+
L'espace de référence est hiérarchique. Les noms réf doivent soit commencer par `refs/` ou être situés dans la racine de la hiérarchie. Pour ce dernier, leur nom doit suivre ces règles :
+
 - Le nom se compose uniquement de caractères majuscules ou de soulignements.

 - Le nom se termine par "`_HEAD`" ou est égal à "`HEAD`".
+
Il y a quelques réfs irrégulières dans la racine de la hiérarchie qui ne correspondent pas à ces règles. La liste suivante est exhaustive et ne peut être étendue à l'avenir :
+
 - `AUTO_MERGE`

 - `BISECT_EXPECTED_REV`

 - `NOTES_MERGE_PARTIAL`

 - `NOTES_MERGE_REF`

 - `MERGE_AUTOSTASH`
+
Différentes sous-hiérarchies sont utilisées à des fins différentes. par exemple, la hiérarchie `refs/heads/` est utilisée pour représenter les branches locales) alors que la hiérarchie `refs/tags` est utilisée pour représenter les balises locales.

[[def_reflog]]reflog::
	Un reflog montre l'« historique » local d'une référence. En d'autres termes, il peut vous dire quelle était la 3ème dernière révision dans _ce_ dépôt, et quel était l'état actuel dans _ce_ dépôt, hier à 21h14. Voir linkgit:git-reflog[1] pour plus de détails.

[[def_refspec]]refspec::
	Un "refspec" est utilisé par <<def_fetch,fetch>> et <<def_push,push>> pour décrire la correspondance entre le <<def_ref,réf>> distant et le réf local. Voir linkgit:git-fetch[1] ou linkgit:git-push[1] pour les détails.

[[def_remote]]dépôt distant::
	Un <<def_repository,dépôt>> qui est utilisé pour suivre le même projet mais qui réside ailleurs. Pour communiquer avec les distants, voir <<def_fetch,recupérer>> ou <<def_push,poussée>>.

[[def_remote_tracking_branch]]branche de suivi à distance::
	Une <<def_ref,réf>> qui est utilisée pour suivre les changements d'un autre <<def_repository,dépôt>>. Elle ressemble typiquement à 'refs/remotes/foo/bar' (indiquant qu'elle suit une branche nommée 'bar' dans un dépôt distant nommé 'foo'), et correspond au côté droit d'un <<def_refspec,refspec>> configuré. Une branche de suivi à distance ne doit pas contenir de modifications directes ou avoir des commits locaux effectués sur elle.

[[def_repository]]dépôt::
	Une collection de <<def_ref,refs>> accompagnée d'une <<def_object_database,base de données d'objets>> contenant tous les objets qui sont <<def_reachable,joignables>> à partir des refs, éventuellement accompagnés de métadonnées provenant d'une ou plusieurs <<def_porcelain,porcelaines>>. Un dépôt peut partager une base de données d'objets avec d'autres dépôts via des <<def_alternate_object_database,mécanismes alternatifs>>.

[[def_resolve]]résoudre::
	L'action de réparer manuellement ce que l'échec d'une <<def_merge,fusion>> automatique a laissé derrière lui.

[[def_revision]]révision::
	Synonyme de <<def_commit,commit>> (le nom).

[[def_rewind]]rembobiner::
	Jeter une partie du développement, c'est-à-dire affecter la <<def_head,tête>> à une <<def_revision,révision>> antérieure.

[[def_SCM]]SCM::
	Gestion du code source (Source Code Management en anglais).

[[def_SHA1]]SHA-1::
	"Secure Hash Algorithm 1" une fonction de hachage cryptographique. Dans le contexte de Git, utilisé comme synonyme de <<def_object_name,nom d'objet>>.

[[def_shallow_clone]]clone superficiel::
	Principalement un synonyme de <<def_shallow_repository,dépôt superficiel>> mais la phrase rend plus explicite qu'il a été créé en exécutant la commande `git clone --depth=...`.

[[def_shallow_repository]]dépôt superficiel::
	Un <<def_repository,dépôt>> superficiel a un historique incomplet dont certains <<def_commit,commits>> ont des <<def_parent,parents>> « cautérisés » (en d'autres termes, on dit à Git de prétendre que ces commits n'ont pas de parents, même s'ils sont enregistrés dans le <<def_commit_object,l'objet commit>>). Ceci est parfois utile lorsque vous n'êtes intéressé que par l'historique récent d'un projet même si l'historique réel enregistré dans l'amont est beaucoup plus important. Un dépôt superficiel est créé en donnant l'option `--depth` à linkgit:git-clone[1], et son historique peut être approfondi plus tard avec linkgit:git-fetch[1].

[[def_stash]]entrée de remisage::
	Un <<def_object,objet>> utilisé pour stocker temporairement le contenu d'un répertoire de travail <<def_dirty,sale>> et l'index pour une réutilisation future.

[[def_submodule]]sous-module::
	Un <<def_repository,dépôt>> qui contient l'historique d'un projet séparé à l'intérieur d'un autre dépôt (ce dernier est appelé <<def_superproject, superprojet>>).

[[def_superproject]]superprojet::
	Un <<def_repository,dépôt>> qui fait référence aux dépôts d'autres projets dans son arbre de travail comme <<def_submodule,sous-modules>>. Le superprojet connaît les noms des objets commit des sous-modules contenus (mais n'en détient pas de copie).

[[def_symref]]symref ou référence symbolique::
	Référence symbolique : au lieu de contenir l'identifiant <<def_SHA1,SHA-1>> lui-même, elle est au format 'ref:refs/quelque/chose' et lorsqu'elle est référencée, elle <<def_dereference,déréférence>> récursivement vers cette référence. '<<def_HEAD,HEAD>>' est un excellent exemple de symref. Les références symboliques sont manipulées avec la commande linkgit:git-symbolic-ref[1].

[[def_tag]]étiquette::
	Une <<def_ref,réf>> sous l'espace de noms `refs/tags/` qui pointe vers un objet d'un type arbitraire (typiquement, une étiquette pointe vers un <<def_tag_object,objet tag>> ou un <<def_commit_object,objet commit>>). Contrairement à une <<def_head,tête>>, une étiquette n'est pas mise à jour par la commande `commit`. Une étiquette Git n'a rien à voir avec un tag Lisp (qui serait appelé un <<def_object_type,type d'objet>> dans le contexte de Git). Une étiquette est le plus souvent utilisée pour marquer un point particulier dans la <<def_chain,chaîne>> d'ascendance de commits.

[[def_tag_object]]objet étiquette::
	Un <<def_object,objet>> contenant une <<def_ref,réf>> pointant vers un autre objet, qui peut contenir un message tout comme un <<def_commit_object,objet commit>>. Il peut également contenir une signature (PGP), auquel cas il est appelé un "objet étiquette signé".

[[def_topic_branch]]branche thématique::
	Une <<def_branch,branche>> régulière de Git qui est utilisée par un développeur pour identifier une ligne conceptuelle de développement. Comme les branches sont très faciles et peu coûteuses, il est souvent souhaitable d'avoir plusieurs petites branches qui contiennent chacune des concepts très bien définis ou de petits changements incrémentiels mais liés.

[[def_trailer]]ligne terminale::
	Métadonnées de type clé-valeur. Les lignes terminales sont en option à la fin d'un message de validation. Elles peuvent être appelées "pieds" ou "étiquettes" dans d'autres communautés. Voir linkgit:git-interpret-trailers[1].

[[def_tree]]arbre::
	Soit un <<def_working_tree,arbre de travail>>, soit un <<def_tree_object,objet arbre>> avec les <<def_blob_object,blob>> et objets arbre dépendants (c'est-à-dire une représentation stockée d'un arbre de travail).

[[def_tree_object]]objet arbre::
	Un <<def_object,objet>> contenant une liste de noms et de modes de fichiers ainsi que des références aux objets blob et/ou arbres associés. Un <<def_tree,arbre>> est équivalent à un <<def_directory,répertoire>>.

[[def_tree-ish]]arbre-esque (aussi arbresque)::
	Un <<def_tree_object,objet arbre>> ou un <<def_object,objet>> qui peut être <<def_dereference,déréférencé>> récursivement vers un objet arbre. Le déréférencement d'un <<def_commit_object,objet commit>> donne l'objet arbre correspondant au <<def_directory,répertoire>> racine de la <<def_revision,révision>>. Les éléments suivants sont tous des arbres-esques : un <<def_commit-ish,commit-esque>>, un objet arbre, un <<def_tag_object,objet étiquette>> qui pointe vers un objet arbre, un objet étiquette qui pointe vers un objet étiquette qui pointe vers un objet arbre, etc.

[[def_unborn]]non né::
	L'<<def_HEAD,HEAD>> peut pointer à une <<def_branch,branche>> qui n'existe pas encore et qui n'a pas encore de commit sur elle, et une telle branche est appelée une branche non-née. La façon la plus typique que les utilisateurs rencontrent une branche non-née est de créer un dépôt nouvellement créé sans clonage depuis ailleurs. La HEAD pointerait sur la branche 'main' (ou 'master', selon votre configuration) qui n'est pas encore née. En outre, certaines opérations peuvent vous obtenir sur une branche non-née avec leur option <<def_orphan,orpheline>>.


[[def_unmerged_index]]index non fusionné::
	Un <<def_index,index>> qui contient des <<def_index_entry,entrées d'index>> non fusionnées.

[[def_unreachable_object]]objet inaccessible::
	Un <<def_object,objet>> qui n'est pas <<def_reachable,joignable>> à partir d'une <<def_branch,branche>>, d'une <<def_tag,étiquette>>, ou de toute autre référence.

[[def_upstream_branch]]branche amont::
	La <<def_branch,branche>> par défaut qui est fusionnée dans la branche en question (ou sur laquelle la branche en question est rebasée). Elle est configurée via branch.<nom>.remote et branch.<nom>.merge. Si la branche amont de 'A' est 'origin/B' on dit parfois "'A' suit 'origin/B'".

[[def_working_tree]]arbre de travail::
	L'arbre des fichiers effectivement extraits. L'arbre de travail contient normalement le contenu de l'arbre du commit <<def_HEAD,HEAD>>, plus toutes les modifications locales que vous avez faites mais pas encore validées.

[[def_worktree]]arbre-de-travail::
	Un dépôt peut avoir zéro (c'est-à-dire un dépôt nu) ou un ou plusieurs arbres de travail attachés à lui. Un "arbre-de-travail" consiste en un "arbre de travail" et des métadonnées de dépôt, dont la plupart sont partagées entre les autres arbres-de-travail d'un même dépôt, et dont certaines sont maintenues séparément par arbre-de-travail (par exemple l'index, HEAD et les pseudoréfs comme MERGE_HEAD, les réfs par arbre-de-travail et le fichier de configuration par arbre-de-travail).
