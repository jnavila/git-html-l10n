git-log(1)
==========

NOM
---
git-log - Afficher les journaux de validation


SYNOPSIS
--------
[verse]
'git log' [<options>] [<plage de révision>] [[--] <chemin>...]

DESCRIPTION
-----------
Affiche les journaux de validation.

:git-log: 1
include::rev-list-description.txt[]

La commande prend les options applicables à la commande linkgit:git-rev-list[1] pour contrôler ce qui est montré et comment, et les options applicables aux commandes linkgit:git-diff[1] pour contrôler la façon dont les modifications que chaque validation introduit sont affichées.


OPTIONS
-------

--follow::
	Continuer à lister l'historique d'un fichier au-delà des renommages (ne fonctionne que pour un seul fichier).

--no-decorate::
--decorate[=short|full|auto|no]::
	Imprimer les noms de réference des commits affichés. Si 'short' est spécifié, les préfixes des noms de référence 'refs/heads/', 'refs/tags/' et 'refs/remotes/' ne seront pas affichés. Si 'full' est spécifié, le nom complet de la référence (y compris le préfixe) sera imprimé. Si 'auto' est spécifié, alors si la sortie va à un terminal, les noms de référence sont affichés comme si 'short' ont été donné, sinon aucun nom de référence n'est affiché. L'option par défaut est 'short'.

--decorate-refs=<motif>::
--decorate-refs-exclude=<motif>::
	Si aucun `--decorate-refs' n'est donné, faire comme si tous les refs étaient inclus. Pour chaque candidat, ne pas l'utiliser pour la décoration s'il correspond à un motif fourni à `--decorate-refs-exclude' ou s'il ne correspond à aucun des motifs fournis à `--decorate-refs'. L'option de configuration `log.excludeDecoration` permet d'exclure les références des décorations, mais un motif explicite `--decorate-refs` remplacera une correspondance dans `log.excludeDecoration`.

--source::
	Imprimer le nom de la référence donné sur la ligne de commande par lequel chaque commit a été atteint.

--[no-]mailmap::
--[no-]use-mailmap::
	Utiliser le fichier mailmap pour mapper les noms d'auteurs et de validateurs et les adresses email avec les vrais noms et adresses email canoniques. Voir linkgit:git-shortlog[1].

--full-diff::
	Sans ce drapeau, `git log -p <p <chemin>...` affiche les commits qui touchent les chemins spécifiés, et diffs sur les mêmes chemins spécifiés. Avec ceci, le diff complet est affiché pour les commits qui touchent les chemins spécifiés ; cela signifie que "<chemin>..." limite seulement les commits, et ne limite pas le diff pour ces commits.
+
Notez que cela affecte tous les types de sortie basés sur le diff, par exemple ceux produits par '---stat', etc.

--log-size::
	Inclure une ligne ''log size <nombre>'' dans la sortie pour chaque commit, où <nombre> est la longueur du message de ce commit en octets. Destiné à accélérer les outils qui lisent les messages de journal de la sortie 'git log' en leur permettant d'allouer de l'espace à l'avance.

include::line-range-options.txt[]

<plage de révisions>::
	Afficher uniquement les commits dans la plage de révision spécifiée. Lorsqu'aucune <plage-de-révision> n'est spécifiée, elle vaut par défaut `HEAD` (c'est-à-dire tout l'historique menant au commit actuel). `origin...HEAD` spécifie tous les commits accessibles depuis le commit courant (c-à-d `HEAD`), mais pas depuis `origin`. Pour une liste complète des façons d'épeler <plage-de-révision>, voir la section'Spécification des plages' de linkgit:gitrevisions[7].

[--] <chemin>...::
	Afficher uniquement les commits qui sont suffisants pour expliquer comment les fichiers qui correspondent aux chemins spécifiés sont venus à exister. Voir 'Simplification de l'historique' ci-dessous pour plus de détails et d'autres modes de simplification.
+
Les chemins peuvent avoir besoin d'être préfixés avec `--` pour les séparer des options ou de la plage de révision, en cas de confusion.

include::rev-list-options.txt[]

include::pretty-formats.txt[]

MISE EN FORME DIFF
------------------

Par défaut, `git log` ne génère aucune sortie de diff. Les options ci-dessous peuvent être utilisées pour afficher les modifications faites par chaque commit.

Notez que sauf si une des options `-c`, `--cc`, ou `-m` est donnée, les commits de fusion ne vont pas afficher de diff, même si un format de diff tel que `--patch` est sélectionné, et ils ne correspondront pas aux options telles que `-S`. L'exception sera l'utilisation de `--first-parent`, pour laquelle les fusions sont traités comme des commits normaux à un seul parent (ceci peut être modifié en donnant une option de diff combiné ou avec `--no-diff-merges`).

-c::
	Avec cette option, la sortie de diff pour un commit de fusion montre les différences de chacun des parents vers le résultat de la fusion simultanément au lieu de montrer une à une les différences par paires entre un parent et le résultat. De plus, il ne répertorie que les fichiers qui ont été modifiés par tous les parents.

--cc::
	Ce drapeau implique l'option `-c` et compresse davantage la sortie du patch en omettant les morceaux inintéressants dont le contenu dans les parents n'a que deux variantes et le résultat de la fusion choisit l'une d'entre elles sans modification.

--combined-all-paths::
	Cet indicateur fait en sorte que les diffs combinés (utilisés pour les commits de fusion) listent le nom du fichier de tous les parents. Il n'a donc d'effet que lorsque -c ou --cc sont spécifiés, et n'est probablement utile que si des changements de nom de fichier sont détectés (c.-à-d. lorsque la détection de renommage ou de copie a été demandée).

-m::
	Ce drapeau fait que les commits de fusion montrent la différence complète comme les commits réguliers ; pour chaque parent de la fusion, une entrée de journal et une différence séparées sont générées. Une exception est que seule la différence par rapport au premier parent est affichée quand l'option `--first-parent` est donnée ; dans ce cas, la sortie représente les modifications que la fusion a apportées _dans_ la branche alors courante.

--diff-merges=off::
--no-diff-merges::
	Désactive la sortie des diffs pour des commits de fusion (par défaut). Utile pour passer outre `-m`, `-c`, ou `--cc`.

:git-log: 1
include::diff-options.txt[]

include::diff-generate-patch.txt[]

EXEMPLES
--------
`git log --no-merges`::

	Affiche tout l'historique des commits, mais saute toutes les fusions

`git log v2.6.12.. include/scsi drivers/scsi`::

	Affiche tous les commits depuis la version 'v2.6.12' qui a modifié n'importe quel fichier dans les sous-directeurs 'include/scsi' ou 'drivers/scsi'

`git log --since="2 weeks ago" -- gitk`::

	Affiche les modifications au cours des deux dernières semaines au fichier 'gitk'. Le '--' est nécessaire pour éviter toute confusion avec la branche 'nommée 'gitk'

`git log --name-status release..test`::

	Affiche les commits qui se trouvent dans la branche "test" mais pas encore dans la branche "libération", ainsi que la liste des chemins que chaque commit modifie.

`git log --follow builtin/rev-list.c`::

	Affiche les commits qui ont changé 'builtin/rev-list.c', y compris les commits qui se sont produits avant que le fichier ne soit appelé par son nom actuel.

`git log --branches --not --remotes=origin`::

	Affiche tous les commits qui sont dans l'une des branches locales, mais pas dans l'une des branches de suivi à distance pour « origin » (ce que vous avez que cette origine n'est pas).

`git log master --not --remotes=*/master`::

	Affiche tous les commits qui sont dans la branche master locale mais pas dans les branches master du dépôt distant.

`git log -p -m --first-parent`::

	Affiche l'historique, y compris les diffs de changement, mais seulement du point de vue de la « branche principale », en sautant les commits qui proviennent de branches fusionnées, et en montrant des diffs complets des changements introduits par les fusions. Cela n'a de sens que lorsqu'il s'agit de suivre une politique stricte de fusion de toutes les branches thématiques lorsqu'on reste sur une seule branche d'intégration.

`git log -L '/int main/',/^}/:main.c`::

	Montre comment la fonction 'main()' dans le fichier 'main.c'a évolué au fil du temps.

`git log -3`::

	Limite le nombre de commits à afficher à 3.

DISCUSSION
----------

include::i18n.txt[]

CONFIGURATION
-------------

Voir linkgit:git-config[1] pour les variables de base et linkgit:git-diff[1] pour les paramètres liés à la génération diff.

format.pretty::
	La valeur par défaut de l 'option `- -format`.(voir ci-dessus « Mise en forme ») par défaut `medium`.

i18n.logOutputEncoding::
	Encodage à utiliser lors de l'affichage des journaux. (Voir 'Discussion' ci-dessus.) Par défaut à la valeur de 'i18n.commitEncoding' si elle est fixée, et UTF-8 autrement.

log.date::
	Format par défaut pour les dates humainement lisibles. (Compare l'option '--date'.) Par défaut à "défaut", ce qui signifie écrire des dates comme `Sat May 8 19:35:34 2010 -0500`.
+
Si le format est réglé sur "auto:foo" et que le paginateur est utilisé, le format "foo" sera utilisé pour le format de date. Sinon, "default" sera utilisé.

log.follow::
	Si `true`, `git log` agira comme si l'option `--follow' était utilisée lorsqu'un seul <chemin> est donné. Ceci a les mêmes limitations que `--follow', c'est-à-dire qu'il ne peut pas être utilisé pour suivre plusieurs fichiers et ne fonctionne pas bien sur un historique non linéaire.

log.showRoot::
	Si `false`, `git log` et les commandes associées ne traiteront pas le commit initial comme un grand événement de création. Tout commit racine dans la sortie `git log -p` serait affiché sans diff attaché. La valeur par défaut est `true`.

log.showSignature::
	Si `true`, `git log` et les commandes associées agiront comme si l'option `--show-signature` leur était passée.

mailmap.*::
	Voir linkgit:git-shortlog[1].

notes.displayRef::
	Quelles refs, en plus de la définition par défaut par `core.notesRef` ou `GIT-NOTES-REF`, depuis lequelles lire les notes lors de l'affichage des messages de validation avec la famille de commandes `log`. Voir linkgit:git-notes[1].
+
Peut être un nom de référence non abrégé ou un glob et peut être spécifié plusieurs fois. Un avertissement sera émis pour les références qui n'existent pas, mais un glob qui ne correspond à aucune référence est ignoré en silence.
+
Ce paramètre peut être désactivé par l'option `--no-notes`, remplacé par la variable d'environnement `GIT_NOTES_DISPLAY_REF`, et remplacé par l'option `--notes=<ref>`.

GIT
---
Fait partie de la suite linkgit:git[1]

TRADUCTION
----------
Cette  page de manuel a été traduite par Jean-Noël Avila <jn.avila AT free DOT fr> et les membres du projet git-manpages-l10n. Veuillez signaler toute erreur de traduction par un rapport de bogue sur le site https://github.com/jnavila/git-manpages-l10n .
