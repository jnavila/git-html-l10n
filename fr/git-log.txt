git-log(1)
==========

NOM
---
git-log - Afficher les journaux de validation


SYNOPSIS
--------
[verse]
'git log' [<options>] [<plage-de-révision>] [[--] <chemin>...]

DESCRIPTION
-----------
Affiche les journaux de validation.

:git-log: 1
include::rev-list-description.txt[]

La commande prend les options applicables à la commande linkgit:git-rev-list[1] pour contrôler ce qui est montré et comment, et les options applicables aux commandes linkgit:git-diff[1] pour contrôler la façon dont les modifications que chaque validation introduit sont affichées.


OPTIONS
-------

--follow::
	Continuer à lister l'historique d'un fichier au-delà des renommages (ne fonctionne que pour un seul fichier).

--no-decorate::
--decorate[=short|full|auto|no]::
	Imprimer les noms de référence des commits affichés. Si 'short' est spécifié, les préfixes des noms de référence 'refs/heads/', 'refs/tags/' et 'refs/remotes/' ne seront pas affichés. Si 'full' est spécifié, le nom complet de la référence (y compris le préfixe) sera imprimé. Si 'auto' est spécifié, alors si la sortie va à un terminal, les noms de référence sont affichés comme si 'short' ont été donné, sinon aucun nom de référence n'est affiché. L'option `--decorate` est l'abréviation de `--decorate=short`. La valeur par défaut est la valeur de configuration de `log.decorate` si elle est configurée, sinon, `auto`.

--decorate-refs=<motif>::
--decorate-refs-exclude=<motif>::
	Pour chaque référence candidate, ne pas l'utiliser pour la décoration s'il correspond à un motif fourni à `--decorate-refs-exclude` ou s'il ne correspond à aucun des motifs fournis à `--decorate-refs`. L'option de configuration `log.excludeDecoration` permet d'exclure les références des décorations, mais un motif explicite `--decorate-refs` remplacera une correspondance dans `log.excludeDecoration`.
+
Si aucune de ces options ou paramètres de configuration n'est donnée, alors les références sont utilisées comme décoration si elles correspondent à `HEAD`, `refs/heads/`, `refs/remotes/`, `refs/stash/`, ou `refs/tags/`.

--clear-decorations::
	Lorsqu'elle est spécifiée, cette option efface toutes les options `--decorate-refs` ou `--decorate-refs-exclude` précédentes et assouplit le filtre de décoration par défaut pour inclure toutes les références. Cette option est supposée si la valeur de configuration `log.initialDecorationSet` est définie sur `all`.

--source::
	Imprimer le nom de la référence donné sur la ligne de commande par lequel chaque commit a été atteint.

--[no-]mailmap::
--[no-]use-mailmap::
	Utiliser le fichier mailmap pour mapper les noms d'auteurs et de validateurs et les adresses email avec les vrais noms et adresses email canoniques. Voir linkgit:git-shortlog[1].

--full-diff::
	Sans ce drapeau, `git log -p <p <chemin>...` affiche les commits qui touchent les chemins spécifiés, et diffs sur les mêmes chemins spécifiés. Avec ceci, le diff complet est affiché pour les commits qui touchent les chemins spécifiés ; cela signifie que "<chemin>..." limite seulement les commits, et ne limite pas le diff pour ces commits.
+
Notez que cela affecte tous les types de sortie basés sur le diff, par exemple ceux produits par `--stat`, etc.

--log-size::
	Inclure une ligne ''log size <nombre>'' dans la sortie pour chaque commit, où <nombre> est la longueur du message de ce commit en octets. Destiné à accélérer les outils qui lisent les messages de journal de la sortie 'git log' en leur permettant d'allouer de l'espace à l'avance.

include::line-range-options.txt[]

<plage-de-révisions>::
	Afficher uniquement les commits dans la plage de révision spécifiée. Lorsqu'aucune <plage-de-révision> n'est spécifiée, elle vaut par défaut `HEAD` (c'est-à-dire tout l'historique menant au commit actuel). `origin...HEAD` spécifie tous les commits accessibles depuis le commit courant (c-à-d `HEAD`), mais pas depuis `origin`. Pour une liste complète des façons d'épeler <plage-de-révision>, voir la section'Spécification des plages' de linkgit:gitrevisions[7].

[--] <chemin>...::
	Afficher uniquement les commits qui sont suffisants pour expliquer comment les fichiers qui correspondent aux chemins spécifiés sont venus à exister. Voir 'Simplification de l'historique' ci-dessous pour plus de détails et d'autres modes de simplification.
+
Les chemins peuvent avoir besoin d'être préfixés avec `--` pour les séparer des options ou de la plage de révision, en cas de confusion.

include::rev-list-options.txt[]

include::pretty-formats.txt[]

MISE EN FORME DIFF
------------------

Par défaut, `git log` ne génère aucune sortie de diff. Les options ci-dessous peuvent être utilisées pour afficher les modifications faites par chaque commit.

Notez que sauf si une des variantes de `--diff-merges` (incluant les options courtes`-m`, `-c`, `--cc` et `--dd`) est donnée explicitement, les commits de fusion ne vont pas afficher de diff, même si un format de diff tel que `--patch` est sélectionné, et ils ne correspondront pas aux options telles que `-S`. L'exception sera lors de l'utilisation de `--first-parent`, pour laquelle le format par défaut est `first-parent`pour les commits de fusion.

:git-log: 1
:diff-merges-default: `off`
include::diff-options.txt[]

include::diff-generate-patch.txt[]

EXEMPLES
--------
`git log --no-merges`::

	Affiche tout l'historique des commits, mais saute toutes les fusions

`git log v2.6.12.. include/scsi drivers/scsi`::

	Affiche tous les commits depuis la version 'v2.6.12' qui a modifié n'importe quel fichier dans les sous-directeurs 'include/scsi' ou 'drivers/scsi'

`git log --since="2 weeks ago" -- gitk`::

	Affiche les modifications au cours des deux dernières semaines au fichier 'gitk'. Le '--' est nécessaire pour éviter toute confusion avec la branche 'nommée 'gitk'

`git log --name-status release..test`::

	Affiche les commits qui se trouvent dans la branche "test" mais pas encore dans la branche "libération", ainsi que la liste des chemins que chaque commit modifie.

`git log --follow builtin/rev-list.c`::

	Affiche les commits qui ont changé 'builtin/rev-list.c', y compris les commits qui se sont produits avant que le fichier ne soit appelé par son nom actuel.

`git log --branches --not --remotes=origin`::

	Affiche tous les commits qui sont dans l'une des branches locales, mais pas dans l'une des branches de suivi à distance pour « origin » (ce que vous avez que cette origine n'est pas).

`git log master --not --remotes=*/master`::

	Affiche tous les commits qui sont dans la branche master locale mais pas dans les branches master du dépôt distant.

`git log -p -m --first-parent`::

	Affiche l'historique, y compris les diffs de changement, mais seulement du point de vue de la « branche principale », en sautant les commits qui proviennent de branches fusionnées, et en montrant des diffs complets des changements introduits par les fusions. Cela n'a de sens que lorsqu'il s'agit de suivre une politique stricte de fusion de toutes les branches thématiques lorsqu'on reste sur une seule branche d'intégration.

`git log -L '/int main/',/^}/:main.c`::

	Montre comment la fonction 'main()' dans le fichier 'main.c'a évolué au fil du temps.

`git log -3`::

	Limite le nombre de commits à afficher à 3.

DISCUSSION
----------

include::i18n.txt[]

CONFIGURATION
-------------

Voir linkgit:git-config[1] pour les variables de base et linkgit:git-diff[1] pour les paramètres liés à la génération diff.

format.pretty::
	La valeur par défaut de l'option `--format`. (voir ci-dessus « Mise en forme ») par défaut `medium`.

i18n.logOutputEncoding::
	Encodage à utiliser lors de l'affichage des journaux. (Voir 'Discussion' ci-dessus.) Par défaut à la valeur de 'i18n.commitEncoding' si elle est fixée, et UTF-8 autrement.

include::includes/cmd-config-section-rest.txt[]

include::config/log.txt[]

include::config/notes.txt[]

GIT
---
Fait partie de la suite linkgit:git[1]

TRADUCTION
----------
Cette  page de manuel a été traduite par Jean-Noël Avila <jn.avila AT free DOT fr> et les membres du projet git-manpages-l10n. Veuillez signaler toute erreur de traduction par un rapport de bogue sur le site https://github.com/jnavila/git-manpages-l10n .
