git-name-rev(1)
===============

NOM
---
git-name-rev - Trouver des noms symboliques pour des révs données


SYNOPSIS
--------
[verse]
'git name-rev' [--tags] [--refs=<motif>]
	       ( --all | --annotate-stdin | <commit-esque>... )

DESCRIPTION
-----------
Trouve des noms symboliques adaptés à la consommation humaine pour les révisions données dans n'importe quel format analysable par 'git rev-parse'.


OPTIONS
-------

--tags::
	Ne pas utiliser de noms de branche, mais seulement des étiquettes pour nommer les commits

--refs=<motif>::
	Utiliser uniquement des réfs dont les noms correspondent à un motif shell donné. Le motif peut être un nom de branche, nom d'étiquette ou nom de réf entièrement qualifié. S'il est fourni plusieurs fois, utiliser des réfs dont les noms correspondent à l'un des motifs shell donnés. Utilisez `--no-refs' pour effacer les motifs de réf précédents sur la ligne de commande.

--exclude=<motif>::
	Ne pas utiliser de réf dont le nom correspond à un motif shell donné. Le motif peut être un nom de branche, nom d'étiquette ou nom de réf entièrement qualifié. Si l'option est donnée plusieurs fois, une réf sera exclue lorsqu'elle correspond à l'un des motifs donnés. Lorsqu'il est utilisé avec --refs, une réf ne sera utilisée que lorsqu'elle correspond à au moins un motif --refs et ne correspond à aucun motif --exclude. Utilisez `--no-exclure ' pour effacer la liste des motifs à exclure.

--all::
	Lister toutes les validations accessibles depuis toutes les références

--annotate-stdin::
	Transformer stdin en remplaçant tout SHA-1 de 40 caractères hexadécimaux (appelons-le $hex) par "$hex ($nom_de_rév)". Lorsqu'utilisé avec --name-only, remplacer par "$nom_de_rév", en omettant $hex en entier. Cette option s'appelait `--stdin` dans les anciennes versions de Git.
+
Par exemple :
+
-----------
$ cat échantillon.txt

Une révision abrégée 2ae0a9cb82 ne sera pas remplacée.
Le nom complet après substitution est 2ae0a9cb8298185a94e5998086f380a355dd8907,
alors que son objet arbre est 70d105cc79e63b81cfdcb08a15297c23e60b07ad

$ git name-rev --annotate-stdin <échantillon.txt

Une révision abrégée 2ae0a9cb82 ne sera pas remplacée.
Le nom complet après substitution est 2ae0a9cb8298185a94e5998086f380a355dd8907 (master),
alors que son objet arbre est 70d105cc79e63b81cfdcb08a15297c23e60b07ad

$ git name-rev --name-only --annotate-stdin <échantillon.txt

Une révision abrégée 2ae0a9cb82 ne sera pas remplacée.
Le nom complet après la substitution est master,
alors que son objet est 70d105cc79e63b81cfdcb08a15297c23e60b07ad
-----------

--name-only::
	Au lieu d'imprimer le SHA-1 et le nom, imprimer seulement le nom. Si donné avec --tags le préfixe d'étiquette habituel "tags/" est également omis du nom, correspondant une sortie plus proche de celle de `git-describe`.

--no-undefined::
	Terminer avec un code d'erreur != 0 quand une référence est indéfinie, au lieu d'imprimer `undefined`.

--always::
	Afficher les objets commits abrégés en dernier recours.

EXEMPLES
--------

Avec un commit fourni, découvrir en quoi il est lié aux réfs locales. Disons que quelqu'un vous a écrit sur ce fantastique commit 33db5f4d9027a10e477ccf054b2c1ab94f74c85a. Bien sûr, vous regardez dans le commit, mais cela vous dit seulement ce qui s'est passé, mais pas le contexte.

Utilisez 'git name-rev' :

------------
% git name-rev 33db5f4d9027a10e477ccf054b2c1ab94f74c85a
33db5f4d9027a10e477ccf054b2c1ab94f74c85a tags/v0.99~940
------------

Maintenant vous en savez plus, parce que vous savez que c'est arrivé 940 révisions avant v0.99.

Une autre bonne chose que vous pouvez faire est :

------------
% git log | git name-rev --annotate-stdin
------------

GIT
---
Fait partie de la suite linkgit:git[1]

TRADUCTION
----------
Cette  page de manuel a été traduite par Jean-Noël Avila <jn.avila AT free DOT fr> et les membres du projet git-manpages-l10n. Veuillez signaler toute erreur de traduction par un rapport de bogue sur le site https://github.com/jnavila/git-manpages-l10n .
