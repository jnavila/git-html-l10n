FORMATS AUTOMATIQUES
--------------------

Si le commit est une fusion, et si la mise en forme n'est pas 'oneline', 'email' ou 'raw', une ligne supplémentaire est insérée avant la ligne 'Author:'. Cette ligne commence par "Merge:" et les empreintes des commits ancêtres sont affichées, séparées par des espaces. Notez que les commits énumérés ne sont pas nécessairement la liste des commits parents *directs* si vous avez limité votre vue de l'historique : par exemple, si vous n'êtes intéressé que par les modifications liées à un certain répertoire ou fichier.

Il existe plusieurs formats intégrés, et vous pouvez définir des formats supplémentaires en définissant une option pretty.<nom> config à soit un nouveau nom de format, soit une chaîne'format:', comme décrit ci-dessous (voir linkgit:git-config[1]). Voici le détail des formats intégrés :

* 'oneline'

	  <empreinte> <ligne-de-titre>
+
C'est conçu pour être aussi compact que possible.

* 'short'

	  commit <empreinte>
	  Author: <auteur>

	      <ligne-de-titre>

* 'medium'

	  commit <empreinte>
	  Author: <auteur>
	  Date:   <date d'auteur>

	      <ligne-de-titre>

	      <message-de-validation-complet>

* 'full'

	  commit <empreinte>
	  Author: <auteur>
	  Commit: <validateur>

	      <ligne-de-titre>

	      <message-de-validation-complet>

* 'fuller'

	  commit <empreinte>
	  Author:     <auteur>
	  AuthorDate: <date d'auteur>
	  Commit:     <validateur>
	  CommitDate: <date de validation>

	       <ligne-de-titre>

	       <message-de-validation-complet>

* 'reference'

	  <empreinte-abrégée> (<ligne-de-titre>, <date-d'auteur-courte>)
+
Ce format est utilisé pour faire référence à un autre commit dans un message de validation et est le même que `--pretty='format:%C(auto)%h (%s, %ad)'`. Par défaut, la date est formatée avec `--date=short` à moins qu'une autre option `--date` ne soit explicitement spécifiée. Comme pour tout `format:` avec des espaces réservés de format, sa sortie n'est pas affectée par d'autres options comme `--decorate` et `--walk-reflogs`.

* 'email'

	  From <empreinte> <date>
	  From: <auteur>
	  Date: <date d'auteur>
	  Subject: [PATCH] <ligne de titre>

	  <message-de-validation-complet>

* 'mboxrd'
+
Comme 'email', mais les lignes dans le message de validation commençant par "From" (précédé de zéro ou plus ">") sont citées avec ">" pour ne pas être confondues avec le début d'un nouveau commit.

* 'raw'
+
Le format'raw' montre le commit entier telle qu'elle est stockée dans l'objet commit. Notamment, les empreintes sont affichées dans leur intégralité, que --abbrev ou --no-abbrev soient utilisés ou non, et l'information 'parents' indiquent le véritable commit parent, sans tenir compte des greffes ou de la simplification d'historique. Notez que ce format affecte la façon dont les commits sont affichés, mais pas la façon dont la différence est affichée, par exemple avec `git log --raw`. Pour obtenir les noms complets des objets dans un format de diff brut, utilisez `--no-abbrev`.

* 'format:<chaîne-de-formatage>'
+
Le format 'format:<chaîne-de-formatage>' vous permet de spécifier quelles informations vous voulez afficher. Cela fonctionne un peu comme le format printf, à l'exception notable que vous obtenez une nouvelle ligne avec'%n' au lieu de'\n'.
+
Par exemple,'format : "L'auteur de %h était %an, %ar%nL'entête était >>%s<<<%n"' afficherait quelque chose comme ceci :
+
-------
L'auteur de fe6e0ee était Junio C Hamano, 23 hours ago
L'entête était >>t4119: test autocomputing -p<n> for traditional diff input.<<

-------
+
Les espaces réservés sont :

- Les places qui s'étendent à un seul caractère littéral :
'%n':: retour à la ligne
'%%':: un '%' brut
'%x00':: '%x' suivi de deux chiffres hexadécimaux est remplacé par un octet avec la valeur des chiffres hexadécimaux (nous appellerons ceci "code de formatage littéral" dans le reste du document).

- Espaces réservés qui affectent le formatage des espaces réservés ultérieurs :
'%Cred':: passe la couleur au rouge
'%Cgreen':: passe la couleur au vert
'%Cblue':: passe la couleur au bleu
'%Creset':: réinitialise la couleur
'%C(...)':: spécification de couleur, telle que décrite sous Valeurs dans la section "FICHIER DE CONFIGURATION" de linkgit:git-config[1]. Par défaut, les couleurs ne sont affichées que lorsqu'elles sont activées pour la sortie des journaux (par `color.diff`, `color.ui`, ou `--color`, et en respectant les paramètres `auto` du premier si nous allons sur un terminal). `%C(auto,...)` est accepté comme synonyme historique de la valeur par défaut (par exemple, `%C(auto,red)`). Spécifier `%C(always,...)` affichera les couleurs même si la couleur n'est pas activée autrement (bien qu'il faille toujours utiliser `--color=always` pour activer la couleur pour toute la sortie, y compris ce format et tout ce que git peut colorier). `auto` seul (c'est-à-dire `%C(auto)`) activera la coloration automatique sur les places suivantes jusqu'à ce que la couleur soit à nouveau changée.
'%m':: marque à gauche (`<`), à droite (`>`) ou de limite (`-`)
'%w([<w>[,<i1>[,<i2>]]])':: basculer de rebouclage de ligne, comme l’option -w de linkgit:git-shortlog[1].
'%<( <N> [,trunc|ltrunc|mtrunc])':: faire en sorte que l’espace réservé suivant prenne au moins N largeurs de colonne, en remplissant les espaces à droite si nécessaire. Tronquer éventuellement (avec points de suspension '..') à gauche (ltrunc) '.. che', le milieu (mtrunc) 'mi.. eu', ou la droite (trunc) 'dr.. ', si la sortie est plus longue que N colonnes. Note 1 : cette troncation ne fonctionne correctement qu’avec N >= 2. Note 2 : les espaces autour des valeurs N et M (voir ci-dessous) sont facultatifs. Remarque 3 : Les emojis et autres caractères larges prendront deux colonnes d’affichage, ce qui peut dépasser les limites des colonnes. Note 4 : les marques de combinaison de caractères décomposés peuvent être mal placées au niveau des limites de rembourrage.
'%<|( <M> )':: faire en sorte que l’espace réservé suivant prenne au moins jusqu’à la Mième colonne d’affichage, en remplissant les espaces sur la droite si nécessaire. Utilisez des valeurs M négatives pour les positions de colonne mesurées à partir du bord droit de la fenêtre du terminal.
'%>( <N> )', '%>|( <M> )':: similaire à '%<( <N> )', '%<|( <M> )' respectivement, mais les espaces d'alignement à gauche
'%>>( <N> )', '%>>|( <M> )':: similaire à '%>( <N> )', '%>|( <M> )' respectivement, sauf que si le prochain espace réservé prend plus d'espaces que prévu et qu'il y a des espaces à sa gauche, utiliser ces espaces
'%><( <N> )', '%><|( <M> )':: similaire à '%<( <N> )', '%<|( <M> )' respectivement, mais en décalant des deux côtés (c'est-à-dire que le texte est centré)

- Espaces réservés développant les informations extraites du commit :
'%H':: empreinte du commit
'%h':: empreinte abrégée du commit
'%T':: empreinte de l'arbre
'%t':: empreinte abrégée de l'arbre
'%P':: empreintes des parents
'%p':: empreintes abrégés des parents
'%an':: nom de l'auteur
'%aN':: nom de l'auteur (en respectant .mailmap, voir linkgit:git-shortlog[1] ou linkgit:git-blame[1])
'%ae':: e-mail de l'auteur
'%aE':: e-mail de l'auteur (en respectant .mailmap, voir linkgit:git-shortlog[1] ou linkgit:git-blame[1])
'%al':: partie locale de l'e-mail de l'auteur (la partie avant le signe "@")
'%aL':: partie locale de l'auteur (voir '%al') en respectant .mailmap, voir linkgit:git-shortlog[1] ou linkgit:git-blame[1])
'%ad':: date de l'auteur (le format respecte l'option --date=)
'%aD':: date d'auteur, style RFC2822
'%ar':: date de l'auteur, date relative
'%at':: date de l'auteur, horodatage UNIX
'%ai':: date de création, format de type ISO 8601
'%aI':: date d'auteur, format strict ISO 8601
'%as':: date d'auteur, format court (`AAAA-MM-JJ`)
'%ah':: date de l'auteur, style humain (comme l'option `--date=human` de linkgit:git-rev-list[1])
'%cn':: nom du validateur
'%cN':: nom du validateur (en respectant .mailmap, voir linkgit:git-shortlog[1] ou linkgit:git-blame[1])
'%ce':: e-mail du validateur
'%cE':: e-mail du validateur (en respectant .mailmap, voir linkgit:git-shortlog[1] ou linkgit:git-blame[1])
'%cl':: partie locale de l'e-mail du validateur (la partie avant le signe "@")
'%cL':: partie locale du validateur (voir '%cl') en respectant .mailmap, voir linkgit:git-shortlog[1] ou linkgit:git-blame[1])
'%cd':: date de validation (le format respecte l'option --date=)
'%cD':: date de validation, style RFC2822
'%cr':: date de validation, date relative
'%ct':: date de validation, horodatage UNIX
'%ci':: date de validation, format de type ISO 8601
'%cI':: date de validation, format ISO 8601 strict
'%cs':: date de validation, format court (`AAAA-MM-JJ`)
'%ch':: date du validateur, style humain (comme l'option `--date=human` de linkgit:git-rev-list[1])
'%d':: les noms de ref, comme l'option --decorate de linkgit:git-log[1].
'%D':: les noms des refs, sans encadrement par « ( » et « ) ».
'%(decorate[:<options>])'::
noms de réfs avec des décorations personnalisées. La chaîne "decorate" peut être suivie de deux points et de zéro ou plus options séparées par des virgules. Les valeurs d'option peuvent contenir des codes de formatage litéraux. Ils doivent être utilisés pour les virgules (`%x2C`) et les parenthèses de fermeture (`%x29`), en raison de leur rôle dans la syntaxe optionnelle.
+
** 'prefix=<valeur>' : Affiché avant la liste des noms de réf. Valeur pas défaut "{nbsp}`(`".
** 'suffix= <valeur>' : affiché après la liste des noms réf. Valeur par défaut à "`)`".
** 'separator=<valeur>' : affiché entre les noms de réf. Valeur par défaut à "`,`{nbsp} ".
** 'pointer=<valeur>' : Affichage entre HEAD et la branche pointée, le cas échéant.
		      Par défaut "{nbsp}`->`{nbsp}".
** 'tag= <valeur>' : Afficher avant les noms des étiquettes. par défaut "`tag:`{nbsp}".

+
Par exemple, pour produire des décorations sans enveloppe ni étiquettes, et des espaces comme séparateurs :
+
`%(decorate:prefix=,suffix=,tag=,separator= )`

'%(describe[:<options>])'::
nom lisible par l'homme, comme linkgit:git-describe[1] ; chaîne vide pour les commits non descriptibles. La chaîne `describe` peut être suivie de deux points et de zéro ou plusieurs options séparées par des virgules. Les descriptions peuvent être incohérentes lorsque des étiquettes sont ajoutées ou supprimées en même temps.
+
** 'tags[=<valeur-booléenne>]' : Au lieu de ne considérer que les étiquettes annotées, prendre également en compte les étiquettes légères.
** 'abbrev=<nombre>' : Au lieu d'utiliser le nombre de chiffres hexadécimaux par défaut (qui varie en fonction du nombre d'objets dans le dépôt avec une valeur par défaut de 7) du nom d'objet abrégé, utiliser <nombre> chiffres, ou autant de chiffres que nécessaire pour former un nom unique.
** 'match=<motif>' : Ne considère que les étiquettes correspondant au motif `glob(7)` donné, à l'exclusion du préfixe "refs/tags/".
** exclude=<motif>' : Ne pas prendre en compte les étiquettes correspondant au motif `glob(7)` donné, en excluant le préfixe "refs/tags/".

'%S':: nom de ref fourni en ligne de commande par lequel le commit a été atteint (comme `git log --source`), ne fonctionne qu’avec `git log`
'%e':: encodage
'%s':: titre
'%f':: ligne de titre aseptisée, convenant pour un nom de fichier
'%b':: corps
'%B':: corps brut (sujet et corps non enveloppés)
ifndef::git-rev-list[]
'%N':: notes du commit
endif::git-rev-list[]
'%GG':: message de vérification brut de GPG pour un commit signé
'%G?':: afficher "G" pour une bonne signature (valide), "B" pour une mauvaise signature, "U" pour une bonne signature avec une validité inconnue, "X" pour une bonne signature qui a expiré, "Y" pour une bonne signature faite par une clé expirée, "R" pour une bonne signature faite par une clé révoquée, "E" si la signature ne peut pas être vérifiée (par exemple la clé est manquante) et "N" pour aucune signature
'%GS':: affiche le nom du signataire d'un commit signé
'%GK':: afficher la clé utilisée pour signer un commit signé
'%GF':: afficher l'empreinte digitale de la clé utilisée pour signer un commit signé
'%GP':: afficher l'empreinte digitale de la clé primaire dont la sous-clé a été utilisée pour signer un commit signé
'%GT':: afficher le niveau de rouille de la clé utilisée pour signer un commit signé
'%gD':: sélecteur de reflog, p. ex., `refs/stash@{1}` ou `refs/stash@{2 minutes ago}` ; le format suit les règles décrites pour l'option `-g`. La partie avant `@` est le nom de la référence tel qu'il est donné sur la ligne de commande (donc `git log -g refs/heads/master` produirait `refs/heads/master@{0}`).
'%gd':: sélecteur de reflog raccourci ; identique à `%gD`, mais la partie refname est raccourcie pour la lisibilité humaine (ainsi `refs/heads/master` devient simplement `master`).
'%gn':: nom de l'identité reflog
'%gN':: nom de l'identité reflog (en respectant .mailmap, voir linkgit:git-shortlog[1] ou linkgit:git-blame[1])
'%ge':: adresse de courriel d'identité reflog
'%gE':: e-mail de l'identité reflog (en respectant .mailmap, voir linkgit:git-shortlog[1] ou linkgit:git-blame[1])
'%gs':: titre du reflog
'%(trailers[:<options>])'::
afficher les lignes ajoutées du corps comme interprétées par linkgit:git-interpret-trailers[1]. La chaîne `trailers` peut être suivie de deux-points et de zéro ou plus d'options séparées par des virgules. Si une option est fournie plusieurs fois, la dernière option l'emporte.
+
** key=<clé>' : affiche uniquement les chaînes d'attributs avec la <clé> spécifiée. L'appariement se fait de façon insensible à la casse et la virgule finale est facultative. Si l'option est donnée plusieurs fois, les lignes d'attributs correspondant à l'une des clés sont affichées. Cette option active automatiquement l'option `only` de sorte que les lignes non-attribut dans le bloc d'attributs soient masquées. Si ce n'est pas désiré, ce peut être désactivé avec `only=false`. Par exemple, `%(trailers:key=Reviewed-by)` affiche les lignes d'attribut avec la clé `Reviewed-by`.
** only [=<BOOLÉEN>]' : choisir si les lignes non annotées du bloc de lignes finales doivent être incluses.
** 'separator=<sep>' : spécifie un séparateur inséré entre les lignes d'attributs. Lorsque cette option n'est pas activée, chaque ligne d'attribut est terminée par un caractère de saut de ligne. La chaîne <sep> peut contenir les codes de formatage littéral décrits ci-dessus. Pour utiliser la virgule comme séparateur, il faut utiliser `%x2C` car sinon elle serait analysée comme option suivante. Par exemple, `%(trailers:key=Ticket,separator=%x2C )` affiche toutes les lignes d'attributs dont la clé est « Ticket » séparées par une virgule et un espace.
** 'unfold[=<booléen>]' : se comporter comme si l'option `--unfold` d'interprétation des attributs était donnée. Par exemple, `%(trailers:only,unfold=true)` déplie et affiche toutes les lignes d'attributs.
** 'keyonly [=<booléen>]' : ne montrer que la partie principale du bloc final.
** 'valueonly [=<booléen>]' : n'affichez que la partie valeur des lignes finales.
** 'key_value_separator=<sep>' : spécifier un séparateur inséré entre les lignes finales. Si cette option n'est pas fournie, chaque paire clé-valeur de la ligne finale est séparée par " :", sinon elle partage la même sémantique que 'separator=<sep>' ci-dessus.

NOTE: Certains espaces réservés peuvent dépendre d'autres options données au moteur de traversée de révisions. Par exemple, les options de reflog `%g*` inséreront une chaîne vide à moins que nous ne traversions des entrées de reflog (par exemple, par `git log -g`). Les caractères de remplissage `%d` et `%D` utiliseront le format de décoration « short » si `--decorate` n'a pas déjà été fourni sur la ligne de commande.

Les options booléennes acceptent une valeur optionnelle `[=<booléen>]`. Les valeurs `true`, `false`, `on`, `off` etc. sont toutes acceptées. Voir la sous-section "booléen" dans "EXEMPLES" dans linkgit:git-config[1]. Si une option booléenne est donnée sans valeur, elle est activée.

Si vous ajoutez un `+` (signe plus) après'%' d'un espace réservé, un saut de ligne est inséré immédiatement avant l'expansion si et seulement si l'espace réservé se développe en une chaîne non vide.

Si vous ajoutez un `-` (signe moins) après'%' d'un caractère de remplissage, tous les sauts de ligne consécutifs précédant immédiatement l'expansion sont supprimés si et seulement si l'espace réservé se développe en une chaîne vide.

Si vous ajoutez un ``(espace) après'%' d'un espace réservé, un espace est inséré immédiatement avant l'expansion si et seulement si l'espace réservé se développe en une chaîne non vide.

* 'tformat:'
+
Le format'tformat:' fonctionne exactement comme'format:', sauf qu'il fournit une sémantique « terminator » au lieu de « separator ». En d'autres termes, chaque commit a le caractère de fin de message (habituellement une nouvelle ligne) ajouté, plutôt qu'un séparateur placé entre les entrées. Cela signifie que l'entrée finale d'un format à une ligne se terminera correctement par une nouvelle ligne, tout comme le format "oneline". Par exemple :
+
---------------------
$ git log -2 --pretty=format:%h 4da45bef \
  | perl -pe '$_ .= " -- NO NEWLINE\n" unless /\n/'
4da45be
7134973 -- NO NEWLINE

$ git log -2 --pretty=tformat:%h 4da45bef \
  | perl -pe '$_ .= " -- NO NEWLINE\n" unless /\n/'
4da45be
7134973
---------------------
+
De plus, toute chaîne non reconnue qui contient un `%` est interprétée comme si elle avait `tformat:` devant elle. Par exemple, ces deux éléments sont équivalents :
+
---------------------
$ git log -2 --pretty=tformat:%h 4da45bef
$ git log -2 --pretty=%h 4da45bef
---------------------
