FICHIER DE CONFIGURATION
------------------------

Le fichier de configuration Git contient un certain nombre de variables qui
affectent le comportement des commandes Git. Les fichiers `.git/config` et
éventuellement `config.worktree` (voir la section "FICHIER DE CONFIGURATION"
de linkgit:git-worktree[1]) dans chaque dépôt sont utilisés pour stocker la
configuration de ce dépôt, et `$HOME/.gitconfig` est utilisé pour stocker
une configuration par utilisateur comme valeurs de repli pour le fichier
`.git/config`. Le fichier `/etc/gitconfig` peut être utilisé pour stocker
une configuration par défaut pour l'ensemble du système.

Les variables de configuration sont utilisées à la fois par la plomberie Git
et les porcelaines. Les variables sont divisées en sections, dans lesquelles
le nom de variable entièrement qualifié de la variable elle-même est le
dernier segment séparé par un point et le nom de la section est tout ce qui
précède le dernier point. Les noms de variables sont insensibles à la casse,
n'autorisent que les caractères alphanumériques et `-`, et doivent commencer
par un caractère alphabétique.  Certaines variables peuvent apparaître
plusieurs fois ; on dit alors que la variable est multivaluée.

Syntaxe
~~~~~~~

La syntaxe est assez souple et permissive ; les espaces blancs sont
généralement ignorés.  Les caractères '#' et ' ;' commencent les
commentaires à la fin de la ligne, les lignes blanches sont ignorées.

Le fichier se compose de sections et de variables.  Une section commence par
le nom de la section entre crochets et se poursuit jusqu'au début de la
section suivante.  Les noms de section ne sont pas sensibles à la casse.
Seuls les caractères alphanumériques, `-` et `.` sont autorisés dans les
noms de section.  Chaque variable doit appartenir à une section, ce qui
signifie qu'il doit y avoir un en-tête de section avant le premier
paramétrage d'une variable.

Les sections peuvent être divisées en sous-sections. Pour commencer une
sous-section, mettez son nom entre guillemets, séparé  du nom de la section
par un espace, dans l'en-tête de la section, comme dans l'exemple
ci-dessous :

--------
	[section "sous-section"]

--------

Les noms de sous-sections sont sensibles à la casse et peuvent contenir
n'importe quel caractère, à l'exception du saut de ligne et de l'octet
nul. Les guillemets `"` et les barres obliques inverses peuvent être inclus
en les échappant sous la forme `\"` et `\\`, respectivement. Les barres
obliques inverses précédant d'autres caractères sont supprimées lors de la
lecture ; par exemple, `\t` est lu comme `t` et `\0` est lu comme `0` Les
en-têtes de section ne peuvent pas s'étendre sur plusieurs lignes.  Les
variables peuvent appartenir directement à une section ou à une sous-section
donnée. Vous pouvez avoir une `[section]` si vous avez `[section
sous-section]`, mais vous n'en avez pas besoin.

Il existe également une syntaxe `[section.sous-section]` obsolète. Avec
cette syntaxe, le nom de la sous-section est converti en minuscules et est
également comparé en tenant compte de la casse. Ces noms de sous-sections
suivent les mêmes restrictions que les noms de sections.

Toutes les autres lignes (et le reste de la ligne après l'en-tête de
section) sont reconnues comme des variables de réglage, sous la forme 'nom =
valeur' (ou simplement 'nom', qui est un raccourci pour dire que la variable
est le booléen « vrai »).  Les noms des variables sont insensibles à la
casse, n'autorisent que les caractères alphanumériques et `-`, et doivent
commencer par un caractère alphabétique.

Une ligne qui définit une valeur peut se poursuivre jusqu'à la ligne
suivante en la terminant par un `\` ; la barre arrière et la fin de la ligne
sont supprimés.  Les espaces après 'nom =', le reste de la ligne après le
premier caractère de commentaire '#' ou ' ;', et les espaces de fin de ligne
sont supprimés, sauf s'ils sont entre guillemets.  Les espaces internes à
l'intérieur de la valeur sont conservés textuellement.

À l'intérieur des guillemets, les caractères guillemet `"` et barre inversée
`\` doivent être échappés : utilisez `\"` pour `"` et `\\` pour `\`.

Les séquences d'échappement suivantes (en plus de `\"` et `\\`) sont
reconnues : `\n` pour le caractère de retour à la ligne (NL), `\t` pour la
tabulation horizontale (HT, TAB) et `\b` pour l'espacement arrière (BS).
Les autres séquences d'échappement de caractères (y compris les séquences
d'échappement octales) ne sont pas valides.


Inclusions
~~~~~~~~~~

Les sections `include` et `includeIf` vous permettent d'inclure des
directives de configuration provenant d'une autre source. Ces sections se
comportent de manière identique, à l'exception des sections `includeIf` qui
peuvent être ignorées si leur condition n'est pas évaluée comme vraie ; voir
"Inclusions conditionnelles" ci-dessous.

Vous pouvez inclure un fichier de configuration à partir d’un autre en
définissant la variable spéciale `include.path` (ou `includeIf.*.path`) au
nom du fichier à inclure. La variable prend un nom de chemin comme valeur,
et est soumise à l’expansion tilde. Ces variables peuvent être données
plusieurs fois.

Le contenu du fichier inclus est inséré immédiatement, comme s'il avait été
trouvé à l'endroit de la directive d'inclusion. Si la valeur de la variable
est un chemin relatif, le chemin est considéré comme relatif au fichier de
configuration dans lequel la directive include a été trouvée.  Voir
ci-dessous pour des exemples.

Inclusions conditionnelles
~~~~~~~~~~~~~~~~~~~~~~~~~~

Vous pouvez inclure un fichier de configuration provenant d'un autre fichier
conditionnellement en définissant une variable `includeIf.<condition>.path`
au nom du fichier à inclure.

La condition commence par un mot-clé suivi d'un deux-points et de quelques
données dont le format et la signification dépendent du mot-clé. Les
mots-clés pris en charge sont les suivants :

`gitdir`::

	Les données qui suivent le mot-clé `gitdir:` sont utilisées comme modèle de
	motif glob. Si l'emplacement du répertoire .git correspond au motif, la
	condition d'inclusion est remplie.
+
L'emplacement de .git peut être découvert automatiquement ou provenir de la
variable d'environnement `$GIT_DIR`. Si le dépôt est découvert
automatiquement via un fichier .git (par exemple à partir de sous-modules ou
d'un arbre de travail lié), l'emplacement .git sera l'emplacement final où
se trouve le répertoire .git, et non pas ou le fichier .git
.se trouve.
+
Le motif peut contenir des caractères génériques de globbing standard et
deux autres, `**/` et `/**`, qui peuvent correspondre à plusieurs composants
de chemin d’accès. Veuillez consulter linkgit:gitignore[5] pour plus de
détails. Pour plus de commodité :

 * Si le motif commence par `~/`, `~` sera remplacé par le contenu de la
   variable d'environnement `HOME`.

 * Si le motif commence par '`./`, il est remplacé par le répertoire contenant
   le fichier de configuration actuel.

 * Si le motif ne commence pas par `~/`, `./` ou `/`, `**/` sera
   automatiquement ajouté en préfixe. Par exemple, le motif `foo/bar` devient
   `**/foo/bar` et correspondra à `tout/chemin/vers/foo/bar`.

 * Si le motif se termine par `/`, `**` sera automatiquement ajouté. Par
   exemple, le motif `foo/` devient `foo/**`. En d'autres termes, il correspond
   à `foo` et à tout ce qui se trouve à l'intérieur, de manière récursive.

`gitdir/i`::
	C'est la même chose que `gitdir` sauf que la correspondance se fait sans
	tenir compte de la casse (par exemple sur les systèmes de fichiers
	insensibles à la casse)

`onbranch`::
	Les données qui suivent le mot-clé `onbranch:` sont considérées comme un
	motif avec des jokers standard et deux autres, `**/` et `/**`, qui peuvent
	correspondre à plusieurs composants de chemin.  Si nous nous trouvons dans
	un arbre de travail où le nom de la branche actuellement extraite correspond
	au motif, la condition d'inclusion est remplie.
+
Si le motif se termine par `/`, `**` sera automatiquement ajouté. Par
exemple, le motif `foo/` devient `foo/**`. En d'autres termes, il correspond
à toutes les branches qui commencent par `foo/`. Ceci est utile si vos
branches sont organisées de manière hiérarchique et que vous souhaitez
appliquer une configuration à toutes les branches de cette hiérarchie.

Quelques notes supplémentaires sur la correspondance via `gitdir` et
`gitdir/i` :

 * Les liens symboliques dans `$GIT_DIR` ne sont pas résolus avant la
   correspondance.

 * Les versions symlink et realpath des chemins seront comparées en dehors de
   `$GIT_DIR`. Par exemple, si ~/git est un lien symbolique vers
   /mnt/stockage/git, `gitdir:~/git` et `gitdir:/mnt/stockage/git`
   correspondront tous deux.
+
Ce n'était pas le cas dans la version initiale de cette fonctionnalité dans
la v2.13.0, qui ne correspondait qu'à la version realpath. La configuration
qui veut être compatible avec la version initiale de cette fonctionnalité
doit soit spécifier uniquement la version realpath, soit les deux versions.

 * Notez que "../" n'est pas spécial et correspondra littéralement, ce qui est
   peu probablement ce que vous voulez.

Exemple
~~~~~~~

----
# Variables core
[core]
	; Ne pas se fier au modes des fichiers
	filemode = false

# Notre algorithme de diff
[diff]
	external = /usr/local/bin/diff-wrapper
	renames = true

[branch "devel"]
	remote = origin
	merge = refs/heads/devel

# Réglages proxy
[core]
	gitProxy="ssh" for "kernel.org"
	gitProxy=default-proxy ;pour le reste

[include]
	path = /chemin/vers/foo.inc ; inclure par chemin absolu
	path = foo.inc ; trouver "foo.inc" relativement au fichier actuel
	path = ~/foo.inc ; trouver "foo.inc" dans votre répertoire `$HOME`

; inclure si $GIT_DIR est /chemin/vers/foo/.git
[includeIf "gitdir:/chemin/vers/foo/.git"]
	path = /chemin/vers/foo.inc

; inclure tous les dépôts dans /chemin/vers/groupe
[includeIf "gitdir:/chemin/vers/groupe"]
	path = /chemin/vers/foo.inc

; inclure pour tous les dépôts à l'intérieur de $HOME/vers/groupe
[includeIf "gitdir:~/vers/groupe/"]
	path = /chemin/vers/foo.inc

les chemins relatifs sont toujours relatifs au fichier
; incluant (si la condition est vraie) ; leur emplacement n'est pas
; affecté par la condition
[includeIf "gitdir:/chemin/vers/groupe/"]
	path = foo.inc

; n'inclure que si nous sommes dans un arbre de travail où foo-branch
; actuellement extrait
[includeIf "onbranch:foo-branch"]
	path = foo.inc
----

Valeurs
~~~~~~~

Les valeurs de nombreuses variables sont traitées comme une simple chaîne de
caractères, mais il existe des variables qui prennent des valeurs de types
spécifiques et il existe des règles quant à leur orthographe.

booléen::

       Lorsqu'une variable prend une valeur booléenne, de nombreux synonymes sont
       acceptés pour 'vrai' et 'faux' ; ils sont tous insensibles à la casse.

	true;; 	Les vrais littéraux booléens sont `yes`, `on`, `true`,
		and `1`.  Also, a variable defined without `= <value>`
		is taken as true.

	faux;; 	Boolean false literals are `no`, `off`, `false`,
		`0` and the empty string.
+
Lors de la conversion d'une valeur sous sa forme canonique en utilisant le
spécificateur de type `--type=bool`, 'git config' s'assurera que la sortie
est "true" ou "false" (écrit en minuscules).

Entier::
       La valeur de nombreuses variables qui spécifient différentes tailles peut
       être suffixée par `k`, `M`, ... pour signifier « multiplier le nombre par
       1024 », « par 1024x1024 », etc.

color::
       La valeur d’une variable qui prend une couleur est une liste de couleurs (au
       plus deux, une pour le premier plan et une pour l’arrière-plan) et les
       attributs (autant que vous le souhaitez), séparés par des espaces.
+
Les couleurs de base acceptées sont `normal`, `black`, `red`, `green`,
`yellow`, `blue`, `magenta`, `cyan` et `white`.  La première couleur donnée
est le premier plan ; la seconde est l'arrière-plan.  Toutes les couleurs de
base, sauf la couleur `normal`, ont une variante claire qui peut être
spécifiée en préfixant la couleur par `bright`, comme `brightred`.
+
Les couleurs peuvent également être données en tant que nombres entre 0 et
255 ; ceux-ci utilisent le mode ANSI 256 couleurs (mais notez que certains
terminaux ne peuvent pas prendre en charge cela).  Si votre terminal le
prend en charge, vous pouvez également spécifier des valeurs RGB 24 bits en
hexadécimal, comme `#ff0ab3`.
+
Les attributs acceptés sont `bold`, `dim`, `ul`, `blink`, `reverse`,
`italic`, et `strike` (pour les lettres barrées ou "surlignées").  La
position de tout attribut par rapport aux couleurs (avant, après ou entre
les deux) n'a pas d'importance. Des attributs spécifiques peuvent être
désactivés en les préfixant par `no` ou `no-` (par exemple, `noreverse`,
`no-ul`, etc.).
+
Une chaîne de couleur vide ne produit aucun effet de couleur. Cela peut être
utilisé pour éviter de colorer des éléments spécifiques sans désactiver
complètement la couleur.
+
Pour les étiquettes de couleur prédéfinies de git, les attributs sont censés
être réinitialisés au début de chaque élément de la sortie colorée. Ainsi,
mettre `color.decorate.branch` à `black` peindra le nom de cette branche en
un simple `black`, même si la chose précédente sur la même ligne de sortie
(par exemple, ouvrir une parenthèse avant la liste des noms de branches dans
la sortie de `log --decorate`) est mise à être peinte avec `bold` ou un
autre attribut.  Cependant, les formats de log personnalisés peuvent faire
une coloration plus compliquée et plus stratifiée, et les formes inversées
peuvent être utiles dans ce cas.

nom-de-chemin::
	Une variable qui prend la valeur d'un nom de chemin peut recevoir une chaîne
	de caractères commençant par "`~/`" ou "`~user/`", et l'expansion tilde
	habituelle se fait sur une telle chaîne : `~/` est développée à la valeur de
	`$HOME`, et `~user/` au répertoire personnel de l'utilisateur spécifié.


Variables
~~~~~~~~~

Notez que cette liste n'est pas exhaustive et n'est pas nécessairement
complète.  Pour les variables spécifiques à une commande, vous trouverez une
description plus détaillée dans la page du manuel appropriée.

D'autres outils liés à git peuvent utiliser et utilisent leurs propres
variables.  Lorsque vous inventez de nouvelles variables à utiliser dans
votre propre outil, assurez-vous que leurs noms n'entrent pas en conflit
avec ceux qui sont utilisés par Git lui-même et d'autres outils populaires,
et décrivez-les dans votre documentation.

include::config/advice.txt[]

include::config/core.txt[]

include::config/add.txt[]

include::config/alias.txt[]

include::config/am.txt[]

include::config/apply.txt[]

include::config/blame.txt[]

include::config/branch.txt[]

include::config/browser.txt[]

include::config/checkout.txt[]

include::config/clean.txt[]

include::config/color.txt[]

include::config/column.txt[]

include::config/commit.txt[]

include::config/commitgraph.txt[]

include::config/credential.txt[]

include::config/completion.txt[]

include::config/diff.txt[]

include::config/difftool.txt[]

include::config/extensions.txt[]

include::config/fastimport.txt[]

include::config/feature.txt[]

include::config/fetch.txt[]

include::config/format.txt[]

include::config/filter.txt[]

include::config/fsck.txt[]

include::config/gc.txt[]

include::config/gitcvs.txt[]

include::config/gitweb.txt[]

include::config/grep.txt[]

include::config/gpg.txt[]

include::config/gui.txt[]

include::config/guitool.txt[]

include::config/help.txt[]

include::config/http.txt[]

include::config/i18n.txt[]

include::config/imap.txt[]

include::config/index.txt[]

include::config/init.txt[]

include::config/instaweb.txt[]

include::config/interactive.txt[]

include::config/log.txt[]

include::config/mailinfo.txt[]

include::config/mailmap.txt[]

include::config/maintenance.txt[]

include::config/man.txt[]

include::config/merge.txt[]

include::config/mergetool.txt[]

include::config/notes.txt[]

include::config/pack.txt[]

include::config/pager.txt[]

include::config/pretty.txt[]

include::config/protocol.txt[]

include::config/pull.txt[]

include::config/push.txt[]

include::config/rebase.txt[]

include::config/receive.txt[]

include::config/remote.txt[]

include::config/remotes.txt[]

include::config/repack.txt[]

include::config/rerere.txt[]

include::config/reset.txt[]

include::config/sendemail.txt[]

include::config/sequencer.txt[]

include::config/showbranch.txt[]

include::config/splitindex.txt[]

include::config/ssh.txt[]

include::config/status.txt[]

include::config/stash.txt[]

include::config/submodule.txt[]

include::config/tag.txt[]

include::config/tar.txt[]

include::config/trace2.txt[]

include::config/transfer.txt[]

include::config/uploadarchive.txt[]

include::config/uploadpack.txt[]

include::config/url.txt[]

include::config/user.txt[]

include::config/versionsort.txt[]

include::config/web.txt[]

include::config/worktree.txt[]
