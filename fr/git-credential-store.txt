git-credential-store(1)
=======================

NOM
---
git-credential-store - Aide pour stocker les informations d'identification sur disque

SYNOPSIS
--------
-------------------
git config credential.helper 'store [<options>]'
-------------------

DESCRIPTION
-----------

NOTE: L'utilisation de cette aide stockera vos mots de passe en clair sur le disque, protégés uniquement par les permissions du système de fichiers. Si ce n'est pas un compromis de sécurité acceptable, essayez linkgit:git-credential-cache[1], ou trouvez une aide qui s'intègre au stockage sécurisé fourni par votre système d'exploitation.

Cette commande stocke les informations d'identification indéfiniment sur le disque pour être utilisées par de futurs programmes Git.

Vous ne voudrez probablement pas invoquer cette commande directement ; elle est destinée à être utilisée comme une aide pour les informations d'identification par d'autres parties de git. Voir linkgit:gitcredentials[7] ou `EXEMPLES` ci-dessous.

OPTIONS
-------

--file=<chemin>::

	Utilisez `<chemin>` pour rechercher et stocker les informations d'identification. Les permissions du système de fichiers du fichier seront définies pour empêcher les autres utilisateurs du système de le lire, mais il ne sera pas crypté ou protégé d'une autre manière. Si rien n'est spécifié, les informations d'identification seront recherchées dans `~/.git-credentials` et `$XDG_CONFIG_HOME/git/credentials`, et les informations d'identification seront écrites dans `~/.git-credentials` s'il existe, ou dans `$XDG_CONFIG_HOME/git/credentials` s'il existe et que le premier n'existe pas. Voir aussi <<FILES,FICHIERS>>.

[[FILES]]
FICHIERS
--------

S'il n'est pas défini explicitement avec `--file`, il y a deux fichiers dans lesquels git-credential-store cherchera les informations d'identification par ordre de préséance :

~/.git-credentials::
	Fichier d'informations d'identification spécifique à l'utilisateur.

$XDG_CONFIG_HOME/git/credentials::
	Deuxième fichier d'informations d'identification spécifique à l'utilisateur. Si '$XDG_CONFIG_HOME' n'est pas défini ou est vide, `$HOME/.config/git/credentials` sera utilisé. Toutes les informations d'identification stockées dans ce fichier ne seront pas utilisées si `~/.git-credentials` a également des informations d'identification correspondantes. C'est une bonne idée de ne pas créer ce fichier si vous utilisez parfois d'anciennes versions de Git qui ne le supportent pas.

Pour la recherche des informations d'identification, les fichiers sont lus dans l'ordre indiqué ci-dessus, la première information d'identification trouvée étant prioritaire sur les informations d'identification trouvées dans les fichiers plus bas dans la liste.

Le stockage des informations d'identification sera par défaut écrit dans le premier fichier existant de la liste. Si aucun de ces fichiers n'existe, `~/.git-credentials` sera créé et écrit.

Lors de l'effacement des informations d'identification, les informations d'identification correspondantes seront effacées de tous les fichiers.

EXEMPLES
--------

Le but de cette aide est de réduire le nombre de fois où vous devez taper votre nom d'utilisateur ou votre mot de passe. Par exemple :

------------------------------------------
$ git config credential.helper store
$ git push http://example.com/repo.git
Nom d'utilisateur : <Tapez votre nom d'utilisateur>
Mot de passe : <Tapez votre mot de passe>

[plusieurs jours plus tard]
$ git push http://example.com/repo.git
[vos informations d'identification sont utilisées automatiquement]
------------------------------------------

FORMAT DE STOCKAGE
------------------

Le fichier `.git-credentials` est stocké en texte clair. Chaque identité est stockée sur sa propre ligne comme une URL comme :

------------------------------
https://user:pass@example.com
------------------------------

Aucun autre type de ligne (par exemple, les lignes vides ou les lignes de commentaire) n'est autorisé dans le fichier, même si certaines peuvent être ignorées en silence. Ne visualisez pas et ne modifiez pas le fichier avec des éditeurs.

Lorsque Git a besoin d'une authentification pour un contexte d'URL particulier, credential-store va considérer ce contexte comme un motif à faire correspondre à chaque entrée du fichier credentials. Si le protocole, le nom d'hôte et le nom d'utilisateur (si nous en avons déjà un) correspondent, alors le mot de passe est renvoyé à Git. Voir la discussion sur la configuration dans linkgit:gitcredentials[7] pour plus d'informations.

GIT
---
Fait partie de la suite linkgit:git[1]

TRADUCTION
----------
Cette  page de manuel a été traduite par Jean-Noël Avila <jn.avila AT free DOT fr> et les membres du projet git-manpages-l10n. Veuillez signaler toute erreur de traduction par un rapport de bogue sur le site https://github.com/jnavila/git-manpages-l10n .
