Liste les commits qui sont accessibles en suivant les liens `parents` du ou des commits donnés, mais exclut les commits qui sont accessibles depuis le ou les commits donnés avec un '{caret}' devant eux. La sortie est donnée dans l'ordre chronologique inverse par défaut.

Vous pouvez considérer cela comme une opération sur un ensemble. Les commits accessibles à partir de n'importe lequel des commits donnés sur la ligne de commande forment un ensemble, puis les commits accessibles à partir de n'importe lequel de ceux donnés avec '{caret}' devant sont soustraits de cet ensemble. Les commits restants sont ceux qui apparaissent dans la sortie de la commande. Diverses autres options et paramètres de chemins peuvent être utilisés pour limiter davantage le résultat.

Ainsi, la commande suivante :

ifdef::git-rev-list[]
-----------------------------------------------------------------------
$ git rev-list foo bar ^baz
-----------------------------------------------------------------------
endif::git-rev-list[]
ifdef::git-log[]
-----------------------------------------------------------------------
$ git log foo bar ^baz
-----------------------------------------------------------------------
endif::git-log[]

signifie "liste tous les commits qui sont accessibles depuis 'foo' ou 'bar', mais pas depuis 'baz'".

Une notation spéciale "'<commit1>'..'<commit2>'" peut être utilisée comme raccourci pour "^'<commit1>' '<commit2>'". Par exemple, l'un ou l'autre des éléments suivants peut être utilisé de manière interchangeable :

ifdef::git-rev-list[]
-----------------------------------------------------------------------
$ git rev-list origin..HEAD
$ git rev-list HEAD ^origin
-----------------------------------------------------------------------
endif::git-rev-list[]
ifdef::git-log[]
-----------------------------------------------------------------------
$ git log origin..HEAD
$ git log HEAD ^origin
-----------------------------------------------------------------------
endif::git-log[]

Une autre notation spéciale est "'<commit1>'...'<commit2>'" qui est utile pour les fusions. L'ensemble de commits résultant est la différence symétrique entre les deux opérandes. Les deux commandes suivantes sont équivalentes :

ifdef::git-rev-list[]
-----------------------------------------------------------------------
$ git rev-list A B --not $(git merge-base --all A B)
$ git rev-list A...B
-----------------------------------------------------------------------
endif::git-rev-list[]
ifdef::git-log[]
-----------------------------------------------------------------------
$ git log A B --not $(git merge-base --all A B)
$ git log A...B
-----------------------------------------------------------------------
endif::git-log[]
