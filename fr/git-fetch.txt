git-fetch(1)
============

NOM
---
git-fetch - Télécharger les objets et références depuis un autre dépôt


SYNOPSIS
--------
[verse]
'git fetch' [<options>] [<dépôt> [<spéc-de-réf>...]]
'git fetch' [<options>] <groupe>
'git fetch' --multiple [<options>] [(<dépôt> | <groupe>)...]
'git fetch' --all [<options>]


DESCRIPTION
-----------
Récupérer des branches et/ou des étiquettes (collectivement, "réfs") depuis un ou plusieurs autres dépôts, ainsi que les objets nécessaires pour compléter leur historique. Les branches de suivi à distance sont mises à jour (voir la description de <spéc-de-réf> ci-dessous pour les moyens de contrôler ce comportement).

Par défaut, toute étiquette qui pointe vers les historiques recherchés est également recherchée ; l'effet est de rechercher les étiquettes qui pointent vers les branches qui vous intéressent. Ce comportement par défaut peut être modifié en utilisant les options --tags ou --no-tags ou en configurant remote.<nom>.tagOpt. En utilisant une spécification de référence qui récupère les étiquettes explicitement, vous pouvez également récupérer les étiquettes qui ne pointent pas sur les branches qui vous intéressent.

'git fetch' peut aller chercher à partir d'un seul dépôt nommé ou d'une seule URL, ou à partir de plusieurs dépôts à la fois si <groupe> est donné et qu'il y a une entrée remotes.<groupe> dans le fichier de configuration. (Voir linkgit:git-config[1]).

Lorsqu'aucun distant n'est spécifié, par défaut le distant `origin` sera utilisé, à moins qu'il n'y ait une branche amont configurée pour la branche courante.

Les noms des refs qui sont récupérés, ainsi que les noms des objets qu'ils pointent, sont écrits dans `.git/FETCH_HEAD`. Ces informations peuvent être utilisées par des scripts ou d'autres commandes git, telles que linkgit:git-pull[1].

OPTIONS
-------
include::fetch-options.txt[]

include::pull-fetch-param.txt[]

--stdin::
	Lire les spécifications de référence, une par ligne, de stdin en plus de celles fournies comme arguments. Le format "tag <nom>" n'est pas pris en charge.

include::urls-remotes.txt[]


LES BRANCHES DE SUIVI À DISTANCE CONFIGURÉES [[CRTB]]
-----------------------------------------------------

Vous interagissez souvent avec le même dépôt distant en y allant régulièrement et de manière répétée. Afin de suivre la progression d'un tel dépôt distant, `git fetch` vous permet de configurer les variables de configuration `remote.<dépôt>.fetch`.

En général, une telle variable peut ressembler à ceci :

------------------------------------------------
[remote "origin"]
	fetch = +refs/heads/*:refs/remotes/origin/*
------------------------------------------------

Cette configuration est utilisée de deux façons :

* Lorsque `git fetch` est lancé sans spécifier les branches et/ou les étiquettes à récupérer en ligne de commande, par exemple `git fetch origin` ou `git fetch`, les valeurs `remote.<dépôt>.fetch` sont utilisées comme spéc-de-réf --elles spécifient quelles réfs à récupérer et quelles réfs locales à mettre à jour. L'exemple ci-dessus va chercher toutes les branches qui existent dans `origin` (c'est-à-dire toute réf qui correspond au côté gauche de la valeur, "refs/heads/*") et mettre à jour les branches de suivi à distance correspondantes dans la hiérarchie `refs/remotes/origin/*`.

* Lorsque `git fetch` est lancé avec des branches et/ou des étiquettes explicites à récupérer en ligne de commande, par exemple `git fetch origin master`, les <spéc-de-réf>s données en ligne de commande déterminent ce qui doit être récupéré (par exemple `master` dans l'exemple, qui est un raccourci pour `master:`, ce qui signifie "chercher la branche 'master' mais je ne dis pas explicitement quelle branche de suivi à distance mettre à jour avec elle depuis la ligne de commande"), et la commande de l'exemple ne cherchera _que_ la branche 'master'. Les valeurs de `remote.<dépôt>.fetch` déterminent quelle branche de suivi à distance, s'il y en a une, est mise à jour. Lorsqu'elles sont utilisées de cette façon, les valeurs de `remote.<dépôt>.fetch` n'ont aucun effet sur la décision de ce qui est récupéré (c'est-à-dire que les valeurs ne sont pas utilisées comme spéc-de-réf lorsque la ligne de commande liste les spéc-de-réfs) ; elles ne sont utilisées que pour décider de l'endroit où les réfs qui sont récupérées sont stockées en agissant comme une table de correspondance.

Cette dernière utilisation des valeurs de `remote.<dépôt>.fetch` peut être écrasée en donnant le(s) paramètre(s) `--refmap=<spéc-de-réf>` sur la ligne de commande.

ÉLAGAGE
-------

Par défaut, Git conserve les données à moins qu'elles ne soient explicitement jetées ; cela s'étend à la conservation des références locales aux branches des distants qui ont eux-mêmes supprimé ces branches.

Si on les laisse s'accumuler, ces références périmées pourraient rendre les performances mauvaises sur les gros dépôt qui ont beaucoup de branches, et par exemple rendre la sortie de commandes comme `git branch -a --contains <commit>` inutilement verbeuse, ainsi qu'avoir un impact sur tout ce qui travaillera avec l'ensemble des références connues.

Ces références de suivi à distance peuvent être supprimées une seule fois avec l'une ou l'autre des commandes suivantes :

------------------------------------------------
# Pendant la récupération
$ git fetch --prune <nom>

# Élaguer seulement, ne pas récupére
$ git remote prune <nom>
------------------------------------------------

Pour élaguer les références dans le cadre de votre flux de travail normal sans avoir besoin de vous rappeler de l'exécuter, définissez `fetch.prune` globalement, ou `remote.<nom>.prune` pour chaque dépôt distant dans la configuration. Voir linkgit:git-config[1].

C'est là que les choses deviennent délicates et plus spécifiques. La fonction d'élagage ne se préoccupe pas vraiment des branches, elle va plutôt élaguer les références locales <--> à distance en fonction du spécificateur de référence du dépôt distant (voir `<spéc-de-réf>` et <<CRTB, BRANCHES DE SUIVI À DISTANCE CONFIGURÉES>> ci-dessus).

Par conséquent, si le spécificateur de référence du serveur distant inclut par exemple `refs/tags/*:refs/tags/*`, ou si vous lancez manuellement par exemple `git fetch --prune <nom> "refs/tags/*:refs/tags/*"`, ce ne seront pas les branches de suivi à distance qui seront supprimées, mais toute étiquette locale qui n'existe pas sur le serveur distant.

Ce n'est peut-être pas ce à quoi vous vous attendez, c'est-à-dire que vous voulez élaguer le server distant `<nom>`, mais aussi y récupérer explicitement des étiquettes, de sorte que lorsque vous le récupérez, vous supprimez toutes vos étiquettes locales, dont la plupart ne proviennent pas du dépôt distant `<nom>` au départ.

Soyez donc prudent lorsque vous utilisez un spécificateur de référence comme `refs/tags/*:refs/tags/*`, ou toute autre spécificateur de référence qui pourrait faire correspondre des références de plusieurs dépôts distants au même espace de noms local.

Étant donné que la mise à jour des branches et des étiquettes sur le dépôt distant est un cas d'utilisation courant, l'option `--prune-tags` peut être fournie avec `--prune` pour élaguer les étiquettes locales qui n'existent pas sur le dépôt distant, et forcer la mise à jour des étiquettes qui diffèrent. L'élagage des étiquettes peut également être activé avec `fetch.pruneTags` ou `remote.<nom>.pruneTags` dans la configuration. Voir linkgit:git-config[1].

L'option `--prune-tags` est équivalente à avoir `refs/tags/*:refs/tags/*` déclaré dans les spécificateurs de référence du dépôt distant. Cela peut conduire à des interactions apparemment étranges :

------------------------------------------------
# Ces deux ligne vont chercher les étiquettes
$ git fetch --no-tags origin 'refs/tags/*:refs/tags/*
$ git fetch --no-tags --prune-tags origin
------------------------------------------------

La raison pour laquelle il ne génère pas d'erreur lorsqu'il est fourni sans `--prune` ou ses pendants en configuration est pour la flexibilité des versions configurées et pour maintenir un mappage 1 = 1 entre ce que font les drapeaux de ligne de commande et ce que font les versions de configuration.

Il est raisonnable, par exemple de configurer `fetch.pruneTags = true` dans` ~ / .gitconfig` pour que les étiquettes soient élaguées chaque fois que `git fetch --prune` est exécuté, sans que chaque appel de `git fetch` sans `--prune` soit une erreur.

L'élagage des étiquettes avec `--prune-tags` fonctionne également lors de la récupération d'une URL au lieu d'un dépôt distant nommé. Toutes ces lignes élagueront les étiquettes non trouvées sur origin :

------------------------------------------------
$ git fetch origin --prune --prune-tags
$ git fetch origin --prune 'refs/tags/*:refs/tags/*
$ git fetch <url-d-origin> --prune --prune-tags
$ git fetch <url-d-origin> --prune 'refs/tags/*:refs/tags/*
------------------------------------------------

SORTIE
------

La sortie de "git fetch" dépend de la méthode de transport utilisée ; cette section décrit la sortie lors de la récupération sur le protocole Git (soit localement soit via ssh) et le protocole Smart HTTP.

L'état de la récupération est affiché sous forme de tableau, chaque ligne représentant l'état d'une seule référence. Chaque ligne est de la forme :

-------------------------------
 <drapeau> <résumé> <de> -> <à> [<raison>]
-------------------------------

Lorsque vous utilisez `--porcelain`, le format de sortie est destiné à être analysé par la machine. Contrairement aux formats de sortie lisibles par l'homme, il s'imprime donc sur la sortie standard au lieu de l'erreur standard. Chaque ligne est de la forme :

-------------------------------
<drapeau> <ancien-id-objet> <nouveau-id-objet> <référence-locale>
-------------------------------

L'état des références à jour n'est affiché que si l'option --verbose est utilisée.

En mode de sortie compact, spécifié avec la variable de configuration fetch.output, si l'un des deux `<de>` ou `<à>` est trouvé dans l'autre chaîne, il sera substitué par `*` dans l'autre chaîne. Par exemple, `master -> origin/master` devient `master -> origin/*`.

drapeau::
	Un seul caractère indiquant le statut de la référence :
(espace);; pour une récupération en avance rapide réussie ;
`+`;; pour une mise à jour forcée avec succès ;
`-`;; pour une ref. élaguée avec succès ;
`t`;; pour une mise à jour d'étiquette avec succès ;
`*`;; pour la récupération réussie d'une nouvelle réf. ;
`!`;; pour une référence qui a été rejetée ou qui n'a pas pu être mise à jour ; et
`=`;; pour une référence qui était à jour et n'avait pas besoin d'être récupérée.

résumé::
	Pour une réf récupérée avec succès, le résumé montre les anciennes et les nouvelles valeurs de la réf sous une forme qui peut être utilisée comme argument pour `git log` (c'est `<ancien>..<nouveau>` dans la plupart des cas, et `<ancien>...<nouveau>` pour les mises à jour forcées pas en avance rapide).

de::
	Le nom de la référence distante récupérée, moins son préfixe "refs/<type>/". En cas de suppression, le nom de la référence distante est "(none)".

à::
	Le nom de la référence locale en cours de mise à jour, moins son préfixe `refs/<type>/`.

raison::
	Une explication compréhensible. Dans le cas des références qui ont été récupérées avec succès, aucune explication n'est nécessaire. Dans le cas d'une référence en échec, la raison de l'échec est décrite.

EXEMPLES
--------

* Mettre à jour les branches de suivi distantes :
+
------------------------------------------------
$ git fetch origin
------------------------------------------------
+
La commande ci-dessus copie toutes les branches de l'espace de nom distant `refs/heads/` et les stocke dans l'espace de noms local `refs/remotes/origin/`, sauf si l'option `remote. <dépôt> .fetch` est utilisée pour spécifier un spécificateur de référence autre que celui par défaut.

* En utilisant explicitement les spécificateurs de référence :
+
------------------------------------------------
$ git fetch origin +seen:seen maint:tmp
------------------------------------------------
+
Cela met à jour (ou crée, si nécessaire) les branches `seen` et `tmp` dans le dépôt local en récupérant (respectivement) les branches `seen` et `maint` dans le dépôt distant.
+
La branche `seen` sera mise à jour même si ce n'est pas en avance rapide, car elle est préfixée par un signe plus ; `tmp` ne le sera pas.

* Jette un coup d'œil à la branche d'un dépôt distant, sans configurer le distant dans votre dépôt local :
+
------------------------------------------------
$ git fetch git://git.kernel.org/pub/scm/git/git.git maint
$ git log FETCH_HEAD
------------------------------------------------
+
La première commande récupère la branche `maint` dans le dépôt à `git://git.kernel.org/pub/scm/git/git.git` et la seconde commande utilise `FETCH_HEAD` pour examiner la branche avec linkgit:git-log[1]. Les objets récupérés seront éventuellement supprimés par le service d'entretien intégré de git (voir linkgit:git-gc[1]).

include::transfer-data-leaks.txt[]

CONFIGURATION
-------------

include::includes/cmd-config-section-all.txt[]

include::config/fetch.txt[]

BOGUES
------
L'utilisation de --recurse-submodules ne permet actuellement d'obtenir de nouveaux commits que dans les sous-modules qui sont présents par exemple dans \$GIT_DIR/modules/`. Lorsqu'un nouveau sous-module est ajouté en amont, le sous-module lui-même ne peut pas être récupéré, ce qui rend impossible de vérifier ce sous-module plus tard sans avoir à le récupérer à nouveau. Ce problème devrait être corrigé dans une prochaine version de Git.

VOIR AUSSI
----------
linkgit:git-pull[1]

GIT
---
Fait partie de la suite linkgit:git[1]

TRADUCTION
----------
Cette  page de manuel a été traduite par Jean-Noël Avila <jn.avila AT free DOT fr> et les membres du projet git-manpages-l10n. Veuillez signaler toute erreur de traduction par un rapport de bogue sur le site https://github.com/jnavila/git-manpages-l10n .
