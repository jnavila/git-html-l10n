git-diff(1)
===========

NOM
---
git-diff - Affiche les modifications entre les commits, un commit et l'arbre de travail, etc


SYNOPSIS
--------
[synopsis]
git diff [<options>] [<commit>] [--] [<chemin>...]
git diff [<options>] --cached [--merge-base] [<commit>] [--] [<chemin>...]
git diff [<options>] [--merge-base] <commit> [<commit>...]<commit> [--] [<chemin>...]
git diff [<options>] <commit>...<commit> [--] [<chemin>...]
git diff [<options>] <blob> <blob>
git diff [<options>] --no-index [--] <chemin> <chemin>

DESCRIPTION
-----------
Affiche les modifications entre l'arbre de travail et l'index ou un arbre, les modifications entre l'index et un arbre, les modifications entre deux arbres, les modifications résultant d'une fusion, les modifications entre deux objets blobs ou les modifications entre deux fichiers sur disque.

`git diff [<options>] [--] [<chemin>...]`::

	Cette forme sert à visualiser les modifications que vous avez faites par rapport à l'index (la zone de préparation du prochain commit). En d'autres termes, les différences sont ce que vous _pourriez_ indiquer à Git d'ajouter à l'index mais que vous n'avez pas encore ajoutées. Vous pouvez indexer ces modifications en utilisant linkgit:git-add[1].

`git diff [<options>] --no-index [--] <chemin> <chemin>`::

	Cette forme sert à comparer les deux chemins indiqués sur le système de fichiers. Vous pouvez omettre l'option `--no-index` si la commande est lancée dans un arbre de travail contrôlé par Git et qu'au moins un des chemins pointe hors de l'arbre de travail ou si la commande est lancée hors d'un arbre de travail contrôlé par Git. Cette forme implique `--exit-code`.

`git diff [<options>] --cached [--merge-base] [<commit>] [--] [<chemin>...]`::

	Cette forme sert à visualiser les modifications que vous avez indexées pour la prochaine validation vis-à-vis du _<commit>_ nommé. Typiquement, vous voudriez comparer avec le _<commit>_ (`HEAD`) le plus récent, ce qui est fait automatiquement si vous ne spécifiez pas <commit>. Si `HEAD` n'existe pas (par exemple, des branches à naître) et si _<commit>_ n'est pas fourni, les modifications indexées sont affichées. `--staged` est synonyme de `--cached`.
+
Si `--merge-base` est donné, au lieu d'utiliser _<commit>_, utiliser la base de fusion de _<commit>_ et `HEAD`. `git diff --cached --merge-base A` est équivalent à `git diff --cached $(git merge-base A HEAD)`.

`git diff [<options>] [--merge-base] <commit> [--] [<chemin>...]`::

	Cette forme sert à visualiser les modifications présentes dans l'arbre de travail par rapport au _<commit>_ indiqué. Vous pouvez utiliser `HEAD` pour le comparer au commit le plus récent ou un nom de branche pour le comparer avec le sommet d'une branche différente.
+
Si `--merge-base` est donné, au lieu d'utiliser _<commit>_, utiliser la base de fusion de _<commit>_ et `HEAD`. `git diff --merge-base A` est équivalent à `git diff $(git merge-base A HEAD)`.

`git diff [<options>] [--merge-base] <commit> <commit> [--] [<chemin>...]`::

	Ceci sert à visualiser les modifications entre deux _<commit>_ arbitraires.
+
Si `--merge-base` est donné, utiliser la base de fusion des deux commits pour le côté "before". `git diff --merge-base A B` est équivalent à `git diff $ (git merge-base A B) B`.

`git diff [<options>] <commit> <commit>...<commit> [--] [<chemin>...]`::

	Cette forme permet de visualiser les résultats d'un commit de fusion. Le premier _<commit>_ indiqué doit être la fusion elle-même ; les deux autres commits ou plus doivent être ses parents. Des façons pratiques de produire l'ensemble des révisions souhaitées sont d'utiliser les suffixes `@` et `^!`Si `A` est un commit de fusion, alors `git diff A A^@`, `git diff A^!` et `git show A` donnent tous la même différence combinée.

`git diff [<options>] <commit>..<commit> [--] [<chemin>...]`::

	Cette forme est synonyme de la forme précédente (sans le `..`) pour visualiser les modification entre deux __<commit>__s arbirtraires. Si _<commit>_ est omis d'un côté, cela aura le même effet que de spécifier `HEAD` à la place.

`git diff [<options>] <commit>...<commit> [--] [<chemin>...]`::

	Cette forme sert à visualiser les modifications sur la branche contenant et jusqu'au second _<commit>_, en débutant à l'ancêtre commun au deux _<commit>_. `git diff A...B` est équivalent à `git diff $(git merge-base A B) B`. Vous pouvez omettre l'un ou l'autre _<commit>_, ce qui a le même effet que de spécifier `HEAD` à la place.

Juste au cas où vous feriez quelque chose d'exotique, il convient de noter que la totalité des _<commits>_ de la description ci-dessus, sauf dans le cas `--merge-base` et dans les deux dernières formes qui utilisent les notations `..`, peut être n'importe quel _<arbre>_. Un arbre intéressant est celui pointé par la réf nommée `AUTO_MERGE', qui est écrit par la stratégie de fusion `ort` lors de conflits de fusions (voir linkgit:git-merge[1]). La comparaison de l'arbre de travail avec `AUTO_MERGE` montre les modifications que vous avez apportées jusqu'à présent pour résoudre les conflits textuels (voir les exemples ci-dessous).

Pour une liste plus complète des moyens de spécifier _<commit>_, voir la section « SPÉCIFIER LES RÉVISIONS » dans linkgit:gitrevisions[7]. Cependant, `diff` concerne la comparaison de deux _point finaux_, et non d'intervalles, et les notations d'intervalle (`<commit>..<commit>` et `<commit>...<commit>`) ne réfèrent pas un intervalle tel que défini dans la section « SPÉCIFIER LES RÉVISIONS » de linkgit:gitrevisions[7].

`git diff [<options>] <blob> <blob>`::

	Cette forme sert à visualiser la différence entre les contenus bruts de deux objets blob.

OPTIONS
-------
:git-diff: 1
include::diff-options.txt[]

`-1`::
`--base`::
`-2`::
`--ours`::
`-3`::
`--theirs`::
	Comparer l'arbre de travail à
+
--
 * la version "base" (étape #1) en utilisant `-1` ou `--base`,
 * "notre branche" (étape #2) en utilisant `-2` ou `--ours`, ou
 * "leur branche" (étape #3) en utilisant `-3` ou `--theirs`.
--
+
L'index contient ces étapes seulement pour les entrées non-fusionnées, c'est-à-dire lors de la résolution de conflits. Voir la section « Fusion à 3 points » de linkgit:git-read-tree[1] pour de plus amples informations.

`-0`::
	Omettre la sortie de diff pour les entrées non-fusionnées et affiche juste « Non fusionné ». Ne peut être utilisé que lors de comparaison de l'arbre de travail avec l'index.

`<chemin>...`::
	Les paramètres _<chemin>_, quand spécifiés, sont utilisés pour limiter la différence aux chemins indiqués (vous pouvez indiquer des noms de répertoire et visualiser les différences pour tous les fichiers qu'ils contiennent).


include::diff-format.txt[]

EXEMPLES
--------

Différents moyens de vérifier votre arbre de travail::
+
------------
$ git diff            <1>
$ git diff --cached   <2>
$ git diff HEAD       <3>
$ git diff AUTO_MERGE <4>
------------
+
<1> Modifications dans l'arbre de travail pas encore indexées pour la prochaine validation.
<2> Modifications entre l'index et votre dernier commit ; ce que vous valideriez si vous lanciez `git commit` sans l'option `-a`.
<3> Modifications dans l'arbre de travail depuis votre dernier commit ; ce que vous valideriez si vous lanciez `git commit -a`
<4> Changements dans l'arbre de travail que vous avez fait pour résoudre les conflits textuels jusqu'à présent.

Comparaison de deux commits arbitraires::
+
------------
$ git diff test            <1>
$ git diff HEAD -- ./test  <2>
$ git diff HEAD^ HEAD      <3>
------------
+
<1> Au lieu d'utiliser le sommet de la branche actuelle, compare avec le sommet de la branche « test ».
<2> Au lieu de comparer avec le sommet de la branche « test », compare avec le sommet de la branche actuelle, mais limite la comparaison au fichier « test ».
<3> Compare la version précédant le dernier commit et le dernier commit.

Comparaison de branches::
+
------------
$ git diff sujet master    <1>
$ git diff sujet..master   <2>
$ git diff sujet...master  <3>
------------
+
<1> Modifications entre les sommets des branches sujet et master.
<2> Identique à ci-dessus.
<3> Modifications présentes sur la branche master depuis que la branche sujet en a divergé.

Limitation de la sortie du diff::
+
------------
$ git diff --diff-filter=MRC            <1>
$ git diff --name-status                <2>
$ git diff arch/i386 include/asm-i386   <3>
------------
+
<1> Ne montre que les modifications, les renommages et les copies, mais pas les additions ou les suppressions.
<2> Ne montre que les noms et la nature de la modification, mais pas la sortie de diff.
<3> Limite la sortie de diff aux sous-arbres indiqués.

Bricoler la sortie diff::
+
------------
$ git diff --find-copies-harder -B -C  <1>
$ git diff -R                          <2>
------------
+
<1> Dépense des cycles supplémentaires de CPU pour trouver les renommages, les copies ou les réécritures complètes (très cher).
<2> Affiche les diff inversés.

CONFIGURATION
-------------

include::includes/cmd-config-section-all.txt[]

:git-diff: 1
include::config/diff.txt[]

VOIR AUSSI
----------
`diff`(1), linkgit:git-difftool[1], linkgit:git-log[1], linkgit:gitdiffcore[7], linkgit:git-format-patch[1], linkgit:git-apply[1], linkgit:git-show[1]

GIT
---
Fait partie de la suite linkgit:git[1]

TRADUCTION
----------
Cette  page de manuel a été traduite par Jean-Noël Avila <jn.avila AT free DOT fr> et les membres du projet git-manpages-l10n. Veuillez signaler toute erreur de traduction par un rapport de bogue sur le site https://github.com/jnavila/git-manpages-l10n .
