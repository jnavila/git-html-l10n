git-merge-tree(1)
=================

NOM
---
git-merge-tree - Effectue une fusion sans toucher à l'index ou à l'arbre de travail


SYNOPSIS
--------
[verse]
'git merge-tree' [--write-tree] [<options>] <branche1> <branche2>
'git merge-tree' [--trivial-merge] <arbre-base> <branche1> <branche2> (obsolète)

[[NEWMERGE]]
DESCRIPTION
-----------

Cette commande a un mode moderne `--write-tree` et un mode `---trivial-merge`. À l'exception de la section <<DEPMERGE,DESCRIPTION OBSOL ÈTE>> à la fin, le reste de cette documentation décrit le mode moderne `--write-tree`.

Exécute une fusion, mais ne fait pas de nouveaux commits et ne lit ni n'écrit ni l'arbre de travail ni l'index.

La fusion effectuée utilisera la même caractéristique que le linkgit:git-merge[1] « réel », y compris :

  * fusion de contenu à trois branches des fichiers individuels
  * détection de renommage
  * gestion correcte des conflits de répertoires et de fichiers
  * consolidation récursive des ancêtres (c.-à-d. lorsqu'il y a plus d'une base de fusion, créant une base de fusion virtuelle en fusionnant les bases de fusion)
  * etc.

Une fois la fusion terminée, un nouvel objet d'arborescence est créé au sommet. Voir `SORTIE` ci-dessous pour plus de détails.

OPTIONS
-------

-z::
	Ne pas citer les noms de fichiers dans la section <information de fichiers en conflit>, et terminer chaque nom de fichier avec un caractère NUL plutôt qu'un retour à la ligne. Commencer également la section des messages avec un caractère NUL au lieu d'une nouvelle ligne. Voir <<SORTIE>> ci-dessous pour plus d'informations.

--name-only::
	Dans la section d'Information sur les fichiers en conflit, au lieu d'écrire une liste de tuples (mode, oid, étape, chemin) sur la sortie pour les fichiers en conflit, ne fournir qu'une liste de noms de fichiers avec des conflits (et ne pas lister les noms de fichiers plusieurs fois s'ils ont plusieurs étapes en conflit).

--[no-]messages::
	Écrire tous les messages d'information tels que « Auto-fusion <chemin> » ou les notes de CONFLIT jusqu'à la fin de la sortie. Si non précisé, le comportement par défaut est d'inclure ces messages s'il y a des conflits de fusion, et de les omettre autrement.

--allow-unrelated-histories::
	merge-tree sera en erreur par défaut si les deux branches spécifiées ne partagent aucune histoire commune. Ce drapeau peut être donné pour annuler cette vérification et faire poursuivre tout de même la fusion.

--merge-base=<commit>::
	Au lieu de trouver les bases de fustion pour la <branche1> et <branche2>, il n'y a pas de prise en charge pour spécifier une base de fusion pour la fusion et préciser plusieurs bases. Cette option est incompatible avec `--stdin'.

[[OUTPUT]]
SORTIE
------

Pour une fusion réussie, la sortie de git-merge-tree est simplement une ligne :

	<OID de l'arbre de sommet>

Alors que pour une fusion conflictuelle, la sortie est par défaut de la forme :

	<OID de l'arbre supérieur>
	<Information sur les fichiers en conflit>
	<Messages d'information>

Elles sont examinées individuellement ci-dessous.

Cependant, il y a une exception. Si `--stdin` est passé, il y a une section supplémentaire au début, un caractère NUL à la fin, et toutes les sections se répètent pour chaque ligne d'entrée. Ainsi, si la première fusion est en conflit et que la seconde est propre, la production serait de la forme :

	<Statut de fusion>
	<OID de l'arbre supérieur>
	<Information de fichiers en conflit>
	<Messages d'information>
	NUL
	<Statut de fusion>
	<OID de l'arbre supérieur>
	NUL

[[MS]]
Status de fusion
~~~~~~~~~~~~~~~~

C'est un statut (nombre entier) suivi d'un caractère NUL. Le statut entier est :

     0 : la fusion avait des conflits
     1 : la fusion était propre
     <0 : quelque chose a empêché la fusion de fonctionner (p. ex. accès au dépôt
	objets empêché par le système de fichiers)

[[OIDTLT]]
OID de l'arbre supérieur
~~~~~~~~~~~~~~~~~~~~~~~~

C'est un objet d'arbre qui représente ce qui serait extrait dans l'arbre de travail à la fin de `git merge`. S'il y avait des conflits, alors les fichiers dans cet arbre peuvent avoir des marqueurs de conflit intégrés. Cette section est toujours suivie d'une nouvelle ligne (ou NUL si `-z` est passé).

[[CFI]]
Information sur les fichiers en conflit
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

C'est une séquence de lignes au format

	<mode> <objet> <étape> <nom-de-fichier>

Le nom du fichier sera cité comme expliqué pour la variable de configuration `core.quotePath` (voir linkgit:git-config[1]). Cependant, si l'option `--name-only` est passée, le mode, l'objet, et l'étape seront omis. Si l'option `-z` est passée, les "lignes" sont terminées par un caractère NUL au lieu d'un caractère de nouvelle ligne.

[[IM]]
Messages d'information
~~~~~~~~~~~~~~~~~~~~~~

Cette section fournit des messages d'information, généralement sur les conflits. Le format de la section varie considérablement selon que `-z` est passé.

Si `-z` est passé :

Le format de sortie est zéro ou plus enregistrements d'information sur les conflits, chacun de la forme :

	<liste-de-chemins><type-de-conflit>NUL<message-de-conflit>NUL

où <liste-de-chemins> est de la forme

	<nombre-de-chemins>NUL<chemin1>NUL<chemin2>NUL...<cheminN>NUL

et comprend des chemins (ou des noms de branches) touchés par le conflit ou le message d'information dans<message-de-conflit>. De plus, <type-de-conflit> est une chaîne stable expliquant le type de conflit, comme

  * "Fusion automatique"
  * "CONFLIT (renommage/suppression)"
  * "CONFLIT (le sous-module manque d'une base de fusion)"
  * "CONFLIT (binaire)"

et <message-de-conflit> est un message plus détaillé sur le conflit qui souvent (mais pas toujours) embarque la <description-courte-stable>. Ces chaînes peuvent changer dans les futures versions Git. Quelques exemples :

  * "Fusion automatique de <fichier>"
  * "CONFLIT (renommage/suppression) :<ancienfichier> renommé... mais supprimé dans ..."
  * "Échec de la fusion du sous-module <sous-module> (pas de base de fusion)"
  * "Attention : ne peut pas fusionner des fichiers binaires : <nom-de-fichier>"

Si `-z` n'est PAS passé :

Cette section commence par une ligne vierge pour la séparer des sections précédentes, puis ne contient que les informations <message-de-conflit> de la section précédente (séparées par des nouvelles lignes). Ce sont des chaînes non-stables qui ne doivent pas être analysées par des scripts, et sont simplement destinées à la consommation humaine. De plus, notez que si les chaînes <message-de-conflit> ne contiennent généralement pas de nouvelles lignes intégrées, elles le font parfois. (Cependant, les messages libres n'auront jamais de caractère NUL intégré). Ainsi, l'ensemble de l'information est destiné aux lecteurs humains comme une agglomération de tous les messages de conflit.

STATUT DE SORTIE
----------------

Pour une fusion réussie et non conflictuelle, le statut de sortie est de 0. Lorsque la fusion a des conflits, le statut de sortie est 1. Si la fusion n'est pas capable de se terminer (ou de démarrer) en raison d'une erreur quelconque, l'état de sortie est autre chose que 0 ou 1 (et la sortie n'est pas spécifiée). Lorsque --stdin est passé, le statut de retour est 0 pour les fusions réussies et conflictuelles, et autre chose que 0 ou 1 si elle ne peut pas compléter tous les fusions demandées.

NOTES D'UTILISATION
-------------------

Cette commande est destinée à la plomberie de bas niveau, semblable à linkgit:git-hash[1], linkgit:git-mktree[1], linkgit:git-commit-tree[1], linkgit:git-write-tree[1], linkgit:git-update-ref[1], et linkgit:git-mktag[1]. Ainsi, elle peut être utilisée comme partie d'une série d'étapes telles que :

       NEWTREE=$(git merge-tree --write-tree $BRANCH1 $BRANCH2)
       test $? -eq 0 || die "Il y avait des conflits..."
       NEWCOMMIT=$(git commit-tree $NEWTREE -p $BRANCH1 -p $BRANCH2)
       git update-ref $BRANCH1 $NEWCOMMIT

Notez que lorsque le statut de sortie est non-zéro, `NEWTREE` dans cette séquence contiendra beaucoup plus qu'un arbre.

Pour les conflits, la sortie comprend les mêmes informations que vous obtiendriez avec linkgit:git-merge[1] :

  * ce qui serait écrit à l'arbre de travail ((l'<<OIDTLT,OID de l'arbre de supraniveau>>))
  * les étapes d'ordre supérieur qui seraient écrites dans l'index (l'<<CFI,Information de fichier en conflit>>)
  * tous les messages qui auraient été affichés sur stdout (les <<IM,messages d'information>>)

FORMAT D'ENTRÉE
---------------
Le format d'entrée de 'git merge-tree --stdin' est entièrement textuel. Chaque ligne a ce format :

	[<commit-de-base> -- ]<branche1> <branche2>

If one line is separated by `--`, the string before the separator is used for specifying a merge-base for the merge and the string after the separator describes the branches to be merged.

ERREURS À ÉVITER
----------------

Do NOT look through the resulting toplevel tree to try to find which files conflict; parse the <<CFI,Conflicted file info>> section instead. Not only would parsing an entire tree be horrendously slow in large repositories, there are numerous types of conflicts not representable by conflict markers (modify/delete, mode conflict, binary file changed on both sides, file/directory conflicts, various rename conflict permutations, etc.)

Do NOT interpret an empty <<CFI,Conflicted file info>> list as a clean merge; check the exit status. A merge can have conflicts without having individual files conflict (there are a few types of directory rename conflicts that fall into this category, and others might also be added in the future).

Do NOT attempt to guess or make the user guess the conflict types from the <<CFI,Conflicted file info>> list. The information there is insufficient to do so. For example: Rename/rename(1to2) conflicts (both sides renamed the same file differently) will result in three different file having higher order stages (but each only has one higher order stage), with no way (short of the <<IM,Informational messages>> section) to determine which three files are related. File/directory conflicts also result in a file with exactly one higher order stage. Possibly-involved-in-directory-rename conflicts (when "merge.directoryRenames" is unset or set to "conflicts") also result in a file with exactly one higher order stage. In all cases, the <<IM,Informational messages>> section has the necessary info, though it is not designed to be machine parseable.

Do NOT assume that each paths from <<CFI,Conflicted file info>>, and the logical conflicts in the <<IM,Informational messages>> have a one-to-one mapping, nor that there is a one-to-many mapping, nor a many-to-one mapping. Many-to-many mappings exist, meaning that each path can have many logical conflict types in a single merge, and each logical conflict type can affect many paths.

Do NOT assume all filenames listed in the <<IM,Informational messages>> section had conflicts. Messages can be included for files that have no conflicts, such as "Auto-merging <file>".

AVOID taking the OIDS from the <<CFI,Conflicted file info>> and re-merging them to present the conflicts to the user. This will lose information. Instead, look up the version of the file found within the <<OIDTLT,OID of toplevel tree>> and show that instead. In particular, the latter will have conflict markers annotated with the original branch/commit being merged and, if renames were involved, the original filename. While you could include the original branch/commit in the conflict marker annotations when re-merging, the original filename is not available from the <<CFI,Conflicted file info>> and thus you would be losing information that might help the user resolve the conflict.

[[DEPMERGE]]
DESCRIPTION DÉCONSEILLÉE
------------------------

Per the <<NEWMERGE,DESCRIPTION>> and unlike the rest of this documentation, this section describes the deprecated `--trivial-merge` mode.

Other than the optional `--trivial-merge`, this mode accepts no options.

This mode reads three tree-ish, and outputs trivial merge results and conflicting stages to the standard output in a semi-diff format. Since this was designed for higher level scripts to consume and merge the results back into the index, it omits entries that match <branch1>. The result of this second form is similar to what three-way 'git read-tree -m' does, but instead of storing the results in the index, the command outputs the entries to the standard output.

Ce formulaire n'a pas seulement une applicabilité limitée (une fusion triviale ne peut pas gérer les fusions de contenu de fichiers individuels, la détection de renom, la manipulation de conflits répertoires/fichiers, etc.), il est également difficile de travailler avec le format de sortie, et il sera généralement moins performant que la première même sur les fusions réussies (surtout dans les grands dépôts).

GIT
---
Fait partie de la suite linkgit:git[1]

TRADUCTION
----------
Cette  page de manuel a été traduite par Jean-Noël Avila <jn.avila AT free DOT fr> et les membres du projet git-manpages-l10n. Veuillez signaler toute erreur de traduction par un rapport de bogue sur le site https://github.com/jnavila/git-manpages-l10n .
