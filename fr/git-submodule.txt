git-submodule(1)
================

NOM
---
git-submodule - Initialisation, mise à jour ou inspection des sous-modules


SYNOPSIS
--------
[verse]
'git submodule' [--quiet] [--cached]
'git submodule' [--quiet] add [<options>] [--] <dépôt> [<chemin>]
'git submodule' [--quiet] status [--cached] [--recursive] [--] [<chemin>...]
'git submodule' [--quiet] init [--] [<chemin>...]
'git submodule' [--quiet] deinit [-f|--force] (--all|[--] <chemin>...)
'git submodule' [--quiet] update [<options>] [--] [<chemin>...]
'git submodule' [--quiet] set-branch [<options>] [--] <chemin>
'git submodule' [--quiet] set-url [--] <chemin> <nouvelle-url>
'git submodule' [--quiet] summary [<options>] [--] [<chemin>...]
'git submodule' [--quiet] foreach [--recursive] <commande>
'git submodule' [--quiet] sync [--recursive] [--] [<chemin>...]
'git submodule' [--quiet] absorbgitdirs [--] [<chemin>...]


DESCRIPTION
-----------
Inspecte, met à jour et gère les sous-modules.

Pour plus d'informations sur les sous-modules, voir
linkgit:gitsubmodules[7].

COMMANDES
---------
Sans arguments, montrer l'état des sous-modules existants.  Plusieurs
sous-commandes sont disponibles pour effectuer des opérations sur les
sous-modules.

add [-b <branche>] [-f|--force] [--name <nom>] [--reference <dépôt>] [--depth <profondeur>] [--] <dépôt> [<chemin>]::
	Ajouter le dépôt donné comme sous-module au chemin donné vers les
	modifications à valider à côté du projet en cours : le projet en cours est
	appelé « superprojet ».
+
<dépôt> est l'URL du dépôt d'origine du nouveau sous-module.  Il peut s'agir
soit d'une URL absolue, soit (si elle commence par ./ ou ../) de
l'emplacement par rapport au dépôt distant par défaut du superprojet
(veuillez noter que pour spécifier un dépôt 'foo.git', voisin d'un
superprojet 'bar.git', vous devrez utiliser `../foo.git` au lieu de
`./foo.git` - comme on pourrait s'y attendre en suivant les règles pour les
URL relatives - car l'évaluation des URL relatives dans Git est identique à
celle des répertoires relatifs).
+
Le distant par défaut est le distant de la branche de suivi à distance de la
branche actuelle. Si une telle branche de suivi à distance n'existe pas ou
si HEAD est détachée, "origin" est supposé être le distant par défaut.  Si
le superprojet n'a pas de distant par défaut configuré, le superprojet est
l'amont d'autorité et le répertoire de travail actuel est utilisé à la
place.
+
L'argument facultatif <chemin> est l'emplacement relatif du sous-module
cloné dans le superprojet. Si <chemin> n'est pas donné, la partie canonique
du dépôt de sources est utilisée ("depot" pour "/chemin/du/depot.git" et
"foo" pour "hote.xz:foo/.git"). Si <chemin> existe et est déjà un dépôt Git
valide, alors il est indexé pour le commit sans clonage. Le <chemin> est
également utilisé comme nom logique du sous-module dans ses entrées de
configuration, sauf si `--name` est utilisé pour spécifier un nom logique.
+
L'URL donnée est enregistrée dans  `.gitmodules` pour être utilisée par les
utilisateurs qui clonent le superprojet plus tard. Si l'URL est donnée par
rapport au dépôt du superprojet, on suppose que les dépôts du superprojet et
du sous-module seront conservés ensemble au même emplacement relatif, et que
seule l'URL du superprojet doit être fournie. git-submodule localisera
correctement le sous-module en utilisant l'URL relative dans `.gitmodules`.

status [--cached] [--recursive] [--] [<chemin>...]::
	Afficher le statut des sous-modules. Cela affichera le SHA-1 du commit
	actuellement extrait pour chaque sous-module, ainsi que le chemin du
	sous-module et la sortie de 'git describe' pour le SHA-1. Chaque SHA-1 sera
	éventuellement préfixé par `-` si le sous-module n'est pas initialisé, `+`
	si le commit du sous-module actuellement extrait ne correspond pas au SHA-1
	trouvé dans l'index du dépôt contenant et `U` si le sous-module a des
	conflits de fusion.
+
Si `--cached` est spécifié, cette commande imprimera à la place le SHA-1
enregistre dans le superprojet pour chaque sous-module.
+
Si `--recursive` est spécifié, cette commande va parcourir récursivement les
sous-modules imbriqués, et montrer leur statut également.
+
Si vous n'êtes intéressé que par les modifications des sous-modules
actuellement initialisés par rapport au commit enregistré dans l'index ou
dans HEAD, linkgit:git-status[1] et linkgit:git-diff[1] vous fourniront
également ces informations (et peuvent également signaler les modifications
de l'arbre de travail d'un sous-module).

init [--] [<chemin>...]::
	Initialiser les sous-modules enregistrés dans l'index (qui ont été ajoutés
	et validés ailleurs) en définissant `submodule.$nom.url` dans
	.git/config. Il utilise le même paramètre de `.gitmodules` comme modèle. Si
	l'URL est relative, elle sera résolue en utilisant le distant par
	défaut. S'il n'y a pas de distant par défaut, le dépôt actuel sera supposé
	être en amont.
+
Les arguments facultatifs <chemin> limitent les sous-modules qui seront
initialisés.  Si aucun chemin n'est spécifié et que submodule.active a été
configuré, les sous-modules configurés pour être actifs seront initialisés,
sinon tous les sous-modules sont initialisés.
+
Lorsqu'il est présent, copie également la valeur de
`submodule.$nom.update`.  Cette commande ne modifie pas les informations
existantes dans le fichier .git/config.  Vous pouvez ensuite personnaliser
les URL de clonage de sous-module dans .git/config pour votre configuration
locale et passer à `git submodule update` ; vous pouvez aussi simplement
utiliser `git submodule update --init` sans l'étape explicite 'init' si vous
n'avez pas l'intention de personnaliser l'emplacement des sous-module.
+
Voir la sous-commande d'ajout pour la définition du distant par défaut.

deinit [-f|--force] (--all|[--] <chemin>...)::
	Désenregistrez les sous-modules donnés, c'est-à-dire supprimez toute la
	section `submodule.$name` de .git/config ainsi que leur arborescence de
	travail. Les appels ultérieurs à `git submodule update`, `git submodule
	foreach` et `git submodule sync` ignoreront tous les sous-modules non
	enregistrés jusqu'à ce qu'ils soient initialisés à nouveau, donc utilisez
	cette commande si vous ne voulez plus avoir de vérification locale du
	sous-module dans votre arbre de travail.
+
Lorsque la commande est exécutée sans pathspec, elle sort en erreur, au lieu
de tout dé-initialiser, pour éviter les erreurs.
+
Si `--force` est spécifié, l'arbre de travail du sous-module sera supprimé
même s'il contient des modifications locales.
+
Si vous voulez vraiment supprimer un sous-module du dépôt et valider le
résultat, utilisez plutôt linkgit:git-rm[1]. Voir linkgit:gitsubmodules[7]
pour les options de suppression.

update [--init] [--remote] [-N|--no-fetch] [--[no-]recommend-shallow] [-f|--force] [--checkout|--rebase|--merge] [--reference <dépôt>] [--depth <profondeur>] [--recursive] [--jobs <n>] [--[no-]single-branch] [--] [<chemin>...]::
+
--
Mettre à jour les sous-modules enregistrés pour qu'ils correspondent aux
attentes du superprojet en clonant les sous-modules manquants, en récupérant
les commits manquants dans les sous-modules et en mettant à jour l'arbre de
travail des sous-modules. La "mise à jour" peut être effectuée de plusieurs
façons, en fonction des options de la ligne de commande et de la valeur de
la variable de configuration `submodule.<nom>.update`. L'option de ligne de
commande a la priorité sur la variable de configuration. Si aucune des deux
n'est donnée, un 'checkout' est effectué.  Les procédures de
'update'supportées aussi bien en ligne de commande que par la configuration
`submodule.<nom>.update`sont :

	checkout;; 	le commit enregistré dans le superprojet sera
	    extrait dans le sous-module avec une HEAD détachée.
+
Si `--force` est spécifié, le sous-module sera extrait (en utilisant `git
checkout --force`), même si le commit spécifié dans l'index du dépôt
contenant correspond déjà au commit extrait dans le sous-module.

	rebase;; 	la branche actuelle du sous-module sera rebasée
	    sur le commit enregistré dans le super-projet.

	merge;; 	le commit enregistré dans le superprojet sera fusionné
	    dans la branche actuelle du sous-module.

Les procédures 'update' suivantes sont uniquement disponibles via la
variable de configuration `submodule.<nom>.update` :

	commande personnalisée;; 	commande shell arbitraire qui prend un seul
	    argument (le sha1 du commit enregistré dans le
	    superprojet) est exécuté. Lorsque `submodule.<nom>.update`
	    est réglé sur '!command', le reste après le point d'exclamation
	    est la commande personnalisée.

	none;; 	le sous-module n'est pas mis à jour.

Si le sous-module n'est pas encore initialisé, et que vous souhaitez
simplement utiliser le paramètre stocké dans `.gitmodules`, vous pouvez
initialiser automatiquement le sous-module avec l'option `--init`.

Si `--recursive` est spécifié, cette commande va parcourir récursivement les
sous-modules enregistrés, et mettre à jour tous les sous-modules imbriqués à
l'intérieur.
--
set-branch (-b|--branch) <branche> [--] <chemin>::
set-branch (-d|--default) [--] <chemin>::
	Définir la branche distante par défaut pour le sous-module. L'option
	`--branch` permet de spécifier la branche distante. L'option `--default`
	supprime la clé de configuration submodule.<nom>.branch, ce qui fait que la
	branche de suivi par défaut est la branche 'HEAD' distante .

set-url [--] <chemin> <nouvelle-url>::
	Fixer l'URL du sous-module spécifié à <nouvelle-url>. Ensuite, il
	synchronisera automatiquement la nouvelle configuration de l'URL distante du
	sous-module.

summary [--cached|--files] [(-n|--summary-limit) <n>] [commit] [--] [<chemin>...]::
	Afficher le résumé du commit entre le commit donné (par défaut HEAD) et
	l'arbre de travail/index. Pour un sous-module en question, une série de
	commits dans le sous-module entre le commit donné du super projet et l'index
	ou l'arbre de travail (commuté par `--cached`) sont affichés. Si l'option
	`--files` est donnée, afficher la série de commits dans le sous-module entre
	l'index du super projet et l'arbre de travail du sous-module (cette option
	ne permet pas d'utiliser l'option `--cached` ou de fournir un commit
	explicite).
+
L'utilisation de l'option `--submodule=log` avec linkgit:git-diff[1]
fournira également cette information.

foreach [--recursive] <commande>::
	Évaluer une commande shell arbitraire dans chaque sous-module extrait.  La
	commande a accès aux variables $name, $sm_path, $displaypath, $sha1 et
	$toplevel : $name est le nom de la section du sous-module concernée dans
	`.gitmodules`, $sm_path est le chemin du sous-module tel qu'il est
	enregistré dans le superprojet immédiat, $displaypath contient le chemin
	relatif du répertoire de travail courant au répertoire racine du
	sous-modules, $sha1 est le commit tel qu'il est enregistré dans le
	superprojet immédiat, et $toplevel est le chemin absolu vers le niveau
	supérieur du superprojet immédiat.  Notez que pour éviter les conflits avec
	'$PATH' sous Windows, la variable '$path' est maintenant un synonyme
	obsolète de la variable '$sm_path'.  Tous les sous-modules définis dans le
	superprojet mais non extraits sont ignorés par cette commande. A moins qu'on
	ne lui donne `--quiet`, foreach imprime le nom de chaque sous-module avant
	d'évaluer la commande.  Si la variable `--recursive` est donnée, les
	sous-modules sont parcourus de manière récursive (c'est-à-dire que la
	commande shell donnée est également évaluée dans les sous-modules
	imbriqués).  Un retour non nul de la commande dans un sous-module quelconque
	entraîne l'arrêt du traitement. Il est possible d'y remédier en ajoutant '||
	:' à la fin de la commande.
+
À titre d'exemple, la commande ci-dessous indique le chemin et le commit
actuellement extrait pour chaque sous-module :
+
--------------
git submodule foreach 'echo $sm_path `git rev-parse HEAD`'
--------------

sync [--recursive] [--] [<chemin>...]::
	Synchroniser le paramètre de configuration de l'URL distante des
	sous-modules à la valeur spécifiée dans `.gitmodules`. Cela n'affectera que
	les sous-modules qui ont déjà une entrée d'URL dans .git/config (c'est le
	cas lorsqu'ils sont initialisés ou fraîchement ajoutés). Ceci est utile
	lorsque les URL des sous-modules changent en amont et que vous devez mettre
	à jour vos dépôts locaux en conséquence.
+
`git submodule sync` synchronise tous les sous-modules tandis que `git
submodule sync -- A` synchronise uniquement le sous-module "A".
+
Si `--recursive` est spécifié, cette commande va parcourir récursivement les
sous-modules enregistrés, et synchroniser tous les sous-modules imbriqués à
l'intérieur.

absorbgitdirs::
	Si un répertoire git d'un sous-module se trouve à l'intérieur du
	sous-module, déplacer le répertoire git du sous-module dans le chemin
	`$GIT_DIR/modules` de son superprojet, puis connecter le répertoire git et
	son répertoire de travail en définissant le `core.worktree` et en ajoutant
	un fichier .git pointant sur le répertoire git intégré dans le répertoire
	git du superprojet.
+
Un dépôt qui a été cloné indépendamment et ajouté plus tard comme un
sous-module ou d'anciennes configurations, a le répertoire git des
sous-modules à l'intérieur du sous-module au lieu d'être intégré dans le
répertoire git des superprojets.
+
Cette commande est récursive par défaut.

OPTIONS
-------
-q::
--quiet::
	N'afficher que les messages d'erreur.

--progress::
	Cette option n'est valide que pour les commandes add et update. L'état
	d'avancement est affiché sur la sortie d'erreur standard par défaut quand
	elle est attachée à un terminal, à moins que -q soit spécifié. Ce drapeau
	force l'état d'avancement même si le flux d'erreur standard n'est pas dirigé
	vers un terminal.

--all::
	Cette option n'est valide que pour la commande deinit. Désenregistrer tous
	les sous-modules dans l'arbre de travail.

-b <branche>::
--branch <branche>::
	Branche du dépôt à ajouter comme sous-module.  Le nom de la branche est
	enregistré comme `submodule.<nom>.branch` dans `.gitmodules` pour
	`update--remote`.  Une valeur spéciale de `.` est utilisée pour indiquer que
	le nom de la branche dans le sous-module doit être le même que celui de la
	branche active dans le dépôt actuel.  Si l'option n'est pas spécifiée, la
	valeur par défaut est `HEAD` distant.

-f::
--force::
	Cette option n'est valable que pour les commandes add, deinit et update.
	Lors de l'exécution de la commande add, autorisez l'ajout d'un chemin de
	sous-module autrement ignoré.  Lors de l'exécution de deinit, les arbres de
	travail des sous-module seront supprimés même s'ils contiennent des
	modifications locales.  Lors de l'exécution de update (uniquement active
	avec la procédure de checkout), jeter les modifications locales dans les
	sous-module lors du passage à un commit différent  ; et toujours exécuter
	une opération d'extraction dans le sous-module, même si le commit listé dans
	l'index du dépôt le contenant correspond au commit extrait dans le
	sous-module.

--cached::
	Cette option n'est valide que pour les commandes d'état et de résumé.  Ces
	commandes utilisent généralement le commit trouvé dans la HEAD du
	sous-module, mais avec cette option, le commit stocké dans l'index est
	utilisé à la place.

--files::
	Cette option n'est valable que pour la commande sommaire. Cette commande
	compare le commit dans l'index avec celui du sous-module HEAD lorsque cette
	option est utilisée.

-n::
--summary-limit::
	Cette option n'est valable que pour la commande sommaire.  Limiter la taille
	du résumé (nombre de validations affichées au total).  Donner 0 désactivera
	le résumé ; un nombre négatif signifie illimité (par défaut). Cette limite
	ne s'applique qu'aux sous-modules modifiés. La taille est toujours limitée à
	1 pour les sous-modules ajoutés/supprimés/modifiés.

--remote::
	This option is only valid for the update command.  Instead of using the
	superproject's recorded SHA-1 to update the submodule, use the status of the
	submodule's remote-tracking branch.  The remote used is branch's remote
	(`branch.<name>.remote`), defaulting to `origin`.  The remote branch used
	defaults to the remote `HEAD`, but the branch name may be overridden by
	setting the `submodule.<name>.branch` option in either `.gitmodules` or
	`.git/config` (with `.git/config` taking precedence).
+
This works for any of the supported update procedures (`--checkout`,
`--rebase`, etc.).  The only change is the source of the target SHA-1.  For
example, `submodule update --remote --merge` will merge upstream submodule
changes into the submodules, while `submodule update --merge` will merge
superproject gitlink changes into the submodules.
+
In order to ensure a current tracking branch state, `update --remote`
fetches the submodule's remote repository before calculating the SHA-1.  If
you don't want to fetch, you should use `submodule update --remote
--no-fetch`.
+
Use this option to integrate changes from the upstream subproject with your
submodule's current HEAD.  Alternatively, you can run `git pull` from the
submodule, which is equivalent except for the remote branch name: `update
--remote` uses the default upstream repository and
`submodule.<name>.branch`, while `git pull` uses the submodule's
`branch.<name>.merge`.  Prefer `submodule.<name>.branch` if you want to
distribute the default upstream branch with the superproject and
`branch.<name>.merge` if you want a more native feel while working in the
submodule itself.

-N::
--no-fetch::
	This option is only valid for the update command.  Don't fetch new objects
	from the remote site.

--checkout::
	This option is only valid for the update command.  Checkout the commit
	recorded in the superproject on a detached HEAD in the submodule. This is
	the default behavior, the main use of this option is to override
	`submodule.$name.update` when set to a value other than `checkout`.  If the
	key `submodule.$name.update` is either not explicitly set or set to
	`checkout`, this option is implicit.

--merge::
	This option is only valid for the update command.  Merge the commit recorded
	in the superproject into the current branch of the submodule. If this option
	is given, the submodule's HEAD will not be detached. If a merge failure
	prevents this process, you will have to resolve the resulting conflicts
	within the submodule with the usual conflict resolution tools.  If the key
	`submodule.$name.update` is set to `merge`, this option is implicit.

--rebase::
	This option is only valid for the update command.  Rebase the current branch
	onto the commit recorded in the superproject. If this option is given, the
	submodule's HEAD will not be detached. If a merge failure prevents this
	process, you will have to resolve these failures with
	linkgit:git-rebase[1].  If the key `submodule.$name.update` is set to
	`rebase`, this option is implicit.

--init::
	This option is only valid for the update command.  Initialize all submodules
	for which "git submodule init" has not been called so far before updating.

--name::
	This option is only valid for the add command. It sets the submodule's name
	to the given string instead of defaulting to its path. The name must be
	valid as a directory name and may not end with a '/'.

--reference <dépôt>::
	This option is only valid for add and update commands.  These commands
	sometimes need to clone a remote repository. In this case, this option will
	be passed to the linkgit:git-clone[1] command.
+
*NOTE*: Do *not* use this option unless you have read the note
for linkgit:git-clone[1]'s `--reference`, `--shared`, and `--dissociate`
options carefully.

--dissociate::
	This option is only valid for add and update commands.  These commands
	sometimes need to clone a remote repository. In this case, this option will
	be passed to the linkgit:git-clone[1] command.
+
*NOTE* : voir NOTE pour l'option `--reference`.

--recursive::
	This option is only valid for foreach, update, status and sync commands.
	Traverse submodules recursively. The operation is performed not only in the
	submodules of the current repo, but also in any nested submodules inside
	those submodules (and so on).

--depth::
	This option is valid for add and update commands. Create a 'shallow' clone
	with a history truncated to the specified number of revisions.  See
	linkgit:git-clone[1]

--[no-]recommend-shallow::
	This option is only valid for the update command.  The initial clone of a
	submodule will use the recommended `submodule.<name>.shallow` as provided by
	the `.gitmodules` file by default. To ignore the suggestions use
	`--no-recommend-shallow`.

-j <n>::
--jobs <n>::
	This option is only valid for the update command.  Clone new submodules in
	parallel with as many jobs.  Defaults to the `submodule.fetchJobs` option.

--[no-]single-branch::
	This option is only valid for the update command.  Clone only one branch
	during update: HEAD or one specified by --branch.

<chemin>...::
	Paths to submodule(s). When specified this will restrict the command to only
	operate on the submodules found at the specified paths.  (This argument is
	required with add).

FICHIERS
--------
When initializing submodules, a `.gitmodules` file in the top-level
directory of the containing repository is used to find the url of each
submodule.  This file should be formatted in the same way as
`$GIT_DIR/config`. The key to each submodule url is "submodule.$name.url".
See linkgit:gitmodules[5] for details.

VOIR AUSSI
----------
linkgit:gitsubmodules[7], linkgit:gitmodules[5].

GIT
---
Fait partie de la suite linkgit:git[1]

TRADUCTION
----------
Cette  page de manuel a été traduite par Jean-Noël Avila <jn.avila AT free DOT fr> et les membres du projet git-manpages-l10n. Veuillez signaler toute erreur de traduction par un rapport de bogue sur le site https://github.com/jnavila/git-manpages-l10n .
