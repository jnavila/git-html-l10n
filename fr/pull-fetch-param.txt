<dépôt>::
	Le dépôt "distant" qui est la source d'une opération de récupération ou de
	tirage.  Ce paramètre peut être soit une URL (voir la section <<URLS, URLS
	GIT>> ci-dessous) soit le nom d'un remote (voir la section
	<<REMOTES,DISTANTS>> ci-dessous).

ifndef::git-pull[]
<groupe>::
	Un nom faisant référence à une liste des dépôts comme la valeur de
	remotes.<groupe> dans le fichier de configuration. (voir
	linkgit:git-config[1]).
endif::git-pull[]

<spécificateur-de-référence>::
	Préciser les références à récupérer et les références locales à mettre à
	jour.  Lorsqu'aucun <spéc-de-réf> n'apparaît sur la ligne de commande, les
	références à récupérer sont lues à partir des variables
	`remote.<dépôt>.fetch` à la place
ifndef::git-pull[]
	(voir <<CRTB,BRANCHES DE SUIVI À DISTANCE CONFIGURÉES>> ci-dessous).
endif::git-pull[]
ifdef::git-pull[]
	(voir linkgit:git-fetch[1]).
endif::git-pull[]
+
Le format d'un paramètre <spéc-de-réf> est un plus `+` optionnel, suivi de
la source <src>, suivi de deux points `:`, suivi de la destination ref
<dst>.  Les deux points peuvent être omis lorsque <dst> est vide.  <src> est
typiquement une réf, mais cela peut aussi être un nom d'objet hexadécimal
entier.
+
`tag <étiquette>` signifie la même chose que
`refs/tags/<tag>:refs/tags/<tag>` ; cela demande de tout récupérer jusqu'à
l'étiquette donnée.
+
La référence distante qui correspond à <src> est récupérée, et si <dst>
n'est pas une chaîne vide, une tentative est faite pour mettre à jour la
référence locale qui lui correspond.
+
Le fait que cette mise à jour soit autorisée sans `---force` dépend de
l'espace de noms de référence vers lequel elle est récupérée, du type
d'objet récupéré, et si la mise à jour est considérée comme une avance
rapide. Généralement, les mêmes règles s'appliquent pour la récupération que
pour la poussée, voir la section `<spéc-de-réf>...` de linkgit:git-push[1]
pour les connaître. Les exceptions à ces règles particulières à 'git fetch'
sont notées ci-dessous.
+
Jusqu'à la version 2.20 de Git, et contrairement à ce qui se passe avec
linkgit:git-push[1], toute mise à jour de `refs/tags/*` serait acceptée sans
`+` dans la spéc-de-réf (ou `--force`). Lors de la récupération, nous
considérons sans distinction toutes les mises à jour d'étiquettes depuis un
dépôt distance comme des récupérations forcées.  Depuis la version 2.20 de
Git, la récupération pour mettre à jour les `refs/tags/*` fonctionne de la
même manière que lors de la poussée. C'est-à-dire que toute mise à jour sera
rejetée sans "+" dans le spécificateur de référence (ou `--force`).
+
Contrairement à une poussée avec linkgit:git-push[1], toute mise à jour en
dehors de `refs/{tags,heads}/*` sera acceptée sans `+` dans le spéc-de-réf
(ou `--force`), que ce soit en échangeant par exemple un objet arbre pour un
blob, ou un commit pour un autre commit qui n'a pas le commit précédent
comme ancêtre etc.
+
Contrairement à une poussée avec linkgit:git-push[1], il n'y a pas de
configuration qui modifie ces règles, et rien de tel qu'un crochet
pré-récupération `pre-fetch` analogue à celui de pré-réception`pre-receive`.
+
Comme pour la poussée avec linkgit:git-push[1], toutes les règles décrites
ci-dessus concernant ce qui n'est pas autorisé comme une mise à jour,
peuvent être annulées en ajoutant un "+" optionnel à un spécificateur de
référence (ou en utilisant l'option de ligne de commande `--force`). La
seule exception à cette règle est qu'aucun forçage ne fera accepter à
l'espace de noms `refs/heads/*` un objet non commit.
+
[NOTE]
Lorsque la branche distante que vous voulez récupérer est connue pour être
régulièrement rembobinée et rebasée, on s'attend à ce que son nouveau sommet
ne soit  pas un descendant de son sommet précédent (telle qu'il était stocké
dans votre branche de suivi à distance la dernière fois que vous l'avez
récupéré).  Vous pouvez utiliser le signe "+" pour indiquer que des mises à
jour non en avance rapide seront nécessaires pour ces branches.  Il n'y a
aucun moyen de déterminer ou de déclarer qu'une branche sera rendue
disponible dans un dépôt avec ce comportement ; l'utilisateur qui tire doit
simplement savoir que c'est le modèle d'utilisation attendu pour une
branche.
ifdef::git-pull[]
+
[NOTE]
Il y a une différence entre le fait de lister plusieurs <spéc-de-réf>
directement sur la ligne de commande 'git pull' et le fait d'avoir plusieurs
entrées `remote.<dépôt>.fetch` dans votre configuration pour un <dépôt> et
d'exécuter une commande 'git pull' sans aucun paramètre <spéc-de-réf>
explicite.  Les <spéc-de-réf>s listés explicitement sur la ligne de commande
sont toujours fusionnés dans la branche actuelle après avoir été
récupérées.  En d'autres termes, si vous listez plus d'une référence
distante, 'git pull' créera une fusion Octopus.  D'un autre côté, si vous
n'indiquez aucun paramètre <spéc-de-réf> explicite sur la ligne de commande,
'git pull' récupérera tous les <spéc-de-réf>s qu'il trouve dans la
configuration `remote.<dépôt>.fetch` et fusionnera seulement le premier
<réf-de-spéc> trouvé dans la branche actuelle.  C'est parce que faire un
Octopus à partir de références distantes est rarement fait, alors que garder
la trace de plusieurs têtes distantes en un seul coup en en récupérant
plusieurs est souvent utile.
endif::git-pull[]
