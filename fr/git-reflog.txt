git-reflog(1)
=============

NOM
---
git-reflog - Gérer l'information de réflog


SYNOPSIS
--------
[verse]
'git reflog' [show] [<option-de-log>] [<ref>]
'git reflog list'
'git reflog expire' [--expire=<temps>] [--expire-unreachable=<temps>]
	[--rewrite] [--updateref] [--stale-fix]
	[--dry-run | -n] [--verbose] [--all [--single-worktree] | <ref>...]
'git reflog delete' [--rewrite] [--updateref]
	[--dry-run | -n] [--verbose] <ref>@{<specificateur>}...
'git reflog exists' <ref>

DESCRIPTION
-----------
Cette commande gère les informations enregistrées dans les reflogs.

Les registres de référence, ou "reflogs", enregistrent lorsque les sommets des branches et autres références ont été mis à jour dans le dépôt local. Les résumés sont utiles dans divers commandes Git, pour spécifier la valeur ancienne d'une référence. Par exemple, `HEAD@{2}` signifie "où HEAD a été utilisé il y a deux mouvements", `master@{one.week.ago}` signifie "où master pointait il y a une semaine dans le dépôt local", etc. Voir linkgit:gitrevisions[7] pour plus de détails.

La commande prend diverses sous-commandes et différentes options selon la sous-commande :

La sous-commande "show" (qui est aussi celle par défaut, en l'absence de sous-commandes) montre le journal des références fourni dans la ligne de commande (ou `HEAD`, par défaut). Le réflog couvre toutes les actions récentes, et en plus les basculements de la branche `HEAD`. `git reflog show` is an alias for `git log -g --abbrev-commit --pretty=oneline` ; voir linkgit:git-log[1] pour plus d'information.

Le sous-commande "list" liste toutes les réfs qui ont un reflog correspondant.

La sous-commande "expire" élague les anciennes entrées du reflog. Les entrées plus anciennes que le temps `expire`, ou les entrées plus anciennes que le temps `expire-unreachable` et non accessibles à partir du sommet actuel, sont retirées du reflog. Ceci n'est généralement pas utilisé directement par les utilisateurs finaux -- plutôt, voir linkgit:git-gc[1].

La sous-commande "delete" supprime les entrées uniques du reflog. Son argument doit être une entrée _exacte_ (par exemple "`git reflog delete master@{2}`"). Cette sous-commande n'est généralement pas utilisée directement par les utilisateurs finaux.

La sous-commande "exists" vérifie si une réf a un reflog. Elle se termine avec un statut zéro si le reflog existe, et un status non nul sinon.

OPTIONS
-------

Options de `show `
~~~~~~~~~~~~~~~~~~

`git reflog show` accepte toutes les options acceptées par `git log`.


Options de `expire `
~~~~~~~~~~~~~~~~~~~~

--all::
	Traiter les reflogs de toutes les références.

--single-worktree::
	Par défaut, lorsque `--all` est spécifié, les reflogs de tous les arbres de travail sont traités. Cette option limite le traitement aux reflogs de l'arbre de travail actuel seulement.

--expire=<temps>::
	Élaguer les entrées plus anciennes que l'heure spécifiée. Si cette option n'est pas spécifiée, le délai d'expiration est pris à partir du paramètre de configuration `gc.reflogExpire`, qui par défaut est de 90 jours. `--expire=all` élague les entrées indépendamment de leur âge ; `--expire=never` désactive l'élagage des entrées joignables (mais voir `--expire-unreachable`).

--expire-unreachable=<date>::
	Élaguer les entrées plus anciennes que `<date>` et qui ne sont pas accessibles depuis le sommet actuel de la branche. Si cette option n'est pas spécifiée, le délai d'expiration est pris à partir du paramètre de configuration `gc.reflogExpireUnreachable` , qui par défaut est de 30 jours. `--expire-unreachable=all` élague les entrées inaccessibles quel que soit leur âge ; `--expire-unreachable=never` arrête l'élagage rapide des entrées inaccessibles (mais voir `--expire`).

--updateref::
	Mettre à jour la référence à la valeur de la première entrée du reflog (c.-à-d. <ref>@\{0\}) si l'entrée précédente était élaguée. (Cette option est ignorée pour les références symboliques.)

--rewrite::
	Si le prédécesseur d'une entrée de réflog est élagué, ajuster son "ancien" SHA-1 pour être égal au champ "nouveau" SHA-1 de l'entrée qui le précède maintenant.

--stale-fix::
	Élaguer toutes les entrées du reflog qui pointent vers « commits brisés ». Un commit cassé est un commit qui n'est pas accessible de l'un des sommets des références et qui renvoie, directement ou indirectement, à un objet manquant de commit, d'arbre ou de blob.
+
Ce calcul implique de traverser tous les objets accessibles, c'est-à-dire qu'il a le même coût que 'git prune'. Il est principalement destiné à réparer la corruption causée par le glanage de cellules à l'aide de versions plus anciennes de Git, qui ne protégeaientt pas les objets pointés par les reflogs.

-n::
--dry-run::
	Ne pas réellement élaguer les entrées. Montrer juste ce qui aurait été élagué.

--verbose::
	Afficher de l'informations supplémentaires à l'écran.


Options pour `delete `
~~~~~~~~~~~~~~~~~~~~~~

`git reflog delete` accepte les options `--updateref`, `--rewrite`, `-n`, `--dry-run`, and `--verbose`, avec la même signification que lorsqu'elles sont utilisées avec `expire`.


GIT
---
Fait partie de la suite linkgit:git[1]

TRADUCTION
----------
Cette  page de manuel a été traduite par Jean-Noël Avila <jn.avila AT free DOT fr> et les membres du projet git-manpages-l10n. Veuillez signaler toute erreur de traduction par un rapport de bogue sur le site https://github.com/jnavila/git-manpages-l10n .
