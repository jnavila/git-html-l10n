git-help(1)
===========

NOM
---
git-help - Afficher l'information d'aide à propos de Git

SYNOPSIS
--------
[verse]
'git help' [-a|--all] [--[no-]verbose] [--[no-]external-commands] [--[no-]aliases]
'git help' [[-i|--info] [-m|--man] [-w|--web]] [<commande>|<doc>]
'git help' [-g|--guides]
'git help' [-c|--config]
'git help' [--user-interfaces]
'git help' [--developer-interfaces]

DESCRIPTION
-----------

En l'absence d'options et de '<commande>' ou '<doc>', le synopsis de la commande 'git' et une liste des commandes Git les plus couramment utilisées sont affichés sur la sortie standard.

Si l'option `--all` ou `-a` est donnée, toutes les commandes disponibles sont affichées sur la sortie standard.

Si l'option `--guides` ou `-g` est donnée, une liste des guides de concepts Git est également affichée sur la sortie standard.

Si une commande ou une autre documentation est donnée, la page de manuel correspondante sera affichée. Le programme "man" est utilisé par défaut à cette fin, mais il peut être remplacé par d'autres options ou variables de configuration.

Si un alias est donné, git affiche la définition de l'alias sur la sortie standard. Pour obtenir la page de manuel de la commande aliasée, utilisez `git <commande> --help`.

Notez que `git --help ...` est identique à `git help ...` car le premier est converti en interne dans le second.

Pour afficher la page de manuel linkgit:git[1], utilisez `git help git`.

Cette page peut être affichée avec 'git help help' ou `git help --help`

OPTIONS
-------
-a::
--all::
	Affiche toutes les commandes disponibles sur la sortie standard.

--no-external-commands::
	Lorsqu'utilisé avec `--all`, exclure la liste des commandes externes "git-*" trouvées dans le `$PATH`.

--no-aliases::
	Lorsqu'utilisé avec `--all`, exclure la liste des alias configurés.

--verbose::
	Lorsqu'utilisé avec `--all`, afficher la description de toutes les commandes reconnues. C'est l'option par défaut.

-c::
--config::
	Lister toutes les variables de configuration disponibles. Il s'agit d'un résumé de la liste de linkgit:git-config[1].

-g::
--guides::
	Affiche une liste des guides de concepts Git sur la sortie standard.

--user-interfaces::
	Affiche une liste de la documentation des interfaces de dépôt, de commande et de fichier sur la sortie standard.
+
Les interfaces de fichiers dans le dépôt comme `.git/info/exclude` sont documentées ici (voir linkgit:gitrepository-layout[5]), ainsi que la configuration dans l'arborescence comme `.mailmap` (voir linkgit:gitmailmap[5]).
+
Cette section de la documentation couvre également les conventions d'interface utilisateur générales ou répandues (par exemple linkgit:gitcli[7]), et la pseudo-configuration telle que l'interface `.git/hooks/*` basée sur les fichiers décrite dans linkgit:githooks[5].

--developer-interfaces::
	Afficher sur la sortie standard la liste des formats de fichiers, des protocoles et de la documentation relative aux autres interfaces de développement.

-i::
--info::
	Afficher la page de manuel de la commande au format 'info'. Le programme 'info' sera utilisé à cette fin.

-m::
--man::
	Afficher la page de manuel de la commande au format 'man'. Cette option peut être utilisée pour remplacer une valeur définie dans la variable de configuration `help.format`.
+
Par défaut, le programme 'man' est utilisé pour afficher la page de manuel, mais la variable de configuration `man.viewer` peut être utilisée pour choisir d'autres programmes d'affichage (voir ci-dessous).

-w::
--web::
	Afficher la page de manuel de la commande au format 'web' (HTML). Un navigateur web sera utilisé à cet effet.
+
Le navigateur web peut être spécifié en utilisant la variable de configuration `help.browser`, ou `web.browser` si la première n'est pas définie. Si aucune de ces variables de configuration n'est définie, le script d'aide 'git web{litdd}browse' (appelé par 'git help') choisira un navigateur par défaut approprié. Voir linkgit:git-web{litdd}browse[1] pour plus d'informations à ce sujet.

VARIABLES DE CONFIGURATION
--------------------------

help.format
~~~~~~~~~~~

Si aucune option de ligne de commande n'est passée, la variable de configuration `help.format` sera vérifiée. Les valeurs suivantes sont supportées pour cette variable ; elles font que 'git help' se comporte comme l'option de ligne de commande correspondante :

* "man" correspond à '-m|--man',
* "info" correspond à '-i|--info',
* "web" ou "html" correspondent à '-w|--web'.

help.browser, web.browser et browser. <outil>.path
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Les navigateurs `help.browser`, `web.browser` et `browser.<outil>.path` seront également vérifiés si le format 'web' est choisi (soit par une option de la ligne de commande, soit par une variable de configuration). Voir '-w|--web' dans la section OPTIONS ci-dessus et linkgit:git-web{litdd}browse[1].

man.viewer
~~~~~~~~~~

La variable de configuration `man.viewer` sera vérifiée si le format 'man' est choisi. Les valeurs suivantes sont actuellement prises en charge :

* "man" : utiliser le programme 'man' comme d'habitude,
* "woman" : utiliser 'emacsclient' pour lancer le mode "woman" dans emacs (cela ne fonctionne qu'à partir de la version 22 d'emacsclient),
* "konqueror" : utiliser 'kfmclient' pour ouvrir la page de manuel dans un nouvel onglet konqueror (voir 'Note sur konqueror' ci-dessous).

Les valeurs des autres outils peuvent être utilisées s'il existe une entrée de configuration `man.<outil>.cmd` correspondante (voir ci-dessous).

Plusieurs valeurs peuvent être données à la variable de configuration `man.viewer`. Les programmes correspondants seront essayés dans l'ordre indiqué dans le fichier de configuration.

Par exemple, cette configuration :

------------------------------------------------
	[man]
		viewer = konqueror
		viewer = woman
------------------------------------------------

essaiera d'abord d'utiliser konqueror. Mais cela peut échouer (par exemple, si DISPLAY n'est pas défini) et dans ce cas, le mode woman d'emacs sera utilisé.

Si tout échoue, ou si aucun visualiseur n'est configuré, le visualiseur spécifié dans la variable d'environnement `GIT_MAN_VIEWER` sera essayé. Si cela échoue aussi, le programme 'man' sera essayé de toute façon.

man.<outil>.path
~~~~~~~~~~~~~~~~

Vous pouvez fournir explicitement un chemin complet vers votre visualisateur favori de page man en réglant la variable de configuration `man.<outil>.path`. Par exemple, vous pouvez configurer le chemin absolu vers konqueror en définissant `difftool.konqueror.path`. Sinon, 'git help' suppose que l'outil est disponible dans PATH.

man.<outil>.cmd
~~~~~~~~~~~~~~~

Lorsque le visualiseur de manuel, spécifié par la variable de configuration `man.viewer`, ne fait pas partie des visualiseurs supportés, la variable de configuration correspondante `man.<outil>.cmd` sera recherchée. Si cette variable existe, l'outil spécifié sera traité comme une commande personnalisée et un interpréteur de commandes sera utilisé pour exécuter la commande avec la page de manuel passée en argument.

Note sur konqueror
~~~~~~~~~~~~~~~~~~

Lorsque 'konqueror' est spécifié dans la variable de configuration `man.viewer`, 'kfmclient' est lancé pour essayer d'ouvrir la page de manuel sur un konqueror déjà ouvert, dans un nouvel onglet si possible.

Pour des raisons de cohérence, nous essayons aussi de faire cela si 'man.konqueror.path' est réglé sur quelque chose comme `UN_CHEMIN_VERS/konqueror`. Cela signifie que nous essaierons de lancer `UN_CHEMIN_VERS/kfmclient` à la place.

Si vous voulez vraiment utiliser 'konqueror', vous pouvez utiliser quelque chose comme ce qui suit :

------------------------------------------------
	[man]
		viewer = konq

	[man "konq"]
		cmd = UN_CHEMIN_VERS/konqueror
------------------------------------------------

Note sur git config --global
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Notez que toutes ces variables de configuration devraient probablement être définies en utilisant le drapeau `--global`, par exemple comme ceci :

------------------------------------------------
$ git config --global help.format web
$ git config --global web.browser firefox
------------------------------------------------

car ils sont probablement plus spécifiques à l’utilisateur qu’au dépôt. Voir linkgit:git-config[1] pour plus d’informations à ce sujet.

GIT
---
Fait partie de la suite linkgit:git[1]

TRADUCTION
----------
Cette  page de manuel a été traduite par Jean-Noël Avila <jn.avila AT free DOT fr> et les membres du projet git-manpages-l10n. Veuillez signaler toute erreur de traduction par un rapport de bogue sur le site https://github.com/jnavila/git-manpages-l10n .
