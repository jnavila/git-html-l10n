git-shortlog(1)
===============

NOM
---
git-shortlog - Résume 'git log' sortie

SYNOPSIS
--------
[verse]
'git shortlog' [<options>] [<intervalle de révision>] [[--] <chemin>...]
git log --pretty=short | 'git shortlog' [<options>]

DESCRIPTION
-----------
Récapitule la sortie du « git log » dans un format adapté à l'inclusion dans
les annonces de version. Chaque commit sera regroupé par auteur et titre.

En outre, "[PATCH]" sera supprimé de la description de validation.

Si aucune révision n'est passée sur la ligne de commande et que soit
l'entrée standard n'est pas un terminal, soit il n'y a pas de branche
courante,'git shortlog' affichera un résumé du journal lu depuis l'entrée
standard, sans référence au référentiel courant.

OPTIONS
-------

-n::
--numbered::
	Trier la sortie en fonction du nombre de livraisons par auteur au lieu de
	l'ordre alphabétique des auteurs.

-s::
--summary::
	Supprimer la description des commits et fournir un résumé du décompte des
	validations seulement.

-e::
--email::
	Afficher l'adresse courriel de chaque auteur.

--format[=<format>]::
	Au lieu du sujet du commit, utiliser d'autres informations pour décrire
	chaque commit.  <format>' peut être n'importe quelle chaîne acceptée par
	l'option `--format' de'git log', telle que'*[%h] %s'.  (Voir la section
	"MISES EN FORME" de linkgit:git-log[1].)

	Chaque commit mis en forme sera reformaté avant d'être affiché.

-c::
--committer::
	Collecter et montrer les identités des validateurs au lieu des auteurs.

-w[<largeur>[,<indent1>[,<indent2>]]]::
	Formater la sortie en coupant chaque ligne à la longueur  `largeur`.  La
	première ligne de chaque entrée est indentée à `indent1` espaces, et la
	deuxième ligne et les suivantes sont indentées à `indent2`
	espaces. `largeur`, `indent1` et `indent2` valent par défaut à 76, 6 et 9
	respectivement.
+
Si la largeur est `0` (zéro) alors indenter les lignes de la sortie sans les
recouper.

<plage de révisions>::
	Afficher uniquement les commits dans la plage de révision spécifiée.
	Lorsqu'aucune <plage de révision> n'est spécifiée, elle vaut par défaut à
	`HEAD` (c'est-à-dire tout l'historique menant au commit
	actuel). `origin.. HEAD` spécifie tous les commits accessibles à partir du
	commit actuel (c'est-à-dire `HEAD`), mais pas de `origin`. Pour une liste
	complète des moyens d'épeler une <plage de révision>, consultez la section «
	Spécification de plage » de linkgit:gitrevisions[7].

[--] <chemin>...::
	Ne considérer que les commits qui sont suffisants pour expliquer comment les
	fichiers qui correspondent aux chemins spécifiés ont été créés.
+
Les chemins peuvent avoir besoin d'être préfixés avec `--` pour les séparer
des options ou de la plage de révision, en cas de confusion.

:git-shortlog: 1
include::rev-list-options.txt[]

TRANSFORMER LES AUTEURS
-----------------------

La fonctionnalité `.mailmap' est utilisée pour regrouper les commits d'une
même personne dans le shortlog, où son nom et/ou son adresse email ont été
épelés différemment.

include::mailmap.txt[]

GIT
---
Fait partie de la suite linkgit:git[1]

TRADUCTION
----------
Cette  page de manuel a été traduite par Jean-Noël Avila <jn.avila AT free DOT fr> et les membres du projet git-manpages-l10n. Veuillez signaler toute erreur de traduction par un rapport de bogue sur le site https://github.com/jnavila/git-manpages-l10n .
