-b::
	Afficher un SHA-1 vierge pour les validations de limite. Cela peut également être contrôlé par l’option de configuration `blame.blankboundary`.

--root::
	Ne pas considérer les commits de base comme des limites. Ceci peut également être contrôlé via l'option de configuration `blame.showRoot`.

--show-stats::
	Inclure des statistiques supplémentaires à la fin de la sortie de blame.

-L <début>,<fin>::
-L: <nomfonc>::
	N'annoter que la plage de lignes donnée par '<début>,<fin>' ou par la regex du nom de la fonction '<nom-de-fonction>'. Peut être spécifié plusieurs fois. Les intervalles qui se chevauchent sont autorisés.
+
'<début>' et '<fin>' sont facultatifs. `-L <début>` ou `-L <début>,`, s’étend de '<début>' jusqu'à la fin du fichier. `-L,<fin>` s’étend du début du fichier jusqu'à '<fin>'.
+
include::line-range-format.txt[]

-l::
	Afficher la révision long (par défaut : désactivé).

-t::
	Afficher les horodatages bruts (Défaut : désactivé).

-S <fichier-des-révs>::
	Utiliser les révisions depuis le fichier-des-révisions au lieu d'appeler linkgit:git-rev-list[1].

--reverse <rév>..<rév>::
	Parcourir l'historique en avant au lieu d'en arrière. Au lieu de montrer la révision dans laquelle une ligne est apparue, ceci montre la dernière révision dans laquelle une ligne a existé. Cela nécessite une gamme de révisions comme DÉBUT..FIN où le chemin de blâme existe dans DÉBUT. Pour plus de commodité, `git blame --reverse DÉBUT` est pris comme `git blame --reverse DÉBUT..HEAD`.

--first-parent::
	Ne suivre que le premier commit parent lors de la rencontre d'un commit de fusion. Cette option peut être utilisée pour déterminer le moment où une ligne a été introduite dans une branche d'intégration particulière, plutôt que le moment où elle a été introduite dans l'historique global.

-p::
--porcelain::
	Afficher dans un format propice à la consommation par machine.

--line-porcelain::
	Afficher le format porcelaine, mais sortir les informations de commit pour chaque ligne, et pas seulement la première fois qu'un commit est référencé. Implique --porcelaine.

--incremental::
	Afficher le résultat progressivement dans un format conçu pour la consommation par une machine.

--encoding=<codage>::
	Spécifier l’encodage utilisé pour produire les des noms d’auteurs et les résumés des commits. Le définir sur `none` rend la sortie de blâme des données non converties. Pour plus d’informations, voir la discussion sur l’encodage dans la page manuelle linkgit:git-log[1].

--contents <fichier>::
	Lorsque <rév> n'est pas spécifié, la commande annote les modifications en arrière à partir de la copie de l'arbre de travail. Ce drapeau permet à la commande de faire croire que la copie de l'arbre de travail contient le contenu du fichier nommé (spécifier `-` pour que la commande lise à partir de l'entrée standard).

--date <format>::
	Spécifie le format utilisé pour les dates sur la sortie. Si --date n’est pas fourni, la valeur de la variable de configuration blame.date est utilisée. Si la variable de configuration blame.date n’est pas non plus définie, le format iso est utilisé. Pour les valeurs prises en charge, voir la discussion de l’option --date à linkgit:git-log[1].

--[no-]progress::
	L'état d'avancement est indiqué par défaut sur le flux d'erreurs standard lorsqu'il est connecté à un terminal. Ce drapeau permet de signaler l'état d'avancement même s'il n'est pas attaché à un terminal. On ne peut pas utiliser `--progress` avec `--porcelain` ou `--incremental`.

-M[<num>]::
	Détecter les lignes déplacées ou copiées dans un fichier. Lorsqu'un commit déplace ou copie un bloc de lignes (par exemple, le fichier original a A puis B, et le commit le change en B puis A), l'algorithme traditionnel de 'blame' ne remarque que la moitié du mouvement et blâme généralement les lignes qui ont été déplacées vers le haut (c'est-à-dire B) au parent et attribue le blâme aux lignes qui ont été déplacées vers le bas (c'est-à-dire A) au commit enfant. Avec cette option, les deux groupes de lignes sont blâmés sur le parent en effectuant des passes d'inspection supplémentaires.
+
<num>est facultatif, mais c’est la limite inférieure sur le nombre de caractères alphanumériques que Git doit détecter comme déplacées/copiées dans un fichier pour qu’il associe ces lignes avec le commit parent. La valeur par défaut est 20.

-C[<num>]::
	En plus de `-M`, détecter les lignes déplacées ou copiées à partir d'autres fichiers qui ont été modifiés dans le même commit. Ceci est utile lorsque vous réorganisez votre programme et que vous déplacez du code d'un fichier à l'autre. Lorsque cette option est donnée deux fois, la commande recherche en plus les copies depuis d'autres fichiers dans le commit qui crée le fichier. Lorsque cette option est donnée trois fois, la commande recherche également des copies d'autres fichiers dans n'importe quel commit.
+
<num> est optionnel mais c'est la limite inférieure du nombre de caractères alphanumériques que Git doit détecter comme étant des déplacements/copies entre fichiers pour qu'il puisse associer ces lignes au commit parent. Et la valeur par défaut est 40. S'il y a plus d'une option `-C` donnée, l'argument <num> du dernier `-C` prendra effet.

--ignore-rev <rév>::
	Ignorer les modifications apportées par la révision lors de l'attribution de la responsabilité, comme si la modification ne s'était jamais produite. Les lignes qui ont été modifiées ou ajoutées par un commit ignoré seront blâmées sur le commit précédent qui a modifié cette ligne ou les lignes voisines. Cette option peut être spécifiée plusieurs fois pour ignorer plus d'une révision. Si l'option de configuration `blame.markIgnoredLines` est activée, alors les lignes qui ont été modifiées par un commit ignoré et attribuées à un autre commit seront marquées avec un `?` dans la sortie de blame. Si l'option de configuration `blame.markUnblamableLines` est définie, alors les lignes touchées par un commit ignoré que nous n'avons pas pu attribuer à une autre révision sont marquées d'un '*'.

--ignore-revs-file <fichier>::
	Ignorer les révisions listées dans le `fichier`, qui doit être au même format qu'un `fsck.skipList`. Cette option peut être répétée, et ces fichiers seront traités après tous les fichiers spécifiés avec l'option de configuration `blame.ignoreRevsFile`. Un nom de fichier vide, `""`, effacera la liste des révisions des fichiers précédemment traités.

-h::
	Afficher le message d'aide.
