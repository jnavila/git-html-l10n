[[def_alternate_object_database]]代替オブジェクトデータベース (alternate object database)::
	代替メカニズムを介して、 <<def_repository,リポジトリ>> は、その <<def_object_database,オブジェクトデータベース>> の一部を、「alternate」と呼ばれる別のオブジェクトデータベースから継承できます。

[[def_bare_repository]]ベア リポジトリ (bare repository)::
	ベアリポジトリは、通常、適切な名前の <<def_directory,ディレクトリ>> に `.git` という接尾辞が付き、リビジョン管理下のどのファイルもローカルにチェックアウトされたコピーを持っていないものです。つまり、通常であれば隠された `.git` サブディレクトリに存在する Git 管理ファイルや制御ファイルは、代わりに `repository.git` ディレクトリに直接存在し、その他のファイルは存在せず、チェックアウトもされていません。たいてい、公開リポジトリの公開者は、ベアリポジトリを利用できるようにしています。

[[def_blob_object]]ブロブオブジェクト(blob object)::
	非定型の <<def_object,オブジェクト>> 例：ファイルの内容など。

[[def_branch]]ブランチ (branch)::
	A "branch" is a line of development. The most recent <<def_commit,commit>> on a branch is referred to as the tip of that branch. The tip of the branch is <<def_ref,referenced>> by a branch <<def_head,head>>, which moves forward as additional development is done on the branch. A single Git <<def_repository,repository>> can track an arbitrary number of branches, but your <<def_working_tree,working tree>> is associated with just one of them (the "current" or "checked out" branch), and <<def_HEAD,HEAD>> points to that branch.

[[def_cache]]キャッシュ (cache)::
	廃止: <<def_index,インデックス>>。

[[def_chain]]チェーン (chain)::
	オブジェクトのリストで、リスト内の各 <<def_object,オブジェクト>> はその後継者への参照を含みます（例えば、<<def_commit,コミット>> の後継者はその <<def_parent,親>> になる可能性があります）。

[[def_changeset]]チェンジセット (changeset)::
	BitKeeper/cvsps が "<<def_commit,コミット>>" に代えて呼ぶものです。Gitは変更を保存するのではなく、状態を保存するので、Gitで "チェンジセット" という用語を使うのは本当に意味がありません。

[[def_checkout]]チェックアウト (checkout)::
	<<def_object_database,オブジェクトデータベース>> から <<def_tree_object,ツリーオブジェクト>> または <<def_blob_object,ブロブ>> を使用して <<def_working_tree,ワーキングツリー>> の全部または一部を更新し、ワーキングツリー全体が新しい <<def_branch,ブランチ>> を指している場合には <<def_index,インデックス>> および <<def_HEAD,HEAD>> も更新します。

[[def_cherry-picking]]チェリーピッキング (cherry-picking)::
	<<def_SCM,SCM>> の中だけで通じる言葉で、「チェリーピック」とは、一連の変更（通常はコミット）から変更のサブセットを選択し、それらを別のコードベースの上に新しい一連の変更として記録することを意味します。 Gitでは、これは「git cherry-pick」コマンドによって実行され、既存の <<def_commit,コミット>> によって導入された変更を抽出し、現在の <<def_branch,ブランチ>> の先端を基点に新しいコミットとしてそれを記録します。

[[def_clean]]クリーン (clean)::
	<<def_working_tree,ワーキングツリー>> が、現在の <<def_head,ヘッド>> が参照する <<def_revision,リビジョン>> に合致する場合、クリーンである。また、 "<<def_dirty,ダーティ>>" も参照してください。

[[def_commit]]コミット (commit)::
	名詞として。プロジェクトのヒストリー全体は、相互に関連するコミットの集合として表されます。Gitでは、他のリビジョン管理システムが "リビジョン" や "バージョン" という言葉を使うのと同じ場所で、"コミット" という言葉が使われることがよくあります。また、 <<def_commit_object,コミットオブジェクト>> のショートハンドとしても使われます。
+
動詞として。プロジェクト状態の新しいスナップショットを Git のヒストリーに保存することであり、 <<def_index,インデックス>> の現在の状態を表す新しいコミットを作成し、新しいコミットを指すように <<def_HEAD,HEAD>> を進めます。

[[def_commit_graph_general]]コミットグラフの概念、表現及び使い方::
	<<def_DAG,DAG>> 構造の同義語でオブジェクトデータベース内のコミット、ブランチの先端による <<def_ref,参照>> 、リンクされたコミットの <<def_chain,チェーン>> によって形成されます。この構造は、決定的なコミットグラフです。 グラフは他の方法で表現できます。例えば、<<def_commit_graph_file,「コミット-グラフ」 ファイル>> です。

[[def_commit_graph_file]]コミット‐グラフファイル (commit-graph file)::
	"コミットグラフ" ファイルは、コミットグラフのウォークを高速化するための <<def_commit_graph_general,コミットグラフ>> の補完的な表現です。"コミットグラフ" ファイルは、.git/objects/info ディレクトリまたは別のオブジェクトデータベースの info ディレクトリに格納されます。

[[def_commit_object]]コミットオブジェクト (commit object)::
	<<def_object,オブジェクト>> には、特定の <<def_revision,リビジョン>> に関する情報、例えば <<def_parent,親>> やコミッター、著作者、日付、そして格納されているリビジョンの最上位 <<def_directory,ディレクトリ>> と一致する <<def_tree_object,ツリーオブジェクト>> を含みます。

[[def_commit-ish]]コミットの性質を持つもの (commit-ish (also committish))::
	A <<def_commit_object,commit object>> or an <<def_object,object>> that can be recursively <<def_dereference,dereferenced>> to a commit object. The following are all commit-ishes: a commit object, a <<def_tag_object,tag object>> that points to a commit object, a tag object that points to a tag object that points to a commit object, etc.

[[def_core_git]]core Git::
	Gitの基本的なデータ構造とユーティリティ。限られたソースコード管理ツールのみを公開します。

[[def_DAG]]DAG::
	有向非循環グラフ。親を持ち（有向）コミットオブジェクトのグラフは非循環なので、 <<def_commit_object,コミットオブジェクト>> は有向非循環グラフを形成します（同じ <<def_object,オブジェクト>> で始まって終わる <<def_chain,チェーン>> はありません）。

[[def_dangling_object]]ダングリングオブジェクト (dangling object)::
	<<def_unreachable_object,到達不能オブジェクト>> とは、他の到達不能オブジェクトからでさえも、 <<def_reachable,到達可能>> ではないオブジェクトのことで、ダングリングオブジェクトは、 <<def_repository,リポジトリ>> 内の参照や <<def_object,オブジェクト>> のいずれからも参照されないというものです。

[[def_dereference]]dereference::
	Referring to a <<def_symref,symbolic ref>>: the action of accessing the <<def_ref,reference>> pointed at by a symbolic ref. Recursive dereferencing involves repeating the aforementioned process on the resulting ref until a non-symbolic reference is found.
+
Referring to a <<def_tag_object,tag object>>: the action of accessing the <<def_object,object>> a tag points at. Tags are recursively dereferenced by repeating the operation on the result object until the result has either a specified <<def_object_type,object type>> (where applicable) or any non-"tag" object type. A synonym for "recursive dereference" in the context of tags is "<<def_peel,peel>>".
+
Referring to a <<def_commit_object,commit object>>: the action of accessing the commit's tree object. Commits cannot be dereferenced recursively.
+
Unless otherwise specified, "dereferencing" as it used in the context of Git commands or protocols is implicitly recursive.

[[def_detached_HEAD]]分離したHEAD (detached HEAD)::
	通常、 <<def_HEAD,HEAD>> には、<<def_branch,ブランチ>> の名前が格納されており、HEADが示す履歴に対して操作するコマンドは、HEADが指すブランチの先端に続く履歴に対して操作することになります。しかし、Gitでは、必ずしも特定のブランチの先端ではない任意の<<def_commit,コミット>> を <<def_checkout,チェックアウト>> することもできます。このような状態のHEADは、"分離した (detached)"と呼ばれます。
+
現在のブランチの歴史を操作するコマンド（たとえば `git commit` で新しい歴史をその上に構築する）は、HEAD が分離されている間も動作することに注意してください。これらのコマンドは、どのブランチにも影響を与えずに HEAD を更新し、更新された歴史の先端を指すようにします。現在のブランチに関する情報を更新したり問い合わせたりするコマンド（たとえば 現在のブランチがどのリモート追跡ブランチと統合されているかを設定する `git branch --set-upstream-to`）は、この状態で尋ねる（実際の）現在のブランチがないため、明らかに機能しません。

[[def_directory]]ディレクトリ (directory)::
	"ls" で表示されるリスト :-)

[[def_dirty]]ダーティ (dirty)::
	<<def_working_tree,ワーキングツリー>>は、現在の<<def_branch,ブランチ>> に対して <<def_commit,コミット>> されていない変更が含まれている場合、「ダーティ」であると言われます。

[[def_evil_merge]]邪悪なマージ (evil merge)::
	邪悪なマージとは、どの <<def_parent,親>> にも表示されない変更を導入する <<def_merge,マージ>> のことです。

[[def_fast_forward]]早送り (fast-forward)::
	早送りとは、特殊なタイプの <<def_merge,マージ>> で、ある <<def_revision,リビジョン>> が、たまたまその子孫である別の <<def_branch,ブランチ>> の変更をマージするときに起こるものです。このような場合、新たに <<def_merge,マージ>> <<def_commit,コミット>> を行うのではなく、マージするブランチと同じリビジョンを指すようにブランチを更新するだけです。これは、リモート <<def_repository,リポジトリ>> の <<def_remote_tracking_branch,リモートトラッキングブランチ>> で頻繁に発生します。

[[def_fetch]]フェッチ (fetch)::
	<<def_branch,ブランチ>> のフェッチとは、リモートの <<def_repository,リポジトリ>> からブランチの <<def_head_ref,ヘッド参照>> を取得し、ローカルの <<def_object_database,オブジェクトデータベース>> から足りないオブジェクトを探して、それらも取得することを指します。linkgit:git-fetch[1] も参照してください。

[[def_file_system]]ファイルシステム (file system)::
	リーナス・トーバルズはもともと、Gitをユーザー空間のファイルシステム、すなわち、ファイルとディレクトリを保持するためのインフラストラクチャとして設計しました。それによって、Gitの効率と速度が確保されました。

[[def_git_archive]]Git アーカイブ (Git archive)::
	<<def_repository,リポジトリ>>の同義語 (arch の人々向け)。

[[def_gitfile]]gitファイル (gitfile)::
	ワーキングツリーのルートにあるプレーンなファイル `.git` は、実際のリポジトリとなるディレクトリを指します。適切な使用については linkgit:git-worktree[1] または linkgit:git-submodule[1] を参照してください。構文については linkgit:gitrepository-layout[5] を参照してください。

[[def_grafts]]移植 (grafts)::
	移植を使用すると、コミットの偽の祖先情報を記録することで、2つの異なる開発ラインを結合できます。このようにして、Gitに <<def_commit,コミット>> の <<def_parent,親 >>のセット が、コミットが作成されたときに記録したものとは異なるというふりをさせることができます。 `.git/info/grafts` ファイルを介して構成されます。
+
移植 の仕組みは時代遅れで、リポジトリ間でオブジェクトを転送する際に問題になる場合があることに注意してください。同じことを行うためのより柔軟で堅牢なシステムについては linkgit:git-replace[1] をご覧ください。

[[def_hash]]ハッシュ (hash)::
	Git の文脈では、 <<def_object_name,オブジェクト名>> の同義語です。

[[def_head]]ヘッド (head)::
	A <<def_ref,named reference>> to the <<def_commit,commit>> at the tip of a <<def_branch,branch>>. Heads are stored in a file in `$GIT_DIR/refs/heads/` directory, except when using packed refs. (See linkgit:git-pack-refs[1].)

[[def_HEAD]]HEAD::
	現在の <<def_branch,branch>>。詳細: <<def_working_tree,ワーキングツリー>> は通常、HEADによって参照されるツリーの状態から派生します。HEADはリポジトリ内の <<def_head,ヘッド>> の1つを参照するものですが、 <<def_detached_HEAD,分離したHEAD>> を使用する場合は、任意のコミットを直接参照します。

[[def_head_ref]]ヘッド参照 (head ref)::
	<<def_head,head>> と同義です。

[[def_hook]]フック (hook)::
	Gitコマンドの通常の実行中に、開発者が機能やチェックを追加するためのオプションのスクリプトを呼び出すことができます。典型的には、フックはコマンドの事前検証をして中止を可能にし、操作の終了後に事後通知を可能にします。フックスクリプトは `$GIT_DIR/hooks/` ディレクトリにあり、ファイル名から `.sample` というサフィックスを取り除くだけで有効になります。以前のバージョンのGitでは、それらを実行可能にする必要がありました。

[[def_index]]インデックス (index)::
	統計情報を含むファイルのコレクションで、その内容はオブジェクトとして保存されます。インデックスは、 <<def_working_tree,ワーキングツリー>> の保存バージョンです。正直なところ、これには、 <<def_merge,マージ>> のときに使用される、ワーキングツリーの2番目および3番目のバージョンを含めることもできます。

[[def_index_entry]]インデックスエントリー (index entry)::
	<<def_index,インデックス>> に保存されている特定のファイルに関する情報。 <<def_merge,マージ>> が開始されたが、まだ終了していない場合（つまり、インデックスにそのファイルの複数のバージョンが含まれている場合）、インデックスエントリーをマージ解除できます。

[[def_master]]master::
	デフォルトの開発 <<def_branch,ブランチ>>。 Git <<def_repository,リポジトリ>>を作成するたびに、「master」という名前のブランチが作成され、アクティブなブランチになります。ほとんどの場合、これにはローカル開発が含まれますが、これは純粋に慣例によるものであり、必須ではありません。

[[def_merge]]マージ (merge)::
	動詞として: 別の <<def_branch,ブランチ>> の内容（場合によっては外部の <<def_repository,リポジトリ>> から）を現在のブランチに取り込むこと。マージされたブランチが別のリポジトリからのものである場合、これは最初にリモートブランチを <<def_fetch,フェッチ>> し、次に結果を現在のブランチにマージすることによって行われます。このフェッチ操作とマージ操作の組み合わせは、 <<def_pull,プル>> と呼ばれます。マージは、ブランチが分岐してから行われた変更を識別し、それらすべての変更を一緒に適用する自動プロセスによって実行されます。変更が競合する場合は、マージを完了するために手動による介入が必要になる場合があります。
+
名詞として: <<def_fast_forward,早送り>> でない限り、マージが成功すると、マージされた <<def_branch,ブランチ>> の先端を <<def_parent,親>>として持つ、マージの結果を表す新しい <<def_commit,コミット>> が作成されます。このコミットは、「マージコミット」、または単に「マージ」と呼ばれることもあります。

[[def_object]]オブジェクト (object)::
	Gitにおけるストレージの単位。その内容を表す <<def_SHA1,SHA-1>> によって一意に識別されます。これにより、オブジェクトを変更することはできません。

[[def_object_database]]オブジェクトデータベース (object database)::
	「オブジェクト」のセットを保存し、個々の <<def_object,オブジェクト>> はその <<def_object_name,オブジェクト名>> によって識別されます。オブジェクトは通常 `$GIT_DIR/objects/` に格納されています。

[[def_object_identifier]]オブジェクト識別子 (object identifier, oid)::
	<<def_object_name,object name>> と同義。

[[def_object_name]]オブジェクト名 (object name)::
	<<def_object,オブジェクト>> の一意な識別子。オブジェクト名は通常40文字の16進数文字列で表されます。俗に <<def_SHA1,SHA-1>> とも呼ばれます。

[[def_object_type]]オブジェクトタイプ (object type)::
	識別子 "<<def_commit_object,コミット>>", "<<def_tree_object,ツリー>>", "<<def_tag_object,タグ>>" または "<<def_blob_object,ブロブ>>" のいずれかでもって、 <<def_object,オブジェクト>> のタイプを表します。

[[def_octopus]]タコ足 (octopus)::
	2つより多くの <<def_branch,ブランチ>> を <<def_merge,マージ>> する。

[[def_orphan]]孤児 (orphan)::
	The act of getting on a <<def_branch,branch>> that does not exist yet (i.e., an <<def_unborn,unborn>> branch). After such an operation, the commit first created becomes a commit without a parent, starting a new history.

[[def_origin]]origin::
	デフォルトの上流 <<def_repository,リポジトリ>> です。ほとんどのプロジェクトは、追跡する上流プロジェクトを少なくとも1つ持っています。デフォルトでは 'origin' がそのために使用されます。上流の新しい更新は、origin/上流のブランチに対応する名前 で <<def_remote_tracking_branch,リモートトラッキングブランチ>> に取り込まれ、`git branch -r` で確認することができます。

[[def_overlay]]オーバーレイ (overlay)::
	作業ディレクトリへのファイルの更新と追加のみを行う一方で削除は行わない、 'cp -R' が宛先ディレクトリの内容を更新するのと同様の方法です。これは、<<def_checkout,チェックアウト>> が <<def_index,インデックス>> や <<def_tree-ish,ツリーの性質を持つもの>>からファイルをチェックアウトするときにおけるデフォルトモードです。一方、非オーバーレイ モードでは、 'rsync --delete' のように、ソースに存在しない追跡済みのファイルも削除されます。

[[def_pack]]パック (pack)::
	1つのファイルに圧縮されたオブジェクトのセット（容量を節約するため、または効率的に転送するために）。

[[def_pack_index]]パックインデックス (pack index)::
	パックの中身への効率よいアクセスを補助する、 <<def_pack,パック>> にあるオブジェクトの識別子やその他の情報のリストです。

[[def_pathspec]]パススペック (pathspec)::
	Git コマンドでパスを制限するために使用するパターン。
+
パススペック は、"git ls-files", "git ls-tree", "git add", "git grep", "git diff", "git checkout" やその他多くのコマンドで、操作範囲をツリーの一部やワーキングツリーに限定して使用するために使用するものです。パスがカレントディレクトリやトップレベルからの相対パスであるかどうかは、各コマンドのドキュメントを参照してください。パススペックの構文は次のとおりです。
+
--

* すべてのパスが一致する
* パススペックの最後のスラッシュまでの部分は、ディレクトリプレフィックスを表します。そのパススペックのスコープは、そのサブツリーに制限されます。
* パススペックの残りの部分は、パス名の残りの部分のパターンです。ディレクトリプレフィックスに関連するパスは、fnmatch(3) を使用してそのパターンと照合されます。特に、「*」と「?」 はディレクトリセパレータに一致させることができます。

--
+
例えば、Documentation/*.jpg とすると、Documentation/chapter_1/figure_1.jpg を含む、Documentationサブツリーにあるすべての .jpg ファイルにマッチします。
+
コロン `:` で始まるパススペックは特別な意味を持ちます。短い形式では、先頭のコロン `:` の後に 0 個以上の「マジックシグネチャ」文字が続き (オプションで別のコロン `:` で終了します)、残りの部分がパスに対してマッチするパターンになります。「マジックシグネチャ」は英数字でもグロブでも正規表現の特殊文字でもコロンでもないASCIIシンボルで構成されます。「マジックシグネチャ」を終了するオプションのコロンは、「マジックシグネチャ」シンボルセットに属さず、かつコロンでもない文字でパターンが始まっている場合には省略することが可能です。
+
長い形式では、先頭のコロン `:` の後に、開き括弧 `(`, カンマで区切られた0個以上の「マジックワード」のリスト、閉じ括弧 `)` が続き、残りがパスに対してマッチするパターンになります。
+
コロンのみのパス指定は、「パススペックがない」ことを意味します。この形式は他の パススペック と組み合わせてはいけません。
+
--
top;;
	マジックワードの `top` (マジックシグネチャ: `/`) は、サブディレクトリの中からコマンドを実行した場合でも、ワーキングツリーのルートからパターンにマッチするようにします。

literal;;
	パターン中の `*` や `?` などのワイルドカードは、リテラル文字として扱われます。

icase;;
	大文字・小文字を区別せずマッチ。

glob;;
	Git はこのパターンを、FNM_PATHNAME フラグを指定した fnmatch(3) に適したシェルグロブとして扱います。パターン中のワイルドカードは、パス名中の / にはマッチしません。例えば、"Documentation/{asterisk}.html" は "Documentation/git.html" にマッチしますが、"Documentation/ppc/ppc.html" や "tools/perf/Documentation/perf.html" にはマッチしません。
+
2つ連続したアスタリスク("`**`")はフルパス名に対してマッチするパターンにおいて、特別な意味を持つ場合があります:

 - 先頭の "`**/`" は、すべてのディレクトリにマッチすることを意味します。例えば、"`**/foo`" はファイルまたはディレクトリ "`foo`" の任意の場所にマッチし、パターン "`foo`" と同じです。 "`**/foo/bar`" はファイルまたはディレクトリ "`bar`" がディレクトリ "`foo`" 直下の任意の場所にある場合にマッチします。

 - 末尾の "`/**`" は、その中にあるすべてのファイルにマッチします。例えば、"`abc/**`" はディレクトリ "abc" 内のすべてのファイルにマッチします。これは `.gitignore` ファイルの位置からの相対パスで、深さは無限です。

 - 末尾以外での "`/**`" は、0個以上のディレクトリにマッチします。例えば、"`a/**/b`" は "`a/b`", "`a/x/b`", "`a/x/y/b`" といった具合にマッチする。

 - これら以外の連続したアスタリスクは無効とする。
+
グロブの魔法は魔法と互換性がありません。

attr;;
`attr:` の後にはスペースで区切られた「属性要件」のリストが続き、パスがマッチしたとみなされるためには、これらの要件がすべて満たされなければなりません。これは、普通の魔法のないパススペック パターン マッチングに追加されます。linkgit:gitattributes[5]を参照してください。
+
パスの各属性要件は、これらのいずれかの形式をとる:

- "`ATTR`" は、属性 `ATTR` を設定することを要求します。

- "`-ATTR`" は、属性 `ATTR` の設定を解除することを要求しています。

- "`ATTR=VALUE`" は、属性 `ATTR` に文字列 `VALUE` を設定することを要求しています。

- "`!ATTR`" は、属性 `ATTR` が指定されていないことを要求しています。
+
ツリーオブジェクトに対してマッチングを行う場合、属性は与えられたツリーオブジェクトからではなく、ワーキングツリーから取得されることに注意してください。

exclude;;
	パスが何らかの非除外パススペックにマッチした後、すべての除外パススペック (マジックシグネチャ: `!` またはその同義語 `^`) を通して実行されることになります。マッチした場合、そのパスは無視されます。非除外パススペックがない場合は、パススペックなしで起動された場合と同じように、結果セットに除外が適用されます。
--

[[def_parent]]親 (parent)::
	<<def_commit_object,コミットオブジェクト>> は、開発ラインにおける論理的な先行者、すなわちその親の (空かもしれない) リストを含んでいます。

[[def_peel]]皮を剥く (peel)::
	再帰的に <<def_tag_object,タグオブジェクト>> の <<def_dereference,参照を外す>> 動作のこと。

[[def_pickaxe]]つるはし (pickaxe)::
	<<def_pickaxe,つるはし>> という用語は、与えられたテキスト文字列を追加または削除する変更を選択するのに役立つ diffcore ルーチンのオプションのことを指します。 `--pickaxe-all` オプションを使うと、例えば特定の行を追加したり削除したりした <<def_changeset,チェンジセット>> をすべて表示することができます。linkgit:git-diff[1] を参照してください。

[[def_plumbing]]配管 (plumbing)::
	<<def_core_git,core Git>>のかわいい名前です。

[[def_porcelain]]磁器 (porcelain)::
	<<def_core_git,core Git>>に依存するプログラムやプログラムスイートのかわいい名前で、core Gitへのハイレベルなアクセスを提示します。磁器は <<def_plumbing,配管>> よりも多くの <<def_SCM,SCM>> インタフェースを公開します。

[[def_per_worktree_ref]]ワークツリーごとの参照 (per-worktree ref)::
	グローバルではなく、<<def_worktree,ワークツリー>>ごとの参照。現在は <<def_HEAD,HEAD>> と `refs/bisect/` で始まる参照のみですが、将来的には他の珍しい参照も含まれるかもしれません。

[[def_pseudoref]]疑似参照 (pseudoref)::
	疑似参照は `$GIT_DIR` 以下にあるファイルの類で、rev-parse の目的では refs のように振る舞いますが、git では特別に扱われるものです。疑似参照はいずれも大文字の名前を持ち、常に <<def_SHA1,SHA-1>> と空白文字からなる行で始まります。つまり、HEADはシンボリック参照となる場合もあるので、疑似参照ではありません。それらはオプションでいくつかの追加データを含むかもしれません。 `MERGE_HEAD` や `CHERRY_PICK_HEAD` がその例になります。 <<def_per_worktree_ref,ワークツリーごとの参照>> とは異なり、これらのファイルはシンボリック参照にはなりえず、参照ログも持ちえません。また、通常の参照の更新機構によって更新されることもありません。代わりに、ファイルに直接書き込むことによって更新されます。しかし、これらはあたかも参照であるかのように読むことができるので、 `git rev-parse MERGE_HEAD` は動作します。

[[def_pull]]プル (pull)::
	<<def_branch,ブランチ>> をプルするということは、ブランチを <<def_fetch,フェッチ>> して <<def_merge,マージ>> することを意味します。linkgit:git-pull[1] も参照してください。

[[def_push]]プッシュ (push)::
	<<def_branch,ブランチ>> をプッシュするということは、リモートの<<def_repository,リポジトリ>>からブランチの<<def_head_ref,ヘッドリファレンス>>を取得し、それがローカルのヘッドリファレンスの祖先かどうかを確認し、その場合には、ローカルのヘッドリファレンスから<<def_reachable,到達可能>>かつ、リモートリポジトリに存在しないすべてのオブジェクトを、リモートの<<def_object_database,オブジェクトデータベース>>に配置し、リモートのヘッドリファレンスを更新することを意味します。リモートの<<def_head,ヘッド>>がローカルのヘッドの祖先でない場合、プッシュは失敗します。

[[def_reachable]]到達可能 (reachable)::
	特定の<<def_commit,コミット>>のすべての祖先は、そのコミットから「到達可能」と言われます。より一般的には、一つの<<def_object,オブジェクト>>が別のオブジェクトから到達可能であるとは、我々がその他のオブジェクトから一つのオブジェクトに<<def_chain,チェーン>>をたどって到達できる場合を指し、<<def_tag,タグ>>からタグ付けている何か、<<def_commit_object,コミット>>からその親またはツリー、そして<<def_tree_object,ツリー>>から内包するツリーや<<def_blob_object,ブロブ>>をたどって到達することです。

[[def_reachability_bitmap]]到達可能性ビットマップ (reachability bitmaps)::
	到達可能性ビットマップは、パックファイルやマルチパックインデックス（MIDX）における選択されたコミット群の<<def_reachable,到達可能性>>に関する情報を格納し、オブジェクト検索を速めるために使用されます。ビットマップは ".bitmap" ファイルに格納されます。リポジトリは最大で一つのビットマップファイルを使用できます。ビットマップファイルは、単一のパックに属しているか、またはリポジトリのマルチパックインデックス（存在する場合）に属しているかのどちらかです。

[[def_rebase]]リベース (rebase)::
	異なるベースに対して<<def_branch,ブランチ>>から一連の変更を再適用し、そのブランチの<<def_head,ヘッド>>をその結果にリセットします。

[[def_ref]]参照(ref)::
	`refs/`で始まる名前（例えば `refs/heads/master`）は、<<def_object_name,オブジェクト名>>または別の参照（後者は<<def_symref,シンボリック参照>>と呼ばれる）を指します。便宜上、参照はGitコマンドの引数として使用する際に時々省略されることがあります。詳細は linkgit:gitrevisions[7] を参照してください。参照は<<def_repository,リポジトリ>>に格納されます。
+
参照の名前空間は階層的です。異なる目的に応じて異なるサブ階層が使用されます（例えば、`refs/heads/` 階層はローカルブランチを表すために使用されます）。
+
`refs/`で始まらない特別な目的の参照がいくつかあります。最も分かりやすい例は `HEAD` です。

[[def_reflog]]参照ログ(reflog)::
	参照ログは参照のローカル「履歴」を表示します。言い換えると、_この_ リポジトリで3番目に最近のリビジョンが何であったか、また、_この_ リポジトリで昨日の午後9時14分現在の状態が何であったかを教えてくれます。詳細は linkgit:git-reflog[1] を参照してください。

[[def_refspec]]参照スペック(refspec)::
	「参照スペック」は<<def_fetch,フェッチ>>および<<def_push,プッシュ>>によって使用され、リモートの<<def_ref,参照>>とローカル参照の間のマッピングを記述します。

[[def_remote]]リモートリポジトリ (remote repository)::
	同じプロジェクトを追跡するが別の場所に存在する<<def_repository,リポジトリ>>。リモートと通信するには、<<def_fetch,フェッチ>>または<<def_push,プッシュ>>を参照してください。

[[def_remote_tracking_branch]]リモートトラッキングブランチ (remote-tracking branch)::
	他の<<def_repository,リポジトリ>>からの変更をたどるために使用される<<def_ref,参照>>。通常は 'refs/remotes/foo/bar' のような形をしており（これは、'foo' という名前のリモートの 'bar' という名前のブランチを追跡していることを示します）、設定されたフェッチの<<def_refspec,参照スペック>>の右側に一致します。リモート追跡ブランチには直接の変更を加えたり、ローカルコミットを行ったりするべきではありません。

[[def_repository]]リポジトリ(repository)::
	<<def_ref,参照>>の集まりと、参照から<<def_reachable,到達可能>>なすべてのオブジェクトを含む<<def_object_database,オブジェクトデータベース>>で構成されたコレクションで、これには一つまたは複数の<<def_porcelain,磁器>>からのメタデータが付随することもあります。リポジトリは<<def_alternate_object_database,代替の仕組み>>を通じて他のリポジトリとオブジェクトデータベースを共有することができます。

[[def_resolve]]解決 (resolve)::
	失敗した自動的な <<def_merge,マージ>> が残したものを手動で修正する行為。

[[def_revision]]リビジョン(revision)::
	<<def_commit,commit>> (名詞) と同義です。

[[def_rewind]]巻き戻し (rewind)::
	開発の一部を破棄すること、すなわち <<def_head,ヘッド>> を以前の <<def_revision,リビジョン>> に割り当てること。

[[def_SCM]]SCM::
	ソースコードマネジメント(ツール).

[[def_SHA1]]SHA-1::
	"Secure Hash Algorithm 1" 暗号学的ハッシュ関数です。Gitの文脈では<<def_object_name,オブジェクト名>>の同義語として使用されます。

[[def_shallow_clone]]シャロークローン (shallow clone)::
	主に<<def_shallow_repository,シャローリポジトリ>>の同義語ですが、この文言は `git clone --depth=...` コマンドを実行して作成されたことをより明確に表しています。

[[def_shallow_repository]]シャローリポジトリ (shallow repository)::
	シャロー<<def_repository,リポジトリ>>は、不完全な履歴を持ち、その中のいくつかの<<def_commit,コミット>>は<<def_parent,親>>が切り取られています（言い換えると、これらのコミットが<<def_commit_object,コミットオブジェクト>>に記録されているにも関わらず、Gitはこれらのコミットが親を持たないかのように振る舞うよう指示されています）。これは、プロジェクトの最近の履歴にのみ興味がある場合に便利ですが、実際の履歴はアップストリームにもっと大きく記録されている場合があります。シャローリポジトリは、 linkgit:git-clone[1] に`--depth`オプションを与えることで作成され、後に linkgit:git-fetch[1] を使って履歴を深めることができます。

[[def_stash]]スタッシュエントリー (stash entry)::
	一時的に<<def_dirty,ダーティ>>な作業ディレクトリとインデックスの内容を将来的な再利用のために保存することに使用される<<def_object,オブジェクト>>です。

[[def_special_ref]]特殊な参照 (special ref)::
	通常の参照と異なるセマンティクスを持つ参照。これらの参照は通常のGitコマンドでアクセスできますが、場合によって通常の参照と同じ挙動をしないケースがあります。
+
以下の特殊な参照がGitでは知られています:

 - "`FETCH_HEAD`" is written by linkgit:git-fetch[1] or linkgit:git-pull[1]. It may refer to multiple object IDs. Each object ID is annotated with metadata indicating where it was fetched from and its fetch status.

 - "`MERGE_HEAD`" is written by linkgit:git-merge[1] when resolving merge conflicts. It contains all commit IDs which are being merged.

[[def_submodule]]サブモジュール (submodule)::
	別のリポジトリ（<<def_superproject,親プロジェクト>>と呼ばれます）の中で分離されたプロジェクトの履歴を保持する<<def_repository,リポジトリ>>です。

[[def_superproject]]親プロジェクト (superproject)::
	作業ツリー内で他のプロジェクトのリポジトリを <<def_submodule,サブモジュール>> として参照する <<def_repository,リポジトリ>>。親プロジェクトは内包するサブモジュールのコミットオブジェクトの名前を知っています(が、それらのコピーは保持しません) 。

[[def_symref]]シンボリック参照 (symref)::
	シンボリック参照: <<def_SHA1,SHA-1>> ID自体を含むのではなく 'ref: refs/some/thing'という形式をとり、参照されると再帰的に <<def_dereference,参照外し>> をします。'<<def_HEAD,HEAD>>'はシンボリック参照の主な例です。シンボリック参照は linkgit:git-symbolic-ref[1] コマンドで操作されます。

[[def_tag]]タグ (tag)::
	`refs/tags/`名前空間の下にある <<def_ref,参照>> で、任意のタイプのオブジェクトを指します（通常はタグが<<def_tag_object,タグ>>または<<def_commit_object,コミットオブジェクト>>を指します）。<<def_head,ヘッド>>とは対照的に、タグは`commit`コマンドによって更新されません。GitのタグはLispのタグとは関係がありません（Gitの文脈では<<def_object_type,オブジェクトタイプ>>と呼ばれるでしょう）。タグは通常、コミットの祖先<<def_chain,チェーン>>の特定のポイントをマークするために使用されます。

[[def_tag_object]]タグオブジェクト (tag object)::
	他のオブジェクトを指す<<def_ref,参照>>を含む<<def_object,オブジェクト>>で、<<def_commit_object,コミットオブジェクト>>のようにメッセージを含むことができます。また、（PGPの）署名を含む場合は、「署名付きタグオブジェクト」と呼ばれます。

[[def_topic_branch]]トピックブランチ(topic branch)::
	開発者が開発の概念的な流れを識別するために使用する通常のGit<<def_branch,ブランチ>>です。ブランチは非常に簡単かつ安価であるため、非常に明確に定義された概念のものや 小さく少しずつ進めた関連する変更を含むもの などの小さなブランチをいくつか持つことが望ましいです。

[[def_tree]]ツリー (tree)::
	<<def_working_tree,ワーキングツリー>> または、 <<def_tree_object,ツリーオブジェクト>> のどちらかと、それに従属する <<def_blob_object,ブロブ>> およびツリーオブジェクト（つまりワーキングツリーの保存された表現）である。

[[def_tree_object]]ツリーオブジェクト (tree object)::
	ファイル名とモードのリスト、および関連するブロブオブジェクトとツリーオブジェクトへの参照を含む <<def_object,オブジェクト>> 。<<def_tree,ツリー>> は、 <<def_directory,ディレクトリ>> と同じです。

[[def_tree-ish]]ツリーの性質を持つもの (tree-ish (also treeish))::
	ツリーオブジェクトを再帰的に <<def_dereference,参照外し>> できる <<def_tree_object,ツリーオブジェクト>> または <<def_object,オブジェクト>> 。<<def_commit_object,コミッオブジェクト>> の参照先を展開すると、 <<def_revision,リビジョン>> の最上位 <<def_directory,ディレクトリ>> に対応するツリーオブジェクトが生成されます。以下はすべてツリーの性質を持つものです: <<def_commit-ish,コミットの性質を持つもの>>、 ツリーオブジェクト、ツリーオブジェクトを指す <<def_tag_object,タグオブジェクト>> 、ツリーオブジェクトを指すタグオブジェクトを指すタグオブジェクトなど。

[[def_unborn]]胎児 (unborn)::
	The <<def_HEAD,HEAD>> can point at a <<def_branch,branch>> that does not yet exist and that does not have any commit on it yet, and such a branch is called an unborn branch. The most typical way users encounter an unborn branch is by creating a repository anew without cloning from elsewhere. The HEAD would point at the 'main' (or 'master', depending on your configuration) branch that is yet to be born. Also some operations can get you on an unborn branch with their <<def_orphan,orphan>> option.


[[def_unmerged_index]]マージされていないインデックス (unmerged index)::
	マージされていない<<def_index_entry,インデックスエントリ>>を含む<<def_index,インデックス>>です。

[[def_unreachable_object]]到達不能オブジェクト (unreachable object)::
	<<def_branch,ブランチ>>、<<def_tag,タグ>>、またはその他の参照から<<def_reachable,到達可能>>ではない<<def_object,オブジェクト>>です。

[[def_upstream_branch]]上流ブランチ(upstream branch)::
	問題の中でブランチにマージされる（またはそのブランチがリベースされる）デフォルトの<<def_branch,ブランチ>>です。これはbranch.<名前>.remoteとbranch.<名前>.mergeを通じて設定されます。'A'の上流ブランチが'origin/B'である場合、「'A'は'origin/B'をトラッキングしている」と言うことがあります。

[[def_working_tree]]作業ツリー (working tree)::
	実際にチェックアウトされたファイルのツリーです。作業ツリーには通常、<<def_HEAD,HEAD>>コミットのツリーの内容が含まれており、さらにまだコミットしていないローカルでの変更が加わります。

[[def_worktree]]ワークツリー (worktree)::
	リポジトリは、ゼロ（すなわちベアリポジトリ）または一つ以上のワークツリーを持つことができます。一つの「ワークツリー」は、「作業ツリー」とリポジトリのメタデータで構成され、その大部分は単一リポジトリの他のワークツリー間で共有され、一部はワークツリーごとに個別に保持されます（例えば、インデックス、HEAD、MERGE_HEADのような疑似参照、ワークツリーごとの参照やワークツリーごとの設定ファイルなど）。
