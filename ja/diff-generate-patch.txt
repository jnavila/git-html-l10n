-p を使用したパッチ テキストの生成
-------------------

linkgit:git-diff[1]、linkgit:git-log[1]、linkgit:git-show[1]、linkgit:git-diff-index[1]、linkgit:git-diff-tree[1]、または linkgit:git-diff-files[1] に `-p` オプションをつけて実行すると、パッチテキストが作成されます。 環境変数の `GIT_EXTERNAL_DIFF` と `GIT_DIFF_OPTS` (linkgit:git[1] 参照) や `diff` 属性 (linkgit:gitattributes[5] 参照) を使ってパッチテキストの作成をカスタマイズすることができます。

-pオプションが生成するものは、伝統的なdiffフォーマットとは少し異なります。

1.   それの前に、次のような"gitdiff"ヘッダーがあります。

       diff --git a/file1 b/file2
+
`a/` と `b/` のファイル名は、リネームやコピーが絡まない限り、同じものになります。 特に、作成や削除の場合でも、`/dev/null` は `a/` や `b/` のファイル名の代わりに使われることは _ありません_ 。
+
リネーム/コピーが行われた場合、`file1` と `file2` はそれぞれリネーム/コピーの元となるファイルの名前と、リネーム/コピーが生成するファイルの名前を示しています。

2.   それに続いて、1つまたは複数の拡張ヘッダーラインがあります。

       old mode <mode>
       new mode <mode>
       deleted file mode <mode>
       new file mode <mode>
       copy from <path>
       copy to <path>
       rename from <path>
       rename to <path>
       similarity index <number>
       dissimilarity index <number>
       index <hash>..<hash> <mode>
+
ファイルモードは、ファイルタイプとファイルパーミッションビットを含む6桁の8進数で表示されます。
+
拡張ヘッダーのパス名には、 `a/` および `b/` プレフィックスは含まれません。
+
類似性指数は変化していない線の割合、非類似性指数は変化した線の割合です。 これは、切り捨てられた整数の後にパーセント記号を付けたものです。 したがって、類似度指数の値が100%の場合は、2つの等しいファイルのために予約され、一方、非類似度が100%の場合は、古いファイルから新しいファイルに入った行がないことを意味します。
+
インデックス行には、変更前と変更後のblobオブジェクト名が記載されています。 ファイルモードが変更されない場合は、<mode>が含まれ、そうでない場合は、新旧のモードを別々の行で示します。

3.  "異常な"文字を含むパス名は、設定変数 `core.quotePath` の説明に従って引用されます（linkgit:git-config[1]を参照）。

4.  出力に含まれるすべての `file1` ファイルはコミット前のファイルを指し、すべての `file2` ファイルはコミット後のファイルを指します。 各変更を各ファイルに順次適用するのは正しくありません。 例えば、このパッチは a と b を入れ替えます。

      diff --git a/a b/b
      rename from a
      rename to b
      diff --git a/b b/a
      rename from b
      rename to a

5.  ハンクヘッダは、そのハンクが適用される関数の名前を言及します。 これを特定の言語に合わせて調整する方法の詳細は linkgit:gitattributes[5] の "Defining a custom hunk-header" を参照してください。


結合されたdiffフォーマット
---------------

すべての diff 生成コマンドは、`-c` や `--cc` オプションを使ってマージを表示する際に「結合されたdiff」を生成することができます。これは、linkgit:git-diff[1]やlinkgit:git-show[1]でマージを表示するときのデフォルトの形式です。また、これらのコマンドに適切な `--diff-merges` オプションを与えることで、特定の形式の diff を強制的に生成することもできます。

"結合されたdiff" のフォーマットは次のようになります。

------------
diff --combined describe.c
index fabadb8,cc95eb0..4866510
--- a/describe.c
+++ b/describe.c
@@@ -98,20 -98,12 +98,20 @@@
	return (a_date > b_date) ? -1 : (a_date == b_date) ? 0 : 1;
  }

- static void describe(char *arg)
 -static void describe(struct commit *cmit, int last_one)
++static void describe(char *arg, int last_one)
  {
 +	unsigned char sha1[20];
 +	struct commit *cmit;
	struct commit_list *list;
	static int initialized = 0;
	struct commit_name *n;

 +	if (get_sha1(arg, sha1) < 0)
 +		usage(describe_usage);
 +	cmit = lookup_commit_reference(sha1);
 +	if (!cmit)
 +		usage(describe_usage);
 +
	if (!initialized) {
		initialized = 1;
		for_each_ref(get_name);
------------

1.   これの前には "git diff" というヘッダーが付けられ、次のようになります（`-c` オプションを使用した場合）。

       diff --combined file
+
または次のようになります（`--cc` オプションを使用した場合）。

       diff --cc file

2.   これに続いて、1つまたは複数の拡張ヘッダーラインが表示されます（この例では、2つの親を持つマージを示しています）。

       index <hash>,<hash>..<hash>
       mode <mode>,<mode>..<mode>
       new file mode <mode>
       deleted file mode <mode>,<mode>
+
`mode <mode>,<mode>...<mode>` の行は、少なくとも一つの <mode> が残りのものとは異なる場合にのみ表示されます。コンテンツの移動を検出した情報(リネームやコピーの検出)を含む拡張ヘッダは、2つの <tree-ish> のdiffで動作するように設計されており、結合されたdiffフォーマットでは使用されません。

3.   これに続いて2行の from-file/to-file ヘッダーがあります

       --- a/file
       +++ b/file
+
従来の 'unified' diffフォーマットの2行ヘッダーと同様に、`/dev/null` はファイルの作成や削除を知らせるために使われます。
+
ただし、--combined-all-pathsオプションを指定すると、2行の from-file/to-file ではなく、N+1行の from-file/to-file ヘッダーが表示されます（Nはマージコミットの親の数です）

       --- a/file
       --- a/file
       --- a/file
       +++ b/file
+
この拡張フォーマットは、名前の変更やコピーの検出が有効な場合に便利で、ファイルの元の名前を異なる親で確認することができます。

4.   誤って `patch -p1` に与えてしまわないように、チャンクのヘッダ形式を変更しました。結合されたdiff形式は、マージコミットの変更点を確認するために作成されたもので、適用することを意図したものではありません。この変更は、拡張 'index' ヘッダーの変更と同様です。

       @@@ <from-file-range> <from-file-range> <to-file-range> @@@
+
結合されたdiff形式のチャンクヘッダーには（親の数+ 1の） `@` 文字があります。

従来の'unified' diff形式とは異なり、2つのファイルAとBを、`-` (マイナス -- AにあるがBでは削除された)、`+` (プラス -- Aに無いがBに追加された)、`" "` (スペース -- 変更されていない)の接頭辞を持つ1つの列で表示するこの形式では、2つ以上のファイルfile1, file2,...と1つのファイルXを比較し、XがfileNのそれぞれとどのように異なるかを表示します。 fileNのそれぞれの1列が出力行の前に付加され、Xの行がそれとどのように異なるかを記します。

N列の `-` 文字は、その行がfileNに現れているが、結果には現れていないことを意味します。 N列の `+` 文字は、その行が結果に現れ、fileNにはその行がないことを意味します（つまり、その親から見れば、その行は追加されたことになります）。

上記の出力例では、関数のシグネチャが両方のファイルから変更されています（そのため、ファイル1とファイル2の両方から2つの `-` が削除され、さらに、追加された1行がファイル1とファイル2のどちらにも現れないことを意味する `++` が追加されています）。 また、他の8行は、ファイル1からは同じですが、ファイル2には現れません（そのため、前に `+` が付いています）。

`git diff-tree -c` で表示すると、マージコミットの親とマージ結果を比較します (つまり、 file1..fileN が親)。 `git diff-files -c` で表示される場合は、2つの未解決のマージ親と作業ツリーファイルを比較します(つまり、file1 はステージ2、別名 "私たちのバージョン" 、file2 はステージ3、別名 "彼らのバージョン" )。
