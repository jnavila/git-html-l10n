// Please don't remove this comment as asciidoc behaves badly when
// the first non-empty line is ifdef/ifndef. The symptom is that
// without this comment the <git-diff-core> attribute conditionally
// defined below ends up being defined unconditionally.
// Last checked with asciidoc 7.0.2.

ifndef::git-format-patch[]
ifndef::git-diff[]
ifndef::git-log[]
:git-diff-core: 1
endif::git-log[]
endif::git-diff[]
endif::git-format-patch[]

ifdef::git-format-patch[]
-p::
--no-stat::
	diffstatsを使用しないプレーンなパッチを生成します。
endif::git-format-patch[]

ifndef::git-format-patch[]
-p::
-u::
--patch::
	パッチの生成 (<<generate_patch_text_with_p>> を参照)。
ifdef::git-diff[]
	これはデフォルトです。
endif::git-diff[]

-s::
--no-patch::
	diff機構からのすべての出力を抑制します。デフォルトでパッチを表示する`git show`のようなコマンドの出力を抑えたり、またはエイリアスでコマンドラインの前の部分にある`--patch`や`--stat`などのオプションの効果をキャンセルしたりするのに便利です。

endif::git-format-patch[]

ifdef::git-log[]
-m::
	マージコミットの差分をデフォルトフォーマットで表示します。これは`--diff-merges=on`に似ていますが、`-m`は`-p`も同時に与えられない限り出力を生成しません。

-c::
	マージコミットに対して結合された差分出力を生成します。`--diff-merges=combined -p`のショートカットです。

--cc::
	マージコミットに対して密集した結合された差分出力を生成します。`--diff-merges=dense-combined -p`のショートカットです。

--dd::
	マージコミットおよび通常のコミットの両方について、最初の親に関する差分を生成します。`--diff-merges=first-parent -p`のショートカットです。

--remerge-diff::
	マージコミットに対して再マージ差分出力を生成します。`--diff-merges=remerge -p`のショートカットです。

--no-diff-merges::
	'--diff-merges=off' の同義語。

--diff-merges=<フォーマット>::
	マージコミットに使用する diff フォーマットを指定します。デフォルトは {diff-merges-default} です。ただし、`--first-parent` が使用されている場合は、`first-parent` がデフォルトになります。
+
以下のフォーマットがサポートされています:
+
--
off, none::
	マージコミットでの diff の出力を無効にします。暗黙的な値を上書きするのに便利です。
+
on, m::
	マージコミットの diff 出力をデフォルトのフォーマットで表示します。デフォルトのフォーマットは、コンフィギュレーション変数の `log.diffMerges` で変更することができ、そのデフォルト値は `separate` です。
+
first-parent, 1::
	最初の親に関して完全な差分を表示します。これは、非マージコミットに対して`--patch`が生成するのと同じフォーマットです。
+
separate::
	各親に関して完全な差分を表示します。各親について別々のログエントリーと差分が生成されます。
+
combined, c::
	親と結果のペアごとの差分を一度に1つずつ表示するのではなく、各親からの差分をマージ結果に同時に表示します。さらに、すべての親から変更されたファイルのみが一覧表示されます。
+
dense-combined, cc::
	`--diff-merges=combined` による出力をさらに圧縮し、親の内容が2つのバリエーションしかなく、マージ結果がそのうちの1つをそのまま選ぶような、退屈なハンクを省略します。
+
remerge, r::
	2つの親を持つマージコミットを再マージし、一時的なツリーオブジェクト（コンフリクトマーカーなどのファイルを含む可能性があります）が作成します。そして、その一時的なツリーと実際のマージコミットの間の差分が表示されます。
+
このオプションを使用したときに出力される内容は変更される可能性があり、他のオプションとの相互作用も（明示的に文書化されていない限り）変更される可能性があります。
--

--combined-all-paths::
	このフラグを指定すると、結合された差分 (マージコミットで使用) ですべての親ファイルのファイル名がリストアップされるようになります。このフラグは `--diff-merges=[dense-]combined` が使用されている場合にのみ効果があり、ファイル名の変更が検出された場合 (つまり、リネームやコピー検出が要求された場合) にのみ有効でしょう。
endif::git-log[]

-U<n>::
--unified=<n>::
	通常の3行ではなく、<n>行のコンテキストで差分を生成します。
ifndef::git-format-patch[]
	`--patch` を意味します。
endif::git-format-patch[]

--output=<ファイル>::
	標準出力の代わりに特定のファイルへ出力します。

--output-indicator-new=<文字>::
--output-indicator-old=<文字>::
--output-indicator-context=<文字>::
	生成されたパッチの新しい行、古い行、または前後関係の行を示すために使用される文字を指定します。通常、それらはそれぞれ'+'、'-'、および' 'です。

ifndef::git-format-patch[]
--raw::
ifndef::git-log[]
	差分をraw形式で生成します。
ifdef::git-diff-core[]
	これはデフォルトです。
endif::git-diff-core[]
endif::git-log[]
ifdef::git-log[]
	各コミットについて、raw形式の diff を使って変更のサマリーを表示します。
	linkgit:git-diff[1]の "RAW OUTPUT FORMAT" セクションを
	参照してください。これは、ログ自体をraw形式で
	表示するのとは異なります。そのようなことを実現するには
	`--format=raw` とします。
endif::git-log[]
endif::git-format-patch[]

ifndef::git-format-patch[]
--patch-with-raw::
	`-p --raw` と同義です。
endif::git-format-patch[]

ifdef::git-log[]
-t::
	diff出力にツリーオブジェクトを表示します。
endif::git-log[]

--indent-heuristic::
	差分ハンクの境界をずらす発見的解決法を有効にして、パッチを読みやすくします。これはデフォルトです。

--no-indent-heuristic::
	インデントの発見的解決法を無効にします。

--minimal::
	可能な限り小さな差分を出すために、更に時間を費やします。

--patience::
	"patience diff"アルゴリズムを用いてdiffを生成します。

--histogram::
	"histogram diff" アルゴリズムを用いてdiffを生成します。

--anchored=<テキスト>::
	"anchored diff"アルゴリズムでdiffを生成します。
+
このオプションは複数回指定できます。
+
ある行がソースと宛先の両方に存在し、一度だけ存在し、そのテキストで始まる場合、このアルゴリズムは、出力に削除または追加として現れるのを防ごうとします。これは、内部で "patience diff" アルゴリズムを使用します。

--diff-algorithm={patience|minimal|histogram|myers}::
	diffのアルゴリズムを選択します。バリアントは以下の通りです。
+
--
`default`, `myers`;;
	基本的な greedy diff アルゴリズム。現在のところ、これがデフォルトです。
`minimal`;;
	可能な限り小さな差分を出すために、更に時間を費やします。
`patience`;;
	パッチを生成する際に、"patience diff" アルゴリズムを使用します。
`histogram`;;
	このアルゴリズムは、patience アルゴリズムを拡張し、「発生頻度の低い共通要素をサポート」します。
--
+
例えば、 `diff.algorithm` 変数をデフォルト以外の値に設定している上で、デフォルトの値を使用したい場合は、 `--diff-algorithm=default` オプションを使用する必要があります。

--stat[=<幅>[,<名前幅>[,<数える数>]]]::
	diffstatを生成します。デフォルトでは、必要なだけのスペースがファイル名部分に使われ、残りはグラフ部分に使われます。最大幅はデフォルトで端末の幅、端末に接続されていない場合は80カラムであり、 `<幅>` で上書きすることができます。ファイル名部分の幅は、カンマの後に `<名前幅>` という別の幅を与えるか、 `diff.statNameWidth=<幅>` を設定することで制限できます。グラフ部分の幅は `--stat-graph-width=<幅>` を使用するか `diff.statGraphWidth=<幅>` を設定することで制限できます。`--stat` か `--stat-graph-width` を使うことで statグラフを生成する全てのコマンドに影響しますが、 `diff.statNameWidth` や `diff.statGraphWidth` を設定しても `git format-patch` には影響しません。第3のパラメータとして `<数える数>` を与えることで、出力を最初の `<数える数>` 行に制限でき、それ以上ある場合は `...` が続きます。
+
これらのパラメータは、個別に `--stat-width=<幅>`、`--stat-name-width=<名前幅>` および `--stat-count=<数える数>` を用いて設定することもできます。

--compact-summary::
	ファイルの作成または削除("new" または "gone"、シンボリックリンクの場合はオプションで "+l")やモードの変更（それぞれ実行可能ビットの追加または削除に "+x" または "-x"）などの拡張ヘッダー情報を diffstat で凝縮して出力するようにします。この情報は、ファイル名部分とグラフ部分の間に置かれます。`--stat` を意味します。

--numstat::
	`--stat` と似ていますが、追加された行数と削除された行数を10進数で表示し、マシンフレンドリーとなるようにパス名は省略せずに表示します。バイナリファイルの場合、`0 0` の代わりに `-` を2つ出力します。

--shortstat::
	変更されたファイルの総数、追加された行数、削除された行数を含む `--stat` フォーマットの最終行のみを出力する。

-X[<param1,param2,...>]::
--dirstat[=<param1,param2,...>]::
	各サブディレクトリの相対的な変更量の分布を出力します。`--dirstat` の振る舞いはカンマで区切られたパラメータを渡すことでカスタマイズできます。デフォルトでは、設定変数 `diff.dirstat` によって制御されます (linkgit:git-config[1] を参照)。以下のパラメータが利用可能です。
+
--
`changes`;;
	ソースから削除された行、または宛先に追加された行をカウントして、dirstat番号を計算します。これは、ファイル内の純粋なコード移動の量を無視します。つまり、ファイル内の行を並べ替えることは、他の変更点ほどにはカウントされません。これは、パラメータが与えられていない場合のデフォルトの動作です。
`lines`;;
	通常の行ベースの差分解析を行い、削除された行数と追加された行数を合計することで、dirstat数を計算します。(バイナリファイルには行という自然な概念がないため、バイナリファイルの場合は代わりに64バイトのチャンクを数えます)。これは `changes` 動作よりも高価な `--dirstat` 動作ですが、ファイル内で並べ替えられた行を他の変更と同じようにカウントします。出力結果は、他の `--*stat` オプションで得られるものと同じです。
`files`;;
	変更されたファイルの数を数えて、dirstatの数値を計算します。変更された各ファイルは、dirstatの分析において等しくカウントされます。これは、ファイルの内容を全く見る必要がないため、計算上最も安価な `--dirstat` の動作です。
`cumulative`;;
	子ディレクトリの変更も親ディレクトリにカウントします。`cumulative` を使用する場合、報告されるパーセントの合計は100%を超える可能性があることに注意してください。デフォルトの (累積しない) 動作は `noncumulative` パラメータで指定できます。
<制限>;;
	整数のパラメータでカットオフ率を指定します（デフォルトでは3％）。このパーセンテージ以下の変更しか貢献していないディレクトリは出力に表示されません。
--
+
例: 以下は、変更されたファイル総数の10％未満のディレクトリを無視し、親ディレクトリに子ディレクトリの数を累積しながら、変更されたファイルをカウントします: `--dirstat=files,10,cumulative`。

--cumulative::
	--dirstat=cumulative と同義

--dirstat-by-file[=<param1,param2>...]::
	--dirstat=files,<param1>,<param2>... と同義

--summary::
	作成、名前変更、モード変更などの拡張ヘッダー情報を要約して出力します。

ifndef::git-format-patch[]
--patch-with-stat::
	`-p --stat` と同義です。
endif::git-format-patch[]

ifndef::git-format-patch[]

-z::
ifdef::git-log[]
	コミットの区切りには、改行ではなくNULを使用します。
+
また、 `--raw` や `--numstat` が指定された場合には、パス名をつぶさずに、出力フィールドの終端子に NUL を使用します。
endif::git-log[]
ifndef::git-log[]
	When `--raw`, `--numstat`, `--name-only` or `--name-status` has been
	given, do not munge pathnames and use NULs as output field terminators.
endif::git-log[]
+
このオプションがない場合、パス名に "通常ではない" 文字が含まれていても、設定変数 `core.quotePath` の解釈に従って引用されます (linkgit:git-config[1] を参照)。

--name-only::
	Show only the name of each changed file in the post-image tree. The file names are often encoded in UTF-8. For more information see the discussion about encoding in the linkgit:git-log[1] manual page.

--name-status::
	Show only the name(s) and status of each changed file. See the description of the `--diff-filter` option on what the status letters mean. Just like `--name-only` the file names are often encoded in UTF-8.

--submodule[=<フォーマット>]::
	サブモジュールの差分をどのように表示するかを指定します。`--submodule=short` と指定すると、 'short' というフォーマットが使用されます。この形式では、範囲の最初と最後のコミット名を表示するだけです。`--submodule` または `--submodule=log` を指定すると、 'log' の書式が使用されます。この書式は、 linkgit:git-submodule[1] `summary` が行うように、範囲内のコミットをリストアップします。`--submodule=diff` を指定すると、 'diff' の書式が使用されます。このフォーマットはコミット範囲のサブモジュールの内容の変更点をインラインで差分表示します。デフォルトは `diff.submodule` で、オプションが設定されていない場合は 'short' フォーマットとなります。

--color[=<いつ>]::
	色付きの差分を表示します。 `--color` （つまり、'=<いつ>' なし）は `--color=always` と同じです。'<いつ>'は、 `always` 、 ` never` 、または `auto` のいずれかになります。
ifdef::git-diff[]
	これは、 `color.ui` と `color.diff` の設定によって
	変更できます。
endif::git-diff[]

--no-color::
	色付きの差分をオフにする。
ifdef::git-diff[]
	これは、構成設定を上書きできます。
endif::git-diff[]
	これは、 `--color=never` と同じです。

--color-moved[=<モード>]::
	移動したコード行は別の色で表示されます。
ifdef::git-diff[]
	これは `diff.colorMoved` という構成設定によって変更できます。
endif::git-diff[]
	オプションそのものが指定されていない場合、<モード> のデフォルトは 'no' であり、
	オプションにモードが指定されていない場合は 'zebra' になります。
	モードは以下のいずれかでなければなりません。
+
--
no::
	移動した行はハイライトされません。
default::
	`zebra` と同義です。これは将来、より賢明なモードに変更されるかもしれません。
plain::
	ある場所で追加され、別の場所で削除された行は 'color.diff.newMoved' で色付けされます。同様に 'color.diff.oldMoved' は、差分内の他の場所に追加された、削除された行に使用されます。このモードは移動された行をすべて拾いますが、コードのブロックが並び替えられずに移動されたかどうかを判断するためのレビューにはあまり役に立ちません。
blocks::
	20文字以上の英数字からなる移動したテキストのブロックを貪欲に検出します。検出されたブロックは 'color.diff.{old,new}Moved' のいずれかの色で塗られます。隣接するブロックは見分けられません。
zebra::
	移動したテキストのブロックは 'blocks' モードと同様に検出されます。ブロックは 'color.diff.{old,new}Moved' の色、または 'color.diff.{old,new}MovedAlternative' の色を使って描画されます。2つの色の間の変化は、新しいブロックが検出されたことを示します。
dimmed-zebra::
	'zebra' と似ていますが、移動したコードの興味のない部分をさらに淡色化します。隣接する2つのブロックの境界線は興味深いとみなされ、それ以外は興味深くないとみなされます。`dimmed_zebra` は、非推奨の同義語です。
--

--no-color-moved::
	移動検出をオフにします。これは、構成設定を上書きするために使用できます。これは `--color-moved=no` と同じです。

--color-moved-ws=<モード>::
	`--color-moved` の移動検出を行う際に、どのように空白を無視するかを設定します。
ifdef::git-diff[]
	`diff.colorMovedWS`の構成設定によって指定できます。
endif::git-diff[]
	これらのモードはカンマで区切られたリストとして指定できます。
+
--
no::
	移動検出を行う際に、空白を無視しません。
ignore-space-at-eol::
	EOLの空白の変化を無視します。
ignore-space-change::
	空白の量の変化を無視します。これは，行末の空白を無視し，それ以外の1文字以上の空白文字の並びをすべて等価と見なします。
ignore-all-space::
	行の比較時に空白を無視します。これは、一方の行に空白があり、他方の行に空白がない場合でも、その差を無視します。
allow-indentation-change::
	最初は移動の検出に空白があっても無視し、空白の変化が行ごとに同じである場合にのみ移動したコードブロックをひとかたまりにまとめます。これは他のモードと互換性がありません。
--

--no-color-moved-ws::
	移動検出を行う際に空白を無視しません。これは構成設定を上書きするために使用できます。これは `--color-moved-ws=no` と同じです。

--word-diff[=<モード>]::
	単語の差分を表示し、 <モード> を使って変更された単語を区切ります。デフォルトでは、単語は空白で区切られます。以下の `--word-diff-regex` を参照してください。デフォルトは 'plain' で、以下のいずれかでなければなりません。
+
--
color::
	変更された単語を色だけで強調表示します。`--color`を意味します。
plain::
	単語を`[-削除されたもの-]`と`{+追加されたもの+}`として表示します。入力に区切り文字が現れた場合、それをエスケープする試みは行わないため、出力が曖昧になる可能性があります。
porcelain::
	スクリプトに食わせるのに向いた特別な行ベースのフォーマットを使用します。追加/削除/変更されていない文字の連続 に対し通常の統一された差分フォーマットで表示され、行の先頭に `+`/`-`/` ` の文字があり、行の最後まで続きます。入力された改行は、チルダ `~` それだけの改行で表されます。
none::
	再度単語の差分を無効にします。
--
+
最初のモードの名前にもかかわらず、有効になっている場合はすべてのモードで変更された部分を強調表示するため色付けされます。

--word-diff-regex=<正規表現>::
	空白ではない文字の連続を単語とみなすのではなく、単語とは何かを決定するために<正規表現>を使用します。また、すでに有効になっていない限り、`--word-diff` を意味します。
+
<正規表現>の重複しないすべてのマッチしたものは単語とみなされます。これらのマッチの間のものは空白と見なされ、差異を見つけるために無視されます(!)。あなたの正規表現に `|[^[:space:]]` を追加して、すべての非空白文字にマッチするようにしておくことをお勧めします。改行を含む一致は、改行の時点で静かに切り捨てられます(!)。
+
例えば、`--word-diff-regex=.` は、各文字を単語として扱い、それに応じて、文字ごとに差異を表示します。
+
正規表現は、差分ドライバーや設定オプションを通しても設定できます。詳しくは linkgit:gitattributes[5] または linkgit:git-config[1] を参照してください。これを明示的に与えることで、どんな差分ドライバーや構成設定も上書きされます。差分ドライバーは構成設定を上書きします。

--color-words[=<正規表現>]::
	`--word-diff=color` と（もし正規表現が指定されていれば）`--word-diff-regex=<正規表現>` に相当します。
endif::git-format-patch[]

--no-renames::
	設定ファイルでデフォルトとして指定されている場合でも、名前変更の検出をオフにします。

--[no-]rename-empty::
	空のブロブを名前変更のソースとして使用するかどうか。

ifndef::git-format-patch[]
--check::
	変更がコンフリクトマーカーまたは空白エラーを引き起こした場合に警告します。何が空白エラーとみなされるかは `core.whitespace` 設定によって制御されます。デフォルトでは、末尾の空白（空白のみからなる行を含む）および行の最初のインデントでタブ文字の直後に続くスペース文字が空白エラーとみなされます。問題が見つかった場合、非ゼロのステータスで終了します。 --exit-code とは互換性がありません。

--ws-error-highlight=<種類>::
	diffの`context`、`old`、または`new`行における空白のエラーを強調表示します。複数の値はカンマで区切られ、`none`は以前の値をリセットし、`default`はリストを`new`にリセットし、`all`は`old,new,context`の省略形です。このオプションが指定されておらず、かつ設定変数`diff.wsErrorHighlight`が設定されていない場合、`new`行の空白エラーのみが強調表示されます。空白のエラーは`color.diff.whitespace`で色付けされます。

endif::git-format-patch[]

--full-index::
	パッチ形式の出力を生成する際に、「インデックス」行において、最初のいくつかの文字の代わりに、完全な事前および事後のイメージblobオブジェクト名を表示します。

--binary::
	`--full-index` に加えて、`git-apply` で適用可能なバイナリ差分を出力します。
ifndef::git-format-patch[]
	`--patch` を意味します。
endif::git-format-patch[]

--abbrev[=<n>]::
	diff-raw形式の出力とdiff-treeヘッダーラインにおいて、完全な40バイトの16進数オブジェクト名を表示する代わりに、オブジェクトを一意に参照するのに最低でも '<n>' 桁の長さの最短プレフィックスを表示します。diff-patch出力形式では、`--full-index` がより高い優先度を持ちます。つまり、`--full-index` が指定されている場合は、`--abbrev` に関係なく完全なblob名が表示されます。デフォルトでない桁数は`--abbrev=<n>`で指定できます。

-B[<n>][/<m>]::
--break-rewrites[=[<n>][/<m>]]::
	完全に書き換えられた変更を削除と作成のペアに分割します。これには2つの目的があります：
+
It affects the way a change that amounts to a total rewrite of a file not as a series of deletion and insertion mixed together with a very few lines that happen to match textually as the context, but as a single deletion of everything old followed by a single insertion of everything new, and the number `m` controls this aspect of the -B option (defaults to 60%). `-B/70%` specifies that less than 30% of the original should remain in the result for Git to consider it a total rewrite (i.e. otherwise the resulting patch will be a series of deletion and insertion mixed together with context lines).
+
When used with -M, a totally-rewritten file is also considered as the source of a rename (usually -M only considers a file that disappeared as the source of a rename), and the number `n` controls this aspect of the -B option (defaults to 50%). `-B20%` specifies that a change with addition and deletion compared to 20% or more of the file's size are eligible for being picked up as a possible source of a rename to another file.

-M[<n>]::
--find-renames[=<n>]::
ifndef::git-log[]
	名前変更の検出。
endif::git-log[]
ifdef::git-log[]
	差分を生成する場合、各コミットに対して名前変更を検出し報告します。
	履歴をたどりながら名前変更されたファイルを追跡するには、
	`--follow` を参照してください。
endif::git-log[]
	`n` が指定された場合、それは類似度指数（つまり、ファイルサイズに対する追加/削除の量）に対する閾値です。
	例えば、`-M90%` は、ファイルの90%以上が変更されていない場合、Gitが削除/追加のペアを名前変更と見なすべきことを意味します。
	
	`%` 記号がない場合、その数値は小数点を前にして分数として読むべきです。
	すなわち、`-M5` は 0.5 となり、`-M50%` と同じです。
	同様に、`-M05` は `-M5%` と同じです。
	完全な名前変更のみを検出するには、`-M100%` を使用します。
	
	デフォルトの類似度指数は 50% です。

-C[<n>]::
--find-copies[=<n>]::
	Detect copies as well as renames. See also `--find-copies-harder`. If `n` is specified, it has the same meaning as for `-M<n>`.

--find-copies-harder::
	For performance reasons, by default, `-C` option finds copies only if the original file of the copy was modified in the same changeset. This flag makes the command inspect unmodified files as candidates for the source of copy. This is a very expensive operation for large projects, so use it with caution. Giving more than one `-C` option has the same effect.

-D::
--irreversible-delete::
	Omit the preimage for deletes, i.e. print only the header but not the diff between the preimage and `/dev/null`. The resulting patch is not meant to be applied with `patch` or `git apply`; this is solely for people who want to just concentrate on reviewing the text after the change. In addition, the output obviously lacks enough information to apply such a patch in reverse, even manually, hence the name of the option.
+
When used together with `-B`, omit also the preimage in the deletion part of a delete/create pair.

-l<数>::
	The `-M` and `-C` options involve some preliminary steps that can detect subsets of renames/copies cheaply, followed by an exhaustive fallback portion that compares all remaining unpaired destinations to all relevant sources. (For renames, only remaining unpaired sources are relevant; for copies, all original sources are relevant.) For N sources and destinations, this exhaustive check is O(N^2). This option prevents the exhaustive portion of rename/copy detection from running if the number of source/destination files involved exceeds the specified number. Defaults to diff.renameLimit. Note that a value of 0 is treated as unlimited.

ifndef::git-format-patch[]
--diff-filter=[(A|C|D|M|R|T|U|X|B)...[*]]::
	Select only files that are Added (`A`), Copied (`C`), Deleted (`D`), Modified (`M`), Renamed (`R`), have their type (i.e. regular file, symlink, submodule, ...) changed (`T`), are Unmerged (`U`), are Unknown (`X`), or have had their pairing Broken (`B`). Any combination of the filter characters (including none) can be used. When `*` (All-or-none) is added to the combination, all paths are selected if there is any file that matches other criteria in the comparison; if there is no file that matches other criteria, nothing is selected.
+
Also, these upper-case letters can be downcased to exclude. E.g. `--diff-filter=ad` excludes added and deleted paths.
+
Note that not all diffs can feature all types. For instance, copied and renamed entries cannot appear if detection for those types is disabled.

-S<文字列>::
	Look for differences that change the number of occurrences of the specified string (i.e. addition/deletion) in a file. Intended for the scripter's use.
+
It is useful when you're looking for an exact block of code (like a struct), and want to know the history of that block since it first came into being: use the feature iteratively to feed the interesting block in the preimage back into `-S`, and keep going until you get the very first version of the block.
+
Binary files are searched as well.

-G<正規表現>::
	Look for differences whose patch text contains added/removed lines that match <regex>.
+
To illustrate the difference between `-S<regex> --pickaxe-regex` and `-G<regex>`, consider a commit with the following diff in the same file:
+
----
+    return frotz(nitfol, two->ptr, 1, 0);
...
-    hit = frotz(nitfol, mf2.ptr, 1, 0);
----
+
While `git log -G"frotz\(nitfol"` will show this commit, `git log -S"frotz\(nitfol" --pickaxe-regex` will not (because the number of occurrences of that string did not change).
+
Unless `--text` is supplied patches of binary files without a textconv filter will be ignored.
+
See the 'pickaxe' entry in linkgit:gitdiffcore[7] for more information.

--find-object=<オブジェクトID>::
	Look for differences that change the number of occurrences of the specified object. Similar to `-S`, just the argument is different in that it doesn't search for a specific string but for a specific object id.
+
The object can be a blob or a submodule commit. It implies the `-t` option in `git-log` to also find trees.

--pickaxe-all::
	When `-S` or `-G` finds a change, show all the changes in that changeset, not just the files that contain the change in <string>.

--pickaxe-regex::
	Treat the <string> given to `-S` as an extended POSIX regular expression to match.

endif::git-format-patch[]

-O<順序ファイル>::
	Control the order in which files appear in the output. This overrides the `diff.orderFile` configuration variable (see linkgit:git-config[1]). To cancel `diff.orderFile`, use `-O/dev/null`.
+
The output order is determined by the order of glob patterns in <orderfile>. All files with pathnames that match the first pattern are output first, all files with pathnames that match the second pattern (but not the first) are output next, and so on. All files with pathnames that do not match any pattern are output last, as if there was an implicit match-all pattern at the end of the file. If multiple pathnames have the same rank (they match the same pattern but no earlier patterns), their output order relative to each other is the normal order.
+
<orderfile> is parsed as follows:
+
--
 - Blank lines are ignored, so they can be used as separators for readability.

 - Lines starting with a hash ("`#`") are ignored, so they can be used for comments. Add a backslash ("`\`") to the beginning of the pattern if it starts with a hash.

 - Each other line contains a single pattern.
--
+
Patterns have the same syntax and semantics as patterns used for fnmatch(3) without the FNM_PATHNAME flag, except a pathname also matches a pattern if removing any number of the final pathname components matches the pattern. For example, the pattern "`foo*bar`" matches "`fooasdfbar`" and "`foo/bar/baz/asdf`" but not "`foobarx`".

--skip-to=<ファイル>::
--rotate-to=<ファイル>::
	Discard the files before the named <file> from the output (i.e. 'skip to'), or move them to the end of the output (i.e. 'rotate to'). These options were invented primarily for the use of the `git difftool` command, and may not be very useful otherwise.

ifndef::git-format-patch[]
-R::
	Swap two inputs; that is, show differences from index or on-disk file to tree contents.
endif::git-format-patch[]

--relative[=<パス>]::
--no-relative::
	When run from a subdirectory of the project, it can be told to exclude changes outside the directory and show pathnames relative to it with this option. When you are not in a subdirectory (e.g. in a bare repository), you can name which subdirectory to make the output relative to by giving a <path> as an argument. `--no-relative` can be used to countermand both `diff.relative` config option and previous `--relative`.

-a::
--text::
	Treat all files as text.

--ignore-cr-at-eol::
	Ignore carriage-return at the end of line when doing a comparison.

--ignore-space-at-eol::
	EOLの空白の変化を無視します。

-b::
--ignore-space-change::
	空白の量の変化を無視します。これは，行末の空白を無視し，それ以外の1文字以上の空白文字の並びをすべて等価と見なします。

-w::
--ignore-all-space::
	行の比較時に空白を無視します。これは、一方の行に空白があり、他方の行に空白がない場合でも、その差を無視します。

--ignore-blank-lines::
	Ignore changes whose lines are all blank.

-I<正規表現>::
--ignore-matching-lines=<正規表現>::
	すべての行が <正規表現> に一致する変更を無視します。このオプションは複数回指定できます。

--inter-hunk-context=<行数>::
	diffハンク間のコンテキストを、指定された行数まで表示し、互いに近いハンクを融合させます。コンフィグオプションが未設定の場合、`diff.interHunkContext`または0がデフォルト値となります。

-W::
--function-context::
	Show whole function as context lines for each change. The function names are determined in the same way as `git diff` works out patch hunk headers (see 'Defining a custom hunk-header' in linkgit:gitattributes[5]).

ifndef::git-format-patch[]
ifndef::git-log[]
--exit-code::
	Make the program exit with codes similar to diff(1). That is, it exits with 1 if there were differences and 0 means no differences.

--quiet::
	Disable all output of the program. Implies `--exit-code`. Disables execution of external diff helpers whose exit code is not trusted, i.e. their respective configuration option `diff.trustExitCode` or `diff.<driver>.trustExitCode` or environment variable `GIT_EXTERNAL_DIFF_TRUST_EXIT_CODE` is false.
endif::git-log[]
endif::git-format-patch[]

--ext-diff::
	Allow an external diff helper to be executed. If you set an external diff driver with linkgit:gitattributes[5], you need to use this option with linkgit:git-log[1] and friends.

--no-ext-diff::
	Disallow external diff drivers.

--textconv::
--no-textconv::
	Allow (or disallow) external text conversion filters to be run when comparing binary files. See linkgit:gitattributes[5] for details. Because textconv filters are typically a one-way conversion, the resulting diff is suitable for human consumption, but cannot be applied. For this reason, textconv filters are enabled by default only for linkgit:git-diff[1] and linkgit:git-log[1], but not for linkgit:git-format-patch[1] or diff plumbing commands.

--ignore-submodules[=<いつ>]::
	Ignore changes to submodules in the diff generation. <when> can be either "none", "untracked", "dirty" or "all", which is the default. Using "none" will consider the submodule modified when it either contains untracked or modified files or its HEAD differs from the commit recorded in the superproject and can be used to override any settings of the 'ignore' option in linkgit:git-config[1] or linkgit:gitmodules[5]. When "untracked" is used submodules are not considered dirty when they only contain untracked content (but they are still scanned for modified content). Using "dirty" ignores all changes to the work tree of submodules, only changes to the commits stored in the superproject are shown (this was the behavior until 1.7.0). Using "all" hides all changes to submodules.

--src-prefix=<接頭辞>::
	Show the given source prefix instead of "a/".

--dst-prefix=<接頭辞>::
	Show the given destination prefix instead of "b/".

--no-prefix::
	Do not show any source or destination prefix.

--default-prefix::
	Use the default source and destination prefixes ("a/" and "b/"). This overrides configuration variables such as `diff.noprefix`, `diff.srcPrefix`, `diff.dstPrefix`, and `diff.mnemonicPrefix` (see `git-config`(1)).

--line-prefix=<接頭辞>::
	Prepend an additional prefix to every line of output.

--ita-invisible-in-index::
	By default entries added by "git add -N" appear as an existing empty file in "git diff" and a new file in "git diff --cached". This option makes the entry appear as a new file in "git diff" and non-existent in "git diff --cached". This option could be reverted with `--ita-visible-in-index`. Both options are experimental and could be removed in future.

For more detailed explanation on these common options, see also linkgit:gitdiffcore[7].
