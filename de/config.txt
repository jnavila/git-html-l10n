KONFIGURATIONSDATEI
-------------------

Die Git-Konfigurationsdatei enthält eine Reihe von Variablen, die das
Verhalten der Git-Befehle beeinflussen. Die Dateien `.git/config` und
optional `config.worktree` (siehe den Abschnitt „KONFIGURATIONSDATEI“ in
linkgit:git-worktree[1]) in jedem Repository werden verwendet, um die
Konfiguration für dieses Repository zu speichern. Mit `$HOME/.gitconfig`
wird außerdem pro Benutzer eine Konfiguration als Fallback-Werte für die
Datei `.git/config` gespeichert. Die Datei `/etc/gitconfig` kann verwendet
werden, um eine systemweite Standardkonfiguration zu sichern.

Die Konfigurationsvariablen werden sowohl von den "Plumbing"- als auch von
den "Porcelain"-Befehlen verwendet. Die Variablen sind in Gruppen
unterteilt, wobei der vollqualifizierte Variablenname das Segment nach dem
letzten Punkt ist und der Gruppenname alles vor dem letzten Punkt. Die
Variablennamen unterscheiden nicht zwischen Groß- und Kleinschreibung,
erlauben nur alphanumerische Zeichen und '-' und müssen mit einem
alphanumerischen Zeichen beginnen. Einige Variablen dürfen mehrmals
vorkommen; wir sagen dann, die Variable ist mehrwertig.

Syntax
~~~~~~

Die Syntax ist ziemlich flexibel und tolerant; Leerzeichen werden
größtenteils ignoriert. Die Zeichen '#' und ';' beginnen Kommentare bis zum
Zeilenende, Leerzeilen werden ignoriert.

Die Datei besteht aus Gruppen und Variablen. Eine Gruppe beginnt mit dem
Gruppennamen in eckigen Klammern und geht bis zum nächsten
Gruppenanfang. Gruppennamen unterscheiden keine Groß- und
Kleinschreibung. Nur alphanumerische Zeichen, '-' und '.' sind in
Gruppennamen erlaubt. Jede Variable muss zu einer Gruppe gehören, was
bedeutet, dass eine Gruppenüberschrift vor der ersten Variablenzuweisung
zwingend ist.

Gruppen können weiter in Untergruppen unterteilt werden. Um eine Untergruppe
zu beginnen, schreiben Sie ihren Namen in doppelten Anführungszeichen, durch
ein Leerzeichen vom Gruppentitel getrennt, wie in folgendem Beispiel:

--------
	[Gruppe "Untergruppe"]

--------

Die Namen der Untergruppen unterscheiden zwischen Groß- und Kleinschreibung
und können beliebige Zeichen enthalten, außer Zeilenumbruch und
Null-Byte. Doppelte Anführungszeichen '"' und Rückwärtsschrägstriche '\'
können mit Escaping verwenden werden, also '\"' und
'\\'. Rückwärtsschrägstriche vor anderen Zeichen werden beim Lesen
weggelassen; '\t' wird beispielsweise als 't' gelesen und '\0' als
'0'. Gruppentitel können nicht über mehrere Zeilen gehen. Variablen können
direkt zu einer Gruppe oder zu einer Untergruppe gehören. Sie können
'[Gruppe]' haben, wenn Sie '[Gruppe "Untergruppe"]' haben, aber es ist nicht
zwingend nötig.

Es gibt außerdem die veraltete '[Gruppe.Untergruppe]'-Syntax. Mit dieser
Syntax wird der Untergruppenname in Kleinbuchstaben konvertiert und
unterscheidet dann auch zwischen Groß- und Kleinschreibung. Diese
Untergruppennamen folgen den gleichen Einschränkungen wie Gruppennamen.

Alle anderen Zeilen (und der Rest der Zeile nach der Gruppenüberschrift)
werden als Einstellungsvariablen erkannt, in der Form 'Name = Wert' (oder
nur 'Name', was bedeutet, der Wert der Variable ist "true").  Die
Variablennamen unterscheiden zwischen Groß- und Kleinschreibung, dürfen nur
alphanumerische Zeichen und '-' enthalten und müssen mit einem
alphanumerischen Zeichen beginnen.

Eine Zeile, die einen Wert definiert, kann auf der nächsten Zeile
weitergehen, indem sie mit '\' aufhört; der Rückwärtsschrägstrich und das
Zeilenende werden verworfen. Leerzeichen nach 'Name=', der Rest einer Zeile
nach dem ersten Kommentarzeichen '#' oder ';' und Leerzeichen am Zeilenende
werden verworfen, außer sie stehen zwischen doppelten
Anführungszeichen. Leerzeichen im Innern des Werts werden im Wortlaut
beibehalten.

Zwischen doppelten Anführungszeichen müssen doppelte Anführungszeichen '"'
und Rückwärtsschrägstriche '\' escaped werden: '\"' für '"' und '\\' für
'\'.

Die folgenden Escape-Sequenzen (neben '\"' und '\\') werden erkannt: '\n'
als Zeilenumbruch (NL), '\t' für Tab (HT, TAB) und '\b' für Backspace
(BS). Andere Escape-Sequenzen (auch oktale Escape-Sequenzen) sind ungültig.


Includes (Dateieinbettungen)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Die Abschnitte `include` und `includeIf` erlauben es Ihnen,
Konfigurationsanweisungen aus einer anderen Quelle einzubinden. Diese
Abschnitte verhalten sich identisch zueinander mit der Ausnahme, dass die
Abschnitte `includeIf` ignoriert werden können, wenn ihre Bedingung nicht
als „true“ erkannt wird; siehe „Bedingte Includes“ weiter unten.

Sie können eine Konfigurationsdatei aus einer anderen Quelle einbinden,
indem Sie die spezielle Variable `include.path` (oder `includeIf.*.path`)
auf den Namen der einzubindenden Datei setzen. Die Variable nimmt einen
Pfadnamen als Wert an und berücksichtigt die Tilde-Erweiterung. Diese
Variablen können mehrfach angegeben werden.

Der Inhalt der eingebundenen Datei wird sofort eingefügt, so als ob er an
der Stelle der Include-Anweisung gefunden worden wäre. Wenn der Wert der
Variablen ein relativer Pfad ist, wird der Pfad als relativ zu der
Konfigurationsdatei angesehen, in der die Include-Anweisung gefunden wurde.
Siehe Beispiele weiter unten.

Bedingte Includes
~~~~~~~~~~~~~~~~~

Sie können eine Konfigurationsdatei aus einer anderen bedingt einbinden,
indem Sie eine `includeIf.<Bedingung>.path` Variable auf den Namen der
einzubindenden Datei setzen.

Die Bedingung beginnt mit einem Schlüsselwort, gefolgt von einem Doppelpunkt
und einigen Daten, deren Format und Bedeutung vom Schlüsselwort
abhängt. Gültige Schlüsselwörter sind:

`gitdir`::

	Die Daten, die dem Schlüsselwort `gitdir:` folgen, werden als Glob-Pattern
	verwendet. Wenn die Position des Verzeichnisses .git mit dem Pattern
	übereinstimmt, ist die Include-Bedingung erfüllt.
+
Die .git-Position kann automatisch ermittelt werden oder aus der
Umgebungsvariablen `$GIT_DIR` abgeleitet werden. Wenn das Repository über
eine .git-Datei automatisch erkannt wird (z.B. aus Untermodulen oder einem
verknüpften Arbeitsverzeichnis), wäre der Speicherort von .git der finale
Ort, an dem sich das .git-Verzeichnis befindet, nicht der Ort, an dem sich
die
.git-Datei befindet.
+
Das Suchmuster kann Standard-Globbing-Platzhalter und zwei zusätzliche
Platzhalter, `**/` und `/**`, enthalten, die mit mehreren Pfadkomponenten
übereinstimmen könnten. Bitte lesen Sie linkgit:gitignore[5] für weitere
Details. Der Einfachheit halber:

 * Beginnt das Pattern mit `~/`, so wird das `~` durch den Inhalt der
   Umgebungsvariablen `HOME` ersetzt.

 * Beginnt das Pattern mit `./`, so wird es durch das Verzeichnis ersetzt, das
   die aktuelle Konfigurationsdatei enthält.

 * Beginnt das Pattern weder mit `~/`, `./` noch mit `/`, wird automatisch ein
   `**/` vorangestellt. Zum Beispiel wird das Suchmuster `foo/bar` zu
   `**/foo/bar` und würde mit `/irgendein/Pfad/zu/foo/bar` übereinstimmen.

 * Endet das Pattern mit `/`, so wird automatisch `**`
   hinzugefügt. Beispielsweise wird das Suchmuster `foo/` zu `foo/**`. Mit
   anderen Worten, es stimmt rekursiv mit „foo“ und allem, was sich darin
   befindet, überein.

`gitdir/i`::
	Das entspricht `gitdir`, außer dass der Abgleich ohne Berücksichtigung von
	Groß- und Kleinschreibung erfolgt (z.B. auf Dateisystemen ohne diese
	Unterscheidung)

`onbranch`::
	Die Daten, die dem Schlüsselwort `onbranch:` folgen, werden als ein Pattern
	mit Standard-Globbing-Platzhaltern und zwei zusätzlichen Platzhaltern, `**/`
	und `/**`, verstanden, die mit mehreren Pfadkomponenten übereinstimmen
	könnten.  Wenn wir uns in einem Arbeitsbereich befinden, in dem der Name des
	Branches, der gerade ausgecheckt wird, mit dem Suchmuster übereinstimmt, ist
	die Include-Bedingung erfüllt.
+
Endet das Pattern mit `/`, wird automatisch `**` hinzugefügt. Zum Beispiel
wird das Muster `foo/` zu `foo/**`. Mit anderen Worten, es passt auf alle
Branches, die mit `foo/` beginnen. Das ist dann hilfreich, wenn Ihre
Branches hierarchisch organisiert sind und Sie eine Konfiguration auf alle
Branches in dieser Hierarchie anwenden möchten.

Noch ein paar Anmerkungen zum Vergleichen über `gitdir` und `gitdir/i`:

 * Symlinks in `$GIT_DIR` werden vor dem Abgleich nicht ausgewertet.

 * Sowohl die Symlink- als auch die Realpfad-Versionen der Pfadangaben werden
   außerhalb von `$GIT_DIR` abgeglichen. Wenn z.B. ~/git ein Symlink zu
   /mnt/storage/git wäre, dann würden beide Versionen von `gitdir:~/git` und
   `gitdir:/mnt/storage/git` übereinstimmen.
+
Dies war bei der ursprünglichen Version dieses Features in v2.13.0 nicht der
Fall, welche nur der realpath-Version entsprochen hat. Eine Konfiguration,
die mit der ursprünglichen Version dieses Features kompatibel sein will,
muss entweder nur die realpath-Version oder beide Versionen angeben.

 * Beachten Sie, dass "../" nichts Besonderes ist und wortwörtlich
   übereinstimmen wird, was vermutlich nicht das ist, was Sie erreichen wollen.

Beispiel
~~~~~~~~

----
# Kernvariablen
[core]
	; Vertraue den Dateimodi nicht
	filemode = false

# Unser diff-Algorithmus
[diff]
	external = /usr/local/bin/diff-wrapper
	renames = true

[branch "devel"]
	remote = origin
	merge = refs/heads/devel

# Proxyeinstellungen
[core]
	gitProxy="ssh" for kernel.org
	gitProxy=default-proxy ; für den Rest

[include]
	path = /path/to/foo.inc ; über den absoluten Pfad einbinden
	path = foo.inc ; finde "foo.inc" relativ zur aktuellen Datei
	path = ~/foo.inc ; finde "foo.inc" im `$HOME` Verzeichnis

; einbinden, falls $GIT_DIR /Pfad/zu/foo/.git ist
[includeIf "gitdir:/Pfad/zu/foo/.git"]
	path = /Pfad/zu/foo.inc

; alle Repositories innerhalb von /Pfad/zur/Gruppe einbinden
[includeIf "gitdir:/Pfad/zur/Gruppe"]
	path = /Pfad/zu/foo.inc

; einbinden, für alle Repositorys innerhalb von $HOME/zur/Gruppe
[includeIf "gitdir:~/zur/Gruppe/"]
	path = /Pfad/zu/foo.inc

; relative Pfade sind immer relativ zu der einschließenden 
; Datei (wenn die Bedingung wahr ist); ihr Speicherort 
; wird von der Bedingung nicht beeinflusst
[includeIf "gitdir:/Pfad/zur/Gruppe/"]
	path = foo.inc

; nur dann einbinden, wenn wir uns in einem Arbeitsbereich 
; befinden, in dem foo-branch gerade ausgecheckt wird
[includeIf "onbranch:foo-branch"]
	path = foo.inc
----

Werte
~~~~~

Die Werte vieler Variablen werden als einfache Zeichenfolge behandelt, aber
es gibt Variablen, die Werte bestimmter Typen annehmen und es gibt
Richtlinien, wie sie zu formulieren sind.

boolean::

       Wenn eine Variable einen Wahrheitswert annehmen soll, werden viele Synonyme
       für 'true' oder 'false' akzeptiert; Groß- und Kleinschreibung wird dabei
       nicht beachtet.

	true;; 	Boolesche Werte für „true“ können alternativ auch `yes`, `on`, `true`
		und `1` sein. Auch eine Variable, die ohne `= <Wert>`
		definiert ist, wird als wahr angenommen.

	false;; 	Boolesche Werte für „false“ können alternativ auch `no`, `off`, `false`,
		`0` und eine leere Zeichenkette sein.
+
Bei der Konvertierung eines Wertes in seine kanonische Form unter Verwendung
des `--type=bool` Typ-Bezeichners wird 'git config' die Ausgabe "true" oder
"false" (in Kleinbuchstaben geschrieben) ausgeben.

integer::
       Der Wert für viele Variablen, die unterschiedliche Größen angeben, kann mit
       den Suffixen `k`, `M`, ... versehen werden. Das bedeutet, dass die Zahl "mit
       1024", "mit 1024x1024", ... skaliert wird.

color::
       Der Wert für eine Variable, die eine Farbe darstellt, ist eine durch
       Leerzeichen getrennte Liste von Farben (maximal zwei, einmal Vordergrund und
       einmal Hintergrund) und von Attributen (unbegrenzt viele).
+
Die akzeptierten Grundfarben sind `normal`, `black`, `red`, `green`,
`yellow`, `blue`, `magenta`, `cyan` und `white`.  Die erste angegebene Farbe
ist der Vordergrund, die zweite bestimmt den Hintergrund.  Alle Grundfarben
mit Ausnahme von `normal` haben eine helle Variante, die durch Voranstellen
von `bright` vor der Farbe spezifiziert werden kann, wie z.B. `brightred`.
+
Farben können auch als Zahlen zwischen 0 und 255 angegeben werden; diese
verwenden den ANSI-256-Farbmodus (beachten Sie jedoch, dass dies
möglicherweise nicht von allen Terminals unterstützt wird).  Wenn Ihr
Terminal dies unterstützt, können Sie auch 24-bit RGB-Werte als Hex-Wert
angeben, wie z.B. `#ff0ab3`.
+
Die akzeptierten Attribute sind `bold`, `dim`, `ul`, `blink`, `reverse`,
`italic` und `strike` (für durchgekreuzte oder durchgestrichene Zeichen).
Die Position jeglicher Attribute in Bezug auf die Farben (vor, nach oder
zwischen den Farben) spielt keine Rolle. Bestimmte Attribute können
abgeschaltet werden, indem man ihnen `no` oder `no-` voranstellt
(z.B. `noreverse`, `no-ul`, usw.).
+
Ein leerer Farb-String erzeugt überhaupt keinen Farbeffekt. Damit kann das
Einfärben bestimmter Elemente vermieden werden, ohne die Farbe vollständig
zu deaktivieren.
+
Für die vordefinierten Farbslots von Git sollen die Attribute am Anfang
jedes Elements in der farbigen Ausgabe zurückgesetzt werden. Wenn Sie also
`color.decorate.branch` auf `black` setzen, wird dieser Branch-Name in
schlichtem „schwarz“ dargestellt, selbst wenn die vorherige Sache in der
gleichen Ausgabezeile (z.B. öffnende Klammer vor der Liste der Branch-Namen
in der `log --decorate` Ausgabe) mit `bold` oder einem anderen Attribut
dargestellt wird.  Benutzerdefinierte Protokollformate können jedoch eine
kompliziertere und überlagerte Farbgebung bewirken, und die negierten Formen
könnten dort nützlich sein.

pathname::
	Einer Variablen, die einen Pfadnamen-Wert annimmt, kann ein String übergeben
	werden, der mit "`~/`" oder "`~user/`" beginnt. Die übliche
	Tilde-Erweiterung kommt bei einem solchen String zur Anwendung: `~/` wird
	auf den Wert von `$HOME` erweitert, und `~user/` auf das Home-Verzeichnis
	des angegebenen Benutzers.


Variablen
~~~~~~~~~

Beachten Sie, dass diese Liste nicht ausführlich und nicht unbedingt
vollständig ist.  Für kommando-spezifische Variablen finden Sie eine
ausführlichere Beschreibung in der entsprechenden Manpage.

Andere Git-Tools können und werden ihre eigenen Variablen verwenden.  Wenn
Sie neue Variablen für die Verwendung in Ihrem eigenen Dienstprogramm
entwickeln, stellen Sie sicher, dass deren Namen nicht in Konflikt mit denen
stehen, die von Git selbst und anderen beliebten Hilfsprogrammen verwendet
werden. Beschreiben Sie diese Variablen in Ihrer Dokumentation.

include::config/advice.txt[]

include::config/core.txt[]

include::config/add.txt[]

include::config/alias.txt[]

include::config/am.txt[]

include::config/apply.txt[]

include::config/blame.txt[]

include::config/branch.txt[]

include::config/browser.txt[]

include::config/checkout.txt[]

include::config/clean.txt[]

include::config/color.txt[]

include::config/column.txt[]

include::config/commit.txt[]

include::config/credential.txt[]

include::config/completion.txt[]

include::config/diff.txt[]

include::config/difftool.txt[]

include::config/fastimport.txt[]

include::config/feature.txt[]

include::config/fetch.txt[]

include::config/format.txt[]

include::config/filter.txt[]

include::config/fsck.txt[]

include::config/gc.txt[]

include::config/gitcvs.txt[]

include::config/gitweb.txt[]

include::config/grep.txt[]

include::config/gpg.txt[]

include::config/gui.txt[]

include::config/guitool.txt[]

include::config/help.txt[]

include::config/http.txt[]

include::config/i18n.txt[]

include::config/imap.txt[]

include::config/index.txt[]

include::config/init.txt[]

include::config/instaweb.txt[]

include::config/interactive.txt[]

include::config/log.txt[]

include::config/mailinfo.txt[]

include::config/mailmap.txt[]

include::config/man.txt[]

include::config/merge.txt[]

include::config/mergetool.txt[]

include::config/notes.txt[]

include::config/pack.txt[]

include::config/pager.txt[]

include::config/pretty.txt[]

include::config/protocol.txt[]

include::config/pull.txt[]

include::config/push.txt[]

include::config/rebase.txt[]

include::config/receive.txt[]

include::config/remote.txt[]

include::config/remotes.txt[]

include::config/repack.txt[]

include::config/rerere.txt[]

include::config/reset.txt[]

include::config/sendemail.txt[]

include::config/sequencer.txt[]

include::config/showbranch.txt[]

include::config/splitindex.txt[]

include::config/ssh.txt[]

include::config/status.txt[]

include::config/stash.txt[]

include::config/submodule.txt[]

include::config/tag.txt[]

include::config/tar.txt[]

include::config/trace2.txt[]

include::config/transfer.txt[]

include::config/uploadarchive.txt[]

include::config/uploadpack.txt[]

include::config/url.txt[]

include::config/user.txt[]

include::config/versionsort.txt[]

include::config/web.txt[]

include::config/worktree.txt[]
