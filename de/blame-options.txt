-b::
	Leere SHA-1 für Grenz-Commits anzeigen. Kann auch über die Option
	`blame.blankboundary` gesteuert werden.

--root::
	Root-Commits nicht als Grenze behandeln. Kann auch über die Option
	`blame.showRoot` gesteuert werden.

--show-stats::
	Zusätzliche Statistiken am Ende der blame-Ausgabe anzeigen.

-L <Anfang>,<Ende>::
-L : <Funktionsname>::
	Nur den angegebenen Zeilenbereich annotieren. Kann mehrfach angegeben
	werden. Überlappende Bereiche sind erlaubt.
+
<Anfang> und <Ende> sind optional.``-L <Anfang>'' oder ``-L <Anfang>,'' geht
von <Anfang> bis zum Dateiende. ``-L ,<Ende>'' geht vom Dateianfang bis
<Ende>.
+
include::line-range-format.txt[]

-l::
	Zeige lange Revisionsnummer an (Standard: aus).

-t::
	Zeige unformatierten Zeitstempel an (Standard: aus).

-S <Revisionen-Datei>::
	Nimm Revisionen aus der Revisionen-Datei statt linkgit:git-rev-list[1]
	aufzurufen.

--reverse <Revision>..<Revision>::
	Den Verlauf vorwärts statt rückwärts durchgehen. Anstatt die erste Revision
	anzuzeigen, in der eine Zeile erschien, wird die letzte Revision angezeigt,
	in der die Zeile noch existierte. Dies erfordert einen Revisionsbereich wie
	ANFANG..ENDE, wobei die gesuchte Stelle in ANFANG existieren muss.  `git
	blame --reverse ANFANG` ist die Abkürzung für `git blame --reverse
	ANFANG..HEAD`.

--first-parent::
	Follow only the first parent commit upon seeing a merge commit. This option
	can be used to determine when a line was introduced to a particular
	integration branch, rather than when it was introduced to the history
	overall.

-p::
--porcelain::
	In einem maschinenlesbaren Format anzeigen.

--line-porcelain::
	Das "Porcelain"-Format anzeigen, aber Commit-Information für jede Zeile
	anzeigen, nicht nur bei der ersten Erwähnung eines Commits.  Impliziert
	--porcelain.

--incremental::
	Das Resultat inkrementell in einem maschinenlesbaren Format anzeigen.

--encoding=<Encoding>::
	Definiert das Encoding für die Ausgabe der Autorennamen und
	Commit-Zusammenfassungen. Mit dem Wert `none` gibt blame die Daten
	unkonvertiert aus. Für mehr Informationen lesen Sie die Encoding-Diskussion
	in der Hilfe zu linkgit:git-log[1].

--contents <Datei>::
	Wenn <Rev> nicht angegeben wird, gibt der Befehl die Änderungen rückwärts
	ausgehend von der Arbeitskopie an.  Mit diesem Flag verhält sich der Befehl
	so, als hätte die Arbeitskopie den Inhalt der genannten Datei (schreiben Sie
	`-`, damit der Befehl von der Standardeingabe liest).

--date <Format>::
	Gibt das Datumsausgabeformat an. Wenn --date nicht angegeben ist, wird der
	Wert der config-Variable blame.date verwendet. Wenn blame.date auch nicht
	gesetzt ist, wird das ISO-Format verwendet. Für unterstützte Werte lesen Sie
	die Abschnitt über die --date Option auf linkgit:git-log[1].

--[no-]progress::
	Der Fortschritt wird nur standardmäßig auf der Standardfehlerausgabe
	angezeigt, wenn dieser an ein Terminal angebunden ist. Dieses Flag erlaubt
	die Fortschrittsanzeige auch ohne Terminalanbindung. `--progress` kann nicht
	zusammen mit `--porcelain` oder `--incremental` verwendet werden.

-M[<Anz>]::
	Ermittelt verschobene oder kopierte Zeilen innerhalb einer Datei. Wenn ein
	Commit einen Zeilenblock verschiebt oder kopiert (z.B. wenn die
	Ausgangsdatei zuerst A und dann B hat und der Commit das zu B und dann A
	verändert), bemerkt der traditionelle 'blame'-Algorithmus nur die Hälfte der
	Bewegung und schreibt normalerweise die nach oben verschobenen Zeilen (A)
	dem Elterncommit und die nach unten verschobenen Zeilen (B) dem Kindcommit
	zu. Mit dieser Option werden beide Zeilenblöcke dem Elterncommit
	zugeschrieben, indem zusätzliche Prüfungen durchgeführt werden.
+
<Anz> ist optional. Es ist die Untergrenze für die Anzahl alphanumerischer
Zeichen, die Git innerhalb einer Datei als geschoben/kopiert ermitteln muss,
damit diese Zeilen mit dem Elterncommit assoziiert werden. Der Standardwert
ist 20.

-C[<Anz>]::
	Zusätzlich zu `-M`, Zeilen suchen, die aus anderen Dateien, die im selben
	Commit bearbeitet wurden, verschoben oder kopiert wurden. Das ist hilfreich,
	wenn Sie Ihr Programm umorganisieren und Code zwischen Dateien hin- und
	herschieben. Wenn diese Option zweimal mitgegeben wird, sucht der Befehl
	zusätzlich Kopien aus anderen Dateien des Commits, der die Datei
	erstellt. Wenn die Option dreimal mitgegeben wird, sucht der Befehl außerdem
	Kopien aus anderen Dateien in allen Commits.
+
<Anz> ist optional. Es ist die Untergrenze für die Anzahl alphanumerischer
Zeichen, die Git als zwischen Dateien geschoben/kopiert ermitteln muss,
damit diese Zeilen mit dem Elternkommit assoziiert werden. Der Standardwert
ist 40. Wenn mehr als eine `-C`-Option angegeben wird, zählt das
<Anz>-Argument des letzten `-C`.

--ignore-rev <Revision>::
	Ignore changes made by the revision when assigning blame, as if the change
	never happened.  Lines that were changed or added by an ignored commit will
	be blamed on the previous commit that changed that line or nearby lines.
	This option may be specified multiple times to ignore more than one
	revision.  If the `blame.markIgnoredLines` config option is set, then lines
	that were changed by an ignored commit and attributed to another commit will
	be marked with a `?` in the blame output.  If the
	`blame.markUnblamableLines` config option is set, then those lines touched
	by an ignored commit that we could not attribute to another revision are
	marked with a '*'.

--ignore-revs-file <Datei>::
	Ignore revisions listed in `file`, which must be in the same format as an
	`fsck.skipList`.  This option may be repeated, and these files will be
	processed after any files specified with the `blame.ignoreRevsFile` config
	option.  An empty file name, `""`, will clear the list of revs from
	previously processed files.

-h::
	Hilfetext anzeigen.
