git-config(1)
=============

NAME
----
git-config – Repository eigene oder globale Optionen auslesen und setzen


ÜBERSICHT
---------
[verse]
'git config' [<file-option>] [--type=<type>] [--fixed-value] [--show-origin] [--show-scope] [-z|--null] <name> [<value> [<value-pattern>]]
'git config' [<file-option>] [--type=<type>] --add <name> <value>
'git config' [<file-option>] [--type=<type>] [--fixed-value] --replace-all <name> <value> [<value-pattern>]
'git config' [<file-option>] [--type=<type>] [--show-origin] [--show-scope] [-z|--null] [--fixed-value] --get <name> [<value-pattern>]
'git config' [<file-option>] [--type=<type>] [--show-origin] [--show-scope] [-z|--null] [--fixed-value] --get-all <name> [<value-pattern>]
'git config' [<file-option>] [--type=<type>] [--show-origin] [--show-scope] [-z|--null] [--fixed-value] [--name-only] --get-regexp <name-regex> [<value-pattern>]
'git config' [<file-option>] [--type=<type>] [-z|--null] --get-urlmatch <name> <URL>
'git config' [<file-option>] [--fixed-value] --unset <name> [<value-pattern>]
'git config' [<file-option>] [--fixed-value] --unset-all <name> [<value-pattern>]
'git config' [<file-option>] --rename-section <old-name> <new-name>
'git config' [<file-option>] --remove-section <name>
'git config' [<file-option>] [--show-origin] [--show-scope] [-z|--null] [--name-only] -l | --list
'git config' [<file-option>] --get-color <name> [<default>]
'git config' [<file-option>] --get-colorbool <name> [<stdout-is-tty>]
'git config' [<file-option>] -e | --edit

BESCHREIBUNG
------------
Sie können mit diesem Befehl Optionen abfragen/setzen/ersetzen/leeren. Der Name ist tatsächlich der Abschnitt und der Schlüssel, getrennt durch einen Punkt, und der Wert wird außer Acht gelassen.

Multiple lines can be added to an option by using the `--add` option. If you want to update or unset an option which can occur on multiple lines, a `value-pattern` (which is an extended regular expression, unless the `--fixed-value` option is given) needs to be given. Only the existing values that match the pattern are updated or unset. If you want to handle the lines that do *not* match the pattern, just prepend a single exclamation mark in front (see also <<EXAMPLES>>), but note that this only works when the `--fixed-value` option is not in use.

Die Option `--type=<Typ>` veranlasst 'git config' zu überprüfen, ob ein- und ausgehende Werte unter den angegebenen <Typ> zulässig sind. Wenn kein `--type=<Typ>` angegeben ist, wird keine Kanonisierung durchgeführt. Benutzer können einen bestehenden `--type` Bezeichner mit `--no-type` aufheben.

Standardmäßig werden die Werte aus den lokalen Konfigurationsdateien des Systems, der globalen Einstellung und der des Repositorys ausgelesen. Die Optionen `--system`, `--global`, `--local`, `---worktree` und `--file <Datei-Name>` können verwendet werden, um dem Befehl anzuweisen, nur von diesem Speicherort zu lesen (siehe den Abschnitt <<DATEIEN>>).

Beim Schreiben wird der neue Wert standardmäßig in die lokale Konfigurationsdatei des Repositorys geschrieben, und die Optionen `--system`, `--global`, `--worktree`, `--file <filename>` können benutzt werden, um dem Befehl mitzuteilen, dass er dorthin schreiben soll (Sie können `--local` angeben, aber das ist schon die Voreinstellung).

Dieser Befehl schlägt bei einem Fehler mit einem Nicht-Null-Status fehl. Einige dieser Exit-Codes sind:

- Der Abschnitt oder Schlüssel ist ungültig (ret=1),
- weder Abschnitt noch Name wurde angegeben (ret=2),
- die Konfigurationsdatei ist falsch (ret=3),
- die Konfigurationsdatei kann nicht geschrieben werden (ret=4),
- Sie versuchen, eine nicht existierende Option aufzuheben (ret=5),
- Sie versuchen, eine Option rückgängig zu machen/einzustellen, für die mehrere Zeilen übereinstimmen (ret=5), oder
- Sie versuchen, einen ungültigen regulären Ausdruck (regexp) zu verwenden (ret=6).

Bei erfolgreichem Abschluss gibt der Befehl den Exit-Code 0 zurück.

A list of all available configuration variables can be obtained using the `git help --config` command.

[[OPTIONS]]
OPTIONEN
--------

--replace-all::
	Default behavior is to replace at most one line. This replaces all lines matching the key (and optionally the `value-pattern`).

--add::
	Adds a new line to the option without altering any existing values. This is the same as providing '^$' as the `value-pattern` in `--replace-all`.

--get::
	Liefert den Wert für einen angegebenen Schlüssel (optional gefiltert durch einen dem Wert entsprechenden Regex). Gibt Fehlercode 1 zurück, wenn der Schlüssel nicht gefunden wurde. Wenn mehrere Schlüsselwerte gefunden werden, wird der letzte Wert zurückgegeben.

--get-all::
	Entspricht `--get`, liefert aber alle Werte eines mehrwertigen Schlüssels zurück.

--get-regexp::
	Wie `--get-all`, interpretiert den Namen aber als regulären Ausdruck und gibt die Schlüsselnamen aus. Der Abgleich mit regulären Ausdrücken unterscheidet derzeit zwischen Groß- und Kleinschreibung und erfolgt gegen eine kanonisierte Version des Schlüssels, in der die Namen von Abschnitt und Variablen kleingeschrieben werden, die Namen von Unterabschnitten jedoch nicht.

--get-urlmatch <name> <URL>::
	When given a two-part name section.key, the value for section.<URL>.key whose <URL> part matches the best to the given URL is returned (if no such key exists, the value for section.key is used as a fallback). When given just the section as name, do so for all the keys in the section and list them. Returns error code 1 if no value is found.

--global::
	Bei Schreib-Optionen: schreibt in die globale `~/.gitconfig` Datei anstatt in die `.git/config` des Repositorys, schreibt in die `$XDG_CONFIG_HOME/git/config` Datei, wenn diese Datei existiert und die `~/.gitconfig` Datei nicht.
+
Bei Lese-Optionen: Liest nur aus der globalen `~/.gitconfig` und aus `$XDG_CONFIG_HOME/git/config`, statt aus allen verfügbaren Dateien.
+
Siehe auch <<DATEIEN>>.

--system::
	Bei Schreib-Optionen: schreibt in die systemweite `$(prefix)/etc/gitconfig` Datei, anstatt im Repository auf `.git/config`.
+
Bei Lese-Optionen: nur aus systemweitem `$(prefix)/etc/gitconfig` lesen, nicht aus allen verfügbaren Dateien.
+
Siehe auch <<DATEIEN>>.

--local::
	Bei Schreib-Optionen: Schreibt in die `.git/config` Datei des Repositorys. Dies entspricht dem Standardverhalten.
+
Bei Lese-Optionen: nur aus der Repository `.git/config` lesen, nicht aus allen verfügbaren Dateien.
+
Siehe auch <<DATEIEN>>.

--worktree::
	Analog zu `--local', außer dass `.git/config.worktree' gelesen oder geschrieben wird, sofern `extensions.worktreeConfig` vorhanden ist. Falls nicht, ist es identisch mit `--local`.

-f <config-file>::
--file <config-file>::
	For writing options: write to the specified file rather than the repository `.git/config`.
+
For reading options: read only from the specified file rather than from all available files.
+
Siehe auch <<DATEIEN>>.

--blob <blob>::
	Analog zu `--file`, aber benutzt den genannten Blob anstelle einer Datei. Sie können z.B. 'master:.gitmodules' verwenden, um Werte aus der Datei '.gitmodules' im Master-Branch zu lesen. Siehe den Abschnitt "REVISIONEN SPEZIFIZIEREN" in linkgit:gitrevisions[7] für eine umfassende Liste von Schreibweisen für Blob-Namen.

--remove-section::
	Entfernt den angegebenen Abschnitt aus der Konfigurations-Datei.

--rename-section::
	Umbenennen des betreffenden Abschnitts auf einen neuen Namen.

--unset::
	Löscht die Zeile, auf die der Schlüssel passt, aus der Konfigurations-Datei.

--unset-all::
	Löscht alle Zeilen, auf die der Schlüssel passt, aus der Konfigurations-Datei.

-l::
--list::
	Listet alle in der Konfigurations-Datei gesetzten Variablen mit ihren Werten auf.

--fixed-value::
	When used with the `value-pattern` argument, treat `value-pattern` as an exact string instead of a regular expression. This will restrict the name/value pairs that are matched to only those where the value is exactly equal to the `value-pattern`.

--type <Typ>::
  'git config' sorgt dafür, dass jede Eingabe oder Ausgabe unter der/den angegebenen Typ-Bedingung(en) gültig ist und wird ausgehende Werte in der zulässigen Form von `<Typ>`ausgeben.
+
Zulässige Werte von `<Typ>` enthalten:
+
- 'bool': die Werte entweder als „wahr“ (true) oder „falsch“ (false) deklarieren.
- 'int': die Werte als einfache Dezimalzahlen deklarieren. Ein optionales Suffix von 'k', 'm' oder 'g' bewirkt, dass der Wert der Eingabe mit 1024, 1048576 oder 1073741824 multipliziert wird.
- 'bool-or-int': entsprechend der obigen Beschreibung entweder nach 'bool' oder 'int' kanonisieren.
- 'path': kanonisieren durch Hinzufügen einer führenden `~` zum Wert von `$HOME` und `~user` zum Home-Verzeichnis für den angegebenen Benutzer. Dieser Spezifizierer hat keine Auswirkung, wenn ein Wert gesetzt wird (aber Sie können `git config section.variable ~/` von der Kommandozeile aus benutzen, um Ihre Shell die Erweiterung durchführen zu lassen)
- 'expiry-date': kanonisieren durch Konvertieren von einem fixen oder relativen Datumsstring in einen Zeitstempel. Diese Angabe hat keine Auswirkung beim Setzen des Wertes.
- 'color': Wenn Sie einen Wert erhalten, kanonisieren Sie ihn, indem Sie ihn in eine ANSI-Farb-Escape-Sequenz konvertieren. Wenn ein Wert festgelegt wurde, so wird eine Überprüfung durchgeführt, um sicherzustellen, dass der angegebene Wert als ANSI-Farbe kanonisierbar ist, aber er wird so wie er ist ausgegeben.
+

--bool::
--int::
--bool-or-int::
--path::
--expiry-date::
  Historische Optionen zur Auswahl eines Typ-Bezeichners. Stattdessen sollte man besser `--type` wählen (siehe oben).

--no-type::
  Setzt den zuvor eingestellten Typ-Bezeichner zurück, falls zuvor einer eingestellt war. Diese Option verlangt, dass 'git config' die abgerufene Variable nicht kanonisiert. `--no-type` hat keine Wirkung ohne `--type=<type>` oder `--<type>`.

-z::
--null::
	Für alle Optionen, die Werte und/oder Schlüssel ausgeben, immer die Werte mit einem Null-Zeichen beenden (anstatt eines Zeilenumbruchs). Stattdessen sollte ein Zeilenumbruch als Trennzeichen zwischen Schlüssel und Wert verwendet werden. Dies ermöglicht z.B. ein sicheres Parsen der Ausgabe, ohne durch in den Werten enthaltene Zeilenumbrüche verwirrt zu werden.

--name-only::
	Nur die Namen der Konfigurationsvariablen für `--list` oder `--get-regexp` ausgeben.

--show-origin::
	Die Ausgabe aller abgefragten Konfigurationsoptionen mit dem Origin-Typ (Datei, Standardeingabe, Blob, Kommandozeile) und dem aktuellen Original (Konfigurationsdateipfad, Ref oder Blob-ID, falls zutreffend) erweitern.

--show-scope::
	Vergleichbar mit `--show-origin` insoweit es die Ausgabe aller abgefragten Konfigurationsoptionen um den Rahmen dieses Wertes (lokal, global, System, Befehl) erweitert.

--get-colorbool <name> [<stdout-is-tty>]::

	Find the color setting for `<name>` (e.g. `color.diff`) and output "true" or "false". `<stdout-is-tty>` should be either "true" or "false", and is taken into account when configuration says "auto". If `<stdout-is-tty>` is missing, then checks the standard output of the command itself, and exits with status 0 if color is to be used, or exits with status 1 otherwise. When the color setting for `name` is undefined, the command uses `color.ui` as fallback.

--get-color <name> [<default>]::

	Findet für `name` die konfigurierte Farbe (z.B. `color.diff.new`) und gibt sie als ANSI-Farb-Escape-Sequenz für die Standardausgabe aus. Der optionale Parameter `default` wird stattdessen verwendet, wenn für `name` keine Farbe konfiguriert ist.
+
`--type=color [--default=<Vorgabe>]` wird gegenüber `--get-color` bevorzugt (bitte aber beachten, dass `--get-color` den durch `--type=color` angehängten Zeilenumbruch auslässt).

-e::
--edit::
	Öffnet einen Editor, um die angegebene Konfigurationsdatei zu ändern; entweder aus `--system`, `--global`, oder dem Repository (die Voreinstellung).

--[no-]includes::
	Berücksichtigt `include.*` Direktiven in Konfigurationsdateien, wenn Werte nachgeschlagen werden. Standardeinstellung ist `off`, wenn eine bestimmte Datei angegeben wird (z.B. mit `--file`, `--global`, usw.) und `on`, wenn alle Konfigurationsdateien durchsucht werden.

--default <Wert>::
  Wird mit `--get` benutzt. Wenn die angeforderte Variable nicht gefunden wird, dann wird <Wert> so eingesetzt als ob dieser der Variablen zugewiesen wurde.

KONFIGURATION
-------------
`pager.config` wird nur bei der Auflistung der Konfiguration beachtet, d.h. bei der Verwendung von `--list` oder einem der `--get-*`, die mehrere Ergebnisse liefern können. Die Voreinstellung ist die Verwendung eines Pagers.

[[FILES]]
DATEIEN
-------

Wenn nicht explizit mit `--file` verändert, gibt es vier Dateien, in welchen 'git-config' nach Optionen sucht:

$(prefix)/etc/gitconfig::
	Systemweite Konfigurationsdatei.

$XDG_CONFIG_HOME/git/config::
	Zweite benutzerspezifische Konfigurationsdatei. Wenn $XDG_CONFIG_HOME nicht gesetzt oder leer ist, wird `$HOME/.config/git/config` verwendet. Jede einwertige Variable, die in dieser Datei gesetzt ist, wird mit dem überschrieben, was in `~/.gitconfig` steht. Es empfiehlt sich, diese Datei nicht zu erstellen, wenn manchmal ältere Versionen von Git verwendet werden, da diese Datei erst seit relativ kurzer Zeit unterstützt wird.

~/.gitconfig::
	Benutzerspezifische Konfigurationsdatei. Auch „globale“ Konfigurationsdatei genannt.

$GIT_DIR/config::
	Spezifische Konfigurationsdatei für das Repository.

$GIT_DIR/config.worktree::
	Diese Angabe ist optional und wird nur durchsucht, wenn `extensions.worktreeConfig` in $GIT_DIR/config vorhanden ist.

Falls keine weiteren Optionen gegeben sind, werden alle Leseoperationen auf allen verfügbaren Dateien ausgeführt. Wenn die globale oder die systemweite Konfigurationsdateien fehlen, werden sie ignoriert. Falls die Konfigurationsdatei des Repositorys nicht verfügbar oder lesbar ist, wird 'git config' mit einem Fehlercode, der nicht null ist, beendet. In beiden Fällen jedoch wird keine Fehlermeldung ausgegeben.

Die Dateien werden in der oben angegebenen Reihenfolge gelesen, wobei der zuletzt gefundene Wert Vorrang vor früher gelesenen Werten hat. Werden mehrere Werte ermittelt, dann kommen alle Werte eines Schlüssels aus allen Dateien zum Einsatz.

Einzelne Konfigurationsparameter können beim Ausführen eines git-Befehls mit der Option `-c` überschrieben werden. Siehe linkgit:git[1] für weitere Details.

Alle Schreiboptionen schreiben standardmäßig in die Konfigurationsdatei des Repositorys. Beachten Sie, dass dies auch Optionen wie `--replace-all` und `--unset` betrifft. *'git config' wird immer nur eine Datei zur gleichen Zeit ändern*.

You can override these rules using the `--global`, `--system`, `--local`, `--worktree`, and `--file` command-line options; see <<OPTIONS>> above.


ENVIRONMENT
-----------

GIT_CONFIG_GLOBAL::
GIT_CONFIG_SYSTEM::
	Take the configuration from the given files instead from global or system-level configuration. See linkgit:git[1] for details.

GIT_CONFIG_NOSYSTEM::
	Legt fest, ob die Leseeinstellungen aus der systemweiten Datei $(prefix)/etc/gitconfig übersprungen werden sollen. Siehe linkgit:git[1] für Einzelheiten.

Siehe auch <<DATEIEN>>.

GIT_CONFIG_COUNT::
GIT_CONFIG_KEY_<n>::
GIT_CONFIG_VALUE_<n>::
	If GIT_CONFIG_COUNT is set to a positive number, all environment pairs GIT_CONFIG_KEY_<n> and GIT_CONFIG_VALUE_<n> up to that number will be added to the process's runtime configuration. The config pairs are zero-indexed. Any missing key or value is treated as an error. An empty GIT_CONFIG_COUNT is treated the same as GIT_CONFIG_COUNT=0, namely no pairs are processed. These environment variables will override values in configuration files, but will be overridden by any explicit options passed via `git -c`.
+
This is useful for cases where you want to spawn multiple git commands with a common configuration but cannot depend on a configuration file, for example when writing scripts.

GIT_CONFIG::
	If no `--file` option is provided to `git config`, use the file given by `GIT_CONFIG` as if it were provided via `--file`. This variable has no effect on other Git commands, and is mostly for historical compatibility; there is generally no reason to use it instead of the `--file` option.

[[EXAMPLES]]
BEISPIELE
---------

Angenommen wird folgende .git/config-Datei:

------------
#
# Dies ist die Konfigurationsdatei und
# ein '#' oder ein ';' stellt einen
# Kommentar dar.
#

; Kernvariablen
[core]
	; den Dateimodi nicht vertrauen
	filemode = false

; Unser diff-Algorithmus
[diff]
	external = /usr/local/bin/diff-wrapper
	renames = true

; Proxyeinstellungen
[core]
	gitproxy="proxy-Befehl" für kernel.org
	gitproxy=default-proxy ; für den Rest

; HTTP
[http]
	sslVerify
[http "https://weak.example.com"]
	sslVerify = false
	cookieFile = /tmp/cookie.txt
------------

Sie können den Dateimodus auf "true" setzen mit

------------
% git config core.filemode true
------------

Die hypothetischen Proxy-Befehlseinträge haben tatsächlich ein entsprechendes Anhängsel, um zu erkennen, auf welche URL sie sich beziehen. Hier erfahren Sie, wie Sie den Eintrag für kernel.org in "ssh" ändern können.

------------
% git config core.gitproxy '"ssh" for kernel.org' 'for kernel.org$'
------------

Dies stellt sicher, dass nur das Schlüssel/Wertpaar für kernel.org ersetzt wird.

Um den Eintrag für Umbenennungen zu löschen, verwenden Sie

------------
% git config --unset diff.renames
------------

Falls Sie einen Eintrag für eine Multivar (Eine Variable mit mehreren Einträgen, wie core.gitproxy oben), löschen möchten, müssen Sie eine Regex für den Wert exakt einer Zeile angeben.

Um den Wert für einen gegebenen Schlüssel abzufragen, benutzen Sie

------------
% git config --get core.filemode
------------

oder

------------
% git config core.filemode
------------

oder, um eine Multivar abzufragen:

------------
% git config --get core.gitproxy "for kernel.org$"
------------

Falls Sie alle Werte einer Multivar wissen möchten, verwenden Sie:

------------
% git config --get-all core.gitproxy
------------

Wenn Sie gerne gefährlich leben, können Sie *alle* core.gitproxy-Einträge durch einem neuen ersetzen mit

------------
% git config --replace-all core.gitproxy ssh
------------

Wenn Sie jedoch wirklich nur eine Zeile für den Standardproxy verändern möchten, beispielsweise diejenige ohne ein Anhängsel "for ...", können Sie dies so tun:

------------
% git config core.gitproxy ssh '! for '
------------

Um tatsächlich nur Werte mit einem Ausrufezeichen abzugleichen, müssen Sie

------------
% git config section.key value '[!]'
------------

Um einen neuen Proxy hinzuzufügen, ohne einen der vorhandenen Proxys zu ändern, verwenden Sie

------------
% git config --add core.gitproxy '"proxy-command" for example.com'
------------

Ein Beispiel, um angepasste Farbe der Konfigurationsdatei in Ihrem Script zu verwenden:

------------
#!/bin/sh
WS=$(git config --get-color color.diff.whitespace "blue reverse")
RESET=$(git config --get-color "" "reset")
echo "${WS}Ihre Leerzeichen-Farbe oder invertiertes Blau${RESET}"
------------

Für URLs in `https://weak.example.com` wird `http.sslVerify` auf `false` gesetzt, während es für alle anderen auf `true` gesetzt wird:

------------
% git config --type=bool --get-urlmatch http.sslverify https://good.example.com
true
% git config --type=bool --get-urlmatch http.sslverify https://weak.example.com
false
% git config --get-urlmatch http https://weak.example.com
http.cookieFile /tmp/cookie.txt
http.sslverify false
------------

include::config.txt[]

BUGS
----
Bei Verwendung der veralteten Syntax `[section.subsection]` führt die Änderung eines Wertes dazu, dass ein mehrzeiliger Schlüssel anstelle einer Änderung hinzugefügt wird, falls der Unterabschnitt mit mindestens einem Großbuchstaben angegeben wird. Wenn beispielsweise die Konfiguration wie folgt aussieht

--------
  [section.subsection]
    key = value1
--------

und die Ausführung von `git config section.Subsection.key value2` ergibt

--------
  [section.subsection]
    key = value1
    key = value2
--------


GIT
---
Teil der linkgit:git[1] Suite
