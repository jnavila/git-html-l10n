GIT URLS[[URLS]]
----------------

Im Allgemeinen enthalten URLs Informationen über das Transportprotokoll, die Adresse des Remote-Servers und den Pfad zum Repository. Je nach Transportprotokoll können einzelne dieser Informationen fehlen.

Git supports ssh, git, http, and https protocols (in addition, ftp and ftps can be used for fetching, but this is inefficient and deprecated; do not use them).

Der native Transport (d.h. git:// URL) führt keine Authentifizierung durch und sollte in ungesicherten Netzwerken mit Vorsicht verwendet werden.

Folgende Syntaxen können damit verwendet werden:

- ssh://{startsb}user@{endsb}host.xz{startsb}:port{endsb}/Pfad/zum/Repo.git/
- git://host.xz{startsb}:port{endsb}/Pfad/zum/Repo.git/
- http{startsb}s{endsb}://host.xz{startsb}:port{endsb}/Pfad/zum/Repo.git/
- ftp{startsb}s{endsb}://host.xz{startsb}:port{endsb}/Pfad/zum/Repo.git/

Eine alternative, scp-ähnliche Syntax kann auch mit dem Protokoll SSH verwendet werden:

- {startsb}user@{endsb}host.xz:Pfad/zum/Repo.git/

Diese Syntax wird nur erkannt, wenn vor dem ersten Doppelpunkt keine Schrägstriche stehen. Dadurch kann ein lokaler Pfad, der einen Doppelpunkt enthält, besser erkannt werden. Zum Beispiel könnte der lokale Pfad `foo:bar` als absoluter Pfad oder `./foo:bar` angegeben werden, um zu vermeiden, dass er als SSH-URL fehlinterpretiert wird.

Die Protokolle SSH und GIT unterstützen zusätzlich die Erweiterung ~username:

- ssh://{startsb}user@{endsb}host.xz{startsb}:port{endsb}/~{startsb}user{endsb}/Pfad/zum/Repo.git/
- git://host.xz{startsb}:port{endsb}/~{startsb}user{endsb}/Pfad/zum/Repo.git/
- {startsb}user@{endsb}host.xz:/~{startsb}user{endsb}/Pfad/zum/Repo.git/

Für lokale Repositorys, die von Git ebenfalls nativ unterstützt werden, können die folgenden Syntaxen verwendet werden:

- /Pfad/zum/Repo.git/
- \file:///Pfad/zum/Repo.git/

ifndef::git-clone[]
Diese beiden Syntaxen sind größtenteils gleichwertig, außer beim Klonen, wo die erstere die Option --local beinhaltet. Siehe linkgit:git-clone[1] für weitere Details.
endif::git-clone[]

ifdef::git-clone[]
Diese beiden Syntaxen sind größtenteils äquivalent, außer dass die erstgenannte die Option --local beinhaltet.
endif::git-clone[]

'git clone', 'git fetch' und 'git pull', aber nicht 'git push', akzeptieren auch eine geeignete Bundle-Datei. Siehe linkgit:git-bundle[1].

Wenn Git nicht versteht, wie ein bestimmtes Transportprotokoll zu verwenden ist, versucht es, das 'Remote-<Transport>'-Hilfsprogramm zu benutzen, falls es eines gibt. Um ein Remote-Hilfsprogramm explizit anzufordern, kann die folgende Syntax verwendet werden:

- <Transport>::<Adresse>

wobei <Adresse> ein Pfad, ein Server und Pfad oder eine beliebige URL-ähnliche Zeichenfolge sein kann, die von dem aufgerufenen, spezifischen Remote-Hilfsprogramm erkannt wird. Siehe linkgit:gitremote-helpers[7] für weitere Details.

Wenn es eine große Anzahl ähnlich benannter Remote-Repositorys gibt und Sie für diese ein anderes Format verwenden möchten (sodass die von Ihnen verwendeten URLs in funktionierende URLs umgeschrieben werden), kann ein Konfigurations-Abschnitt in dieser Form erstellt werden:

------------
	[url "<aktuelle URL-Basis>"]
		insteadOf = <andere URL-Basis>
------------

Beispielsweise mit folgendem:

------------
	[url "git://git.host.xz/"]
		insteadOf = host.xz:/Pfad/zu/
		insteadOf = work:
------------

eine URL wie "work:Repo.git" oder wie "host.xz:/fad/zu/Repo.git" wird in jedem Kontext umgeschrieben, der eine URL zu "git://git.host.xz/Repo.git" umwandelt.

Wenn Sie URLs nur zum Pushen neu schreiben möchten, können Sie einen Konfiguration-Abschnitt in der folgenden Form erstellen:

------------
	[url "<aktuelle URL-Basis>"]
		pushInsteadOf = <andere URL-Basis>
------------

Beispielsweise mit folgendem:

------------
	[url "ssh://example.org/"]
		pushInsteadOf = git://example.org/
------------

eine URL wie „git://example.org/path/to/repo.git“ wird für Pushes in „ssh://example.org/path/to/repo.git“ umgeschrieben, aber Pulls verwenden weiterhin die Original-URL.
